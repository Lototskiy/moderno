!function(t,e){"use strict";"object"==typeof module&&"object"==typeof module.exports?module.exports=t.document?e(t,!0):function(t){if(!t.document)throw new Error("jQuery requires a window with a document");return e(t)}:e(t)}("undefined"!=typeof window?window:this,function(_,t){"use strict";function g(t){return null!=t&&t===t.window}var e=[],S=_.document,n=Object.getPrototypeOf,a=e.slice,m=e.concat,l=e.push,o=e.indexOf,i={},s=i.toString,y=i.hasOwnProperty,r=y.toString,c=r.call(Object),v={},b=function(t){return"function"==typeof t&&"number"!=typeof t.nodeType},d={type:!0,src:!0,nonce:!0,noModule:!0};function x(t,e,i){var n,o,s=(i=i||S).createElement("script");if(s.text=t,e)for(n in d)(o=e[n]||e.getAttribute&&e.getAttribute(n))&&s.setAttribute(n,o);i.head.appendChild(s).parentNode.removeChild(s)}function w(t){return null==t?t+"":"object"==typeof t||"function"==typeof t?i[s.call(t)]||"object":typeof t}var u="3.4.1",T=function(t,e){return new T.fn.init(t,e)},h=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;function p(t){var e=!!t&&"length"in t&&t.length,i=w(t);return!b(t)&&!g(t)&&("array"===i||0===e||"number"==typeof e&&0<e&&e-1 in t)}T.fn=T.prototype={jquery:u,constructor:T,length:0,toArray:function(){return a.call(this)},get:function(t){return null==t?a.call(this):t<0?this[t+this.length]:this[t]},pushStack:function(t){var e=T.merge(this.constructor(),t);return e.prevObject=this,e},each:function(t){return T.each(this,t)},map:function(i){return this.pushStack(T.map(this,function(t,e){return i.call(t,e,t)}))},slice:function(){return this.pushStack(a.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(t){var e=this.length,i=+t+(t<0?e:0);return this.pushStack(0<=i&&i<e?[this[i]]:[])},end:function(){return this.prevObject||this.constructor()},push:l,sort:e.sort,splice:e.splice},T.extend=T.fn.extend=function(){var t,e,i,n,o,s,r=arguments[0]||{},a=1,l=arguments.length,c=!1;for("boolean"==typeof r&&(c=r,r=arguments[a]||{},a++),"object"==typeof r||b(r)||(r={}),a===l&&(r=this,a--);a<l;a++)if(null!=(t=arguments[a]))for(e in t)n=t[e],"__proto__"!==e&&r!==n&&(c&&n&&(T.isPlainObject(n)||(o=Array.isArray(n)))?(i=r[e],s=o&&!Array.isArray(i)?[]:o||T.isPlainObject(i)?i:{},o=!1,r[e]=T.extend(c,s,n)):void 0!==n&&(r[e]=n));return r},T.extend({expando:"jQuery"+(u+Math.random()).replace(/\D/g,""),isReady:!0,error:function(t){throw new Error(t)},noop:function(){},isPlainObject:function(t){var e,i;return!(!t||"[object Object]"!==s.call(t))&&(!(e=n(t))||"function"==typeof(i=y.call(e,"constructor")&&e.constructor)&&r.call(i)===c)},isEmptyObject:function(t){var e;for(e in t)return!1;return!0},globalEval:function(t,e){x(t,{nonce:e&&e.nonce})},each:function(t,e){var i,n=0;if(p(t))for(i=t.length;n<i&&!1!==e.call(t[n],n,t[n]);n++);else for(n in t)if(!1===e.call(t[n],n,t[n]))break;return t},trim:function(t){return null==t?"":(t+"").replace(h,"")},makeArray:function(t,e){var i=e||[];return null!=t&&(p(Object(t))?T.merge(i,"string"==typeof t?[t]:t):l.call(i,t)),i},inArray:function(t,e,i){return null==e?-1:o.call(e,t,i)},merge:function(t,e){for(var i=+e.length,n=0,o=t.length;n<i;n++)t[o++]=e[n];return t.length=o,t},grep:function(t,e,i){for(var n=[],o=0,s=t.length,r=!i;o<s;o++)!e(t[o],o)!=r&&n.push(t[o]);return n},map:function(t,e,i){var n,o,s=0,r=[];if(p(t))for(n=t.length;s<n;s++)null!=(o=e(t[s],s,i))&&r.push(o);else for(s in t)null!=(o=e(t[s],s,i))&&r.push(o);return m.apply([],r)},guid:1,support:v}),"function"==typeof Symbol&&(T.fn[Symbol.iterator]=e[Symbol.iterator]),T.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(t,e){i["[object "+e+"]"]=e.toLowerCase()});var f=function(i){function u(t,e,i){var n="0x"+e-65536;return n!=n||i?e:n<0?String.fromCharCode(65536+n):String.fromCharCode(n>>10|55296,1023&n|56320)}function o(){C()}var t,p,x,s,r,f,h,g,w,l,c,C,_,a,S,m,d,y,v,T="sizzle"+ +new Date,b=i.document,k=0,n=0,$=lt(),A=lt(),E=lt(),D=lt(),P=function(t,e){return t===e&&(c=!0),0},O={}.hasOwnProperty,e=[],I=e.pop,F=e.push,M=e.push,N=e.slice,R=function(t,e){for(var i=0,n=t.length;i<n;i++)if(t[i]===e)return i;return-1},L="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",j="[\\x20\\t\\r\\n\\f]",B="(?:\\\\.|[\\w-]|[^\0-\\xa0])+",H="\\["+j+"*("+B+")(?:"+j+"*([*^$|!~]?=)"+j+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+B+"))|)"+j+"*\\]",q=":("+B+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+H+")*)|.*)\\)|)",z=new RegExp(j+"+","g"),W=new RegExp("^"+j+"+|((?:^|[^\\\\])(?:\\\\.)*)"+j+"+$","g"),U=new RegExp("^"+j+"*,"+j+"*"),X=new RegExp("^"+j+"*([>+~]|"+j+")"+j+"*"),V=new RegExp(j+"|>"),Y=new RegExp(q),G=new RegExp("^"+B+"$"),K={ID:new RegExp("^#("+B+")"),CLASS:new RegExp("^\\.("+B+")"),TAG:new RegExp("^("+B+"|[*])"),ATTR:new RegExp("^"+H),PSEUDO:new RegExp("^"+q),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+j+"*(even|odd|(([+-]|)(\\d*)n|)"+j+"*(?:([+-]|)"+j+"*(\\d+)|))"+j+"*\\)|)","i"),bool:new RegExp("^(?:"+L+")$","i"),needsContext:new RegExp("^"+j+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+j+"*((?:-\\d)?\\d*)"+j+"*\\)|)(?=[^-]|$)","i")},Q=/HTML$/i,Z=/^(?:input|select|textarea|button)$/i,J=/^h\d$/i,tt=/^[^{]+\{\s*\[native \w/,et=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,it=/[+~]/,nt=new RegExp("\\\\([\\da-f]{1,6}"+j+"?|("+j+")|.)","ig"),ot=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,st=function(t,e){return e?"\0"===t?"ï¿½":t.slice(0,-1)+"\\"+t.charCodeAt(t.length-1).toString(16)+" ":"\\"+t},rt=xt(function(t){return!0===t.disabled&&"fieldset"===t.nodeName.toLowerCase()},{dir:"parentNode",next:"legend"});try{M.apply(e=N.call(b.childNodes),b.childNodes),e[b.childNodes.length].nodeType}catch(t){M={apply:e.length?function(t,e){F.apply(t,N.call(e))}:function(t,e){for(var i=t.length,n=0;t[i++]=e[n++];);t.length=i-1}}}function at(e,t,i,n){var o,s,r,a,l,c,d,u=t&&t.ownerDocument,h=t?t.nodeType:9;if(i=i||[],"string"!=typeof e||!e||1!==h&&9!==h&&11!==h)return i;if(!n&&((t?t.ownerDocument||t:b)!==_&&C(t),t=t||_,S)){if(11!==h&&(l=et.exec(e)))if(o=l[1]){if(9===h){if(!(r=t.getElementById(o)))return i;if(r.id===o)return i.push(r),i}else if(u&&(r=u.getElementById(o))&&v(t,r)&&r.id===o)return i.push(r),i}else{if(l[2])return M.apply(i,t.getElementsByTagName(e)),i;if((o=l[3])&&p.getElementsByClassName&&t.getElementsByClassName)return M.apply(i,t.getElementsByClassName(o)),i}if(p.qsa&&!D[e+" "]&&(!m||!m.test(e))&&(1!==h||"object"!==t.nodeName.toLowerCase())){if(d=e,u=t,1===h&&V.test(e)){for((a=t.getAttribute("id"))?a=a.replace(ot,st):t.setAttribute("id",a=T),s=(c=f(e)).length;s--;)c[s]="#"+a+" "+bt(c[s]);d=c.join(","),u=it.test(e)&&yt(t.parentNode)||t}try{return M.apply(i,u.querySelectorAll(d)),i}catch(t){D(e,!0)}finally{a===T&&t.removeAttribute("id")}}}return g(e.replace(W,"$1"),t,i,n)}function lt(){var n=[];return function t(e,i){return n.push(e+" ")>x.cacheLength&&delete t[n.shift()],t[e+" "]=i}}function ct(t){return t[T]=!0,t}function dt(t){var e=_.createElement("fieldset");try{return!!t(e)}catch(t){return!1}finally{e.parentNode&&e.parentNode.removeChild(e),e=null}}function ut(t,e){for(var i=t.split("|"),n=i.length;n--;)x.attrHandle[i[n]]=e}function ht(t,e){var i=e&&t,n=i&&1===t.nodeType&&1===e.nodeType&&t.sourceIndex-e.sourceIndex;if(n)return n;if(i)for(;i=i.nextSibling;)if(i===e)return-1;return t?1:-1}function pt(e){return function(t){return"input"===t.nodeName.toLowerCase()&&t.type===e}}function ft(i){return function(t){var e=t.nodeName.toLowerCase();return("input"===e||"button"===e)&&t.type===i}}function gt(e){return function(t){return"form"in t?t.parentNode&&!1===t.disabled?"label"in t?"label"in t.parentNode?t.parentNode.disabled===e:t.disabled===e:t.isDisabled===e||t.isDisabled!==!e&&rt(t)===e:t.disabled===e:"label"in t&&t.disabled===e}}function mt(r){return ct(function(s){return s=+s,ct(function(t,e){for(var i,n=r([],t.length,s),o=n.length;o--;)t[i=n[o]]&&(t[i]=!(e[i]=t[i]))})})}function yt(t){return t&&void 0!==t.getElementsByTagName&&t}for(t in p=at.support={},r=at.isXML=function(t){var e=t.namespaceURI,i=(t.ownerDocument||t).documentElement;return!Q.test(e||i&&i.nodeName||"HTML")},C=at.setDocument=function(t){var e,i,n=t?t.ownerDocument||t:b;return n!==_&&9===n.nodeType&&n.documentElement&&(a=(_=n).documentElement,S=!r(_),b!==_&&(i=_.defaultView)&&i.top!==i&&(i.addEventListener?i.addEventListener("unload",o,!1):i.attachEvent&&i.attachEvent("onunload",o)),p.attributes=dt(function(t){return t.className="i",!t.getAttribute("className")}),p.getElementsByTagName=dt(function(t){return t.appendChild(_.createComment("")),!t.getElementsByTagName("*").length}),p.getElementsByClassName=tt.test(_.getElementsByClassName),p.getById=dt(function(t){return a.appendChild(t).id=T,!_.getElementsByName||!_.getElementsByName(T).length}),p.getById?(x.filter.ID=function(t){var e=t.replace(nt,u);return function(t){return t.getAttribute("id")===e}},x.find.ID=function(t,e){if(void 0!==e.getElementById&&S){var i=e.getElementById(t);return i?[i]:[]}}):(x.filter.ID=function(t){var i=t.replace(nt,u);return function(t){var e=void 0!==t.getAttributeNode&&t.getAttributeNode("id");return e&&e.value===i}},x.find.ID=function(t,e){if(void 0!==e.getElementById&&S){var i,n,o,s=e.getElementById(t);if(s){if((i=s.getAttributeNode("id"))&&i.value===t)return[s];for(o=e.getElementsByName(t),n=0;s=o[n++];)if((i=s.getAttributeNode("id"))&&i.value===t)return[s]}return[]}}),x.find.TAG=p.getElementsByTagName?function(t,e){return void 0!==e.getElementsByTagName?e.getElementsByTagName(t):p.qsa?e.querySelectorAll(t):void 0}:function(t,e){var i,n=[],o=0,s=e.getElementsByTagName(t);if("*"!==t)return s;for(;i=s[o++];)1===i.nodeType&&n.push(i);return n},x.find.CLASS=p.getElementsByClassName&&function(t,e){if(void 0!==e.getElementsByClassName&&S)return e.getElementsByClassName(t)},d=[],m=[],(p.qsa=tt.test(_.querySelectorAll))&&(dt(function(t){a.appendChild(t).innerHTML="<a id='"+T+"'></a><select id='"+T+"-\r\\' msallowcapture=''><option selected=''></option></select>",t.querySelectorAll("[msallowcapture^='']").length&&m.push("[*^$]="+j+"*(?:''|\"\")"),t.querySelectorAll("[selected]").length||m.push("\\["+j+"*(?:value|"+L+")"),t.querySelectorAll("[id~="+T+"-]").length||m.push("~="),t.querySelectorAll(":checked").length||m.push(":checked"),t.querySelectorAll("a#"+T+"+*").length||m.push(".#.+[+~]")}),dt(function(t){t.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var e=_.createElement("input");e.setAttribute("type","hidden"),t.appendChild(e).setAttribute("name","D"),t.querySelectorAll("[name=d]").length&&m.push("name"+j+"*[*^$|!~]?="),2!==t.querySelectorAll(":enabled").length&&m.push(":enabled",":disabled"),a.appendChild(t).disabled=!0,2!==t.querySelectorAll(":disabled").length&&m.push(":enabled",":disabled"),t.querySelectorAll("*,:x"),m.push(",.*:")})),(p.matchesSelector=tt.test(y=a.matches||a.webkitMatchesSelector||a.mozMatchesSelector||a.oMatchesSelector||a.msMatchesSelector))&&dt(function(t){p.disconnectedMatch=y.call(t,"*"),y.call(t,"[s!='']:x"),d.push("!=",q)}),m=m.length&&new RegExp(m.join("|")),d=d.length&&new RegExp(d.join("|")),e=tt.test(a.compareDocumentPosition),v=e||tt.test(a.contains)?function(t,e){var i=9===t.nodeType?t.documentElement:t,n=e&&e.parentNode;return t===n||!(!n||1!==n.nodeType||!(i.contains?i.contains(n):t.compareDocumentPosition&&16&t.compareDocumentPosition(n)))}:function(t,e){if(e)for(;e=e.parentNode;)if(e===t)return!0;return!1},P=e?function(t,e){if(t===e)return c=!0,0;var i=!t.compareDocumentPosition-!e.compareDocumentPosition;return i||(1&(i=(t.ownerDocument||t)===(e.ownerDocument||e)?t.compareDocumentPosition(e):1)||!p.sortDetached&&e.compareDocumentPosition(t)===i?t===_||t.ownerDocument===b&&v(b,t)?-1:e===_||e.ownerDocument===b&&v(b,e)?1:l?R(l,t)-R(l,e):0:4&i?-1:1)}:function(t,e){if(t===e)return c=!0,0;var i,n=0,o=t.parentNode,s=e.parentNode,r=[t],a=[e];if(!o||!s)return t===_?-1:e===_?1:o?-1:s?1:l?R(l,t)-R(l,e):0;if(o===s)return ht(t,e);for(i=t;i=i.parentNode;)r.unshift(i);for(i=e;i=i.parentNode;)a.unshift(i);for(;r[n]===a[n];)n++;return n?ht(r[n],a[n]):r[n]===b?-1:a[n]===b?1:0}),_},at.matches=function(t,e){return at(t,null,null,e)},at.matchesSelector=function(t,e){if((t.ownerDocument||t)!==_&&C(t),p.matchesSelector&&S&&!D[e+" "]&&(!d||!d.test(e))&&(!m||!m.test(e)))try{var i=y.call(t,e);if(i||p.disconnectedMatch||t.document&&11!==t.document.nodeType)return i}catch(t){D(e,!0)}return 0<at(e,_,null,[t]).length},at.contains=function(t,e){return(t.ownerDocument||t)!==_&&C(t),v(t,e)},at.attr=function(t,e){(t.ownerDocument||t)!==_&&C(t);var i=x.attrHandle[e.toLowerCase()],n=i&&O.call(x.attrHandle,e.toLowerCase())?i(t,e,!S):void 0;return void 0!==n?n:p.attributes||!S?t.getAttribute(e):(n=t.getAttributeNode(e))&&n.specified?n.value:null},at.escape=function(t){return(t+"").replace(ot,st)},at.error=function(t){throw new Error("Syntax error, unrecognized expression: "+t)},at.uniqueSort=function(t){var e,i=[],n=0,o=0;if(c=!p.detectDuplicates,l=!p.sortStable&&t.slice(0),t.sort(P),c){for(;e=t[o++];)e===t[o]&&(n=i.push(o));for(;n--;)t.splice(i[n],1)}return l=null,t},s=at.getText=function(t){var e,i="",n=0,o=t.nodeType;if(o){if(1===o||9===o||11===o){if("string"==typeof t.textContent)return t.textContent;for(t=t.firstChild;t;t=t.nextSibling)i+=s(t)}else if(3===o||4===o)return t.nodeValue}else for(;e=t[n++];)i+=s(e);return i},(x=at.selectors={cacheLength:50,createPseudo:ct,match:K,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(t){return t[1]=t[1].replace(nt,u),t[3]=(t[3]||t[4]||t[5]||"").replace(nt,u),"~="===t[2]&&(t[3]=" "+t[3]+" "),t.slice(0,4)},CHILD:function(t){return t[1]=t[1].toLowerCase(),"nth"===t[1].slice(0,3)?(t[3]||at.error(t[0]),t[4]=+(t[4]?t[5]+(t[6]||1):2*("even"===t[3]||"odd"===t[3])),t[5]=+(t[7]+t[8]||"odd"===t[3])):t[3]&&at.error(t[0]),t},PSEUDO:function(t){var e,i=!t[6]&&t[2];return K.CHILD.test(t[0])?null:(t[3]?t[2]=t[4]||t[5]||"":i&&Y.test(i)&&(e=f(i,!0))&&(e=i.indexOf(")",i.length-e)-i.length)&&(t[0]=t[0].slice(0,e),t[2]=i.slice(0,e)),t.slice(0,3))}},filter:{TAG:function(t){var e=t.replace(nt,u).toLowerCase();return"*"===t?function(){return!0}:function(t){return t.nodeName&&t.nodeName.toLowerCase()===e}},CLASS:function(t){var e=$[t+" "];return e||(e=new RegExp("(^|"+j+")"+t+"("+j+"|$)"))&&$(t,function(t){return e.test("string"==typeof t.className&&t.className||void 0!==t.getAttribute&&t.getAttribute("class")||"")})},ATTR:function(i,n,o){return function(t){var e=at.attr(t,i);return null==e?"!="===n:!n||(e+="","="===n?e===o:"!="===n?e!==o:"^="===n?o&&0===e.indexOf(o):"*="===n?o&&-1<e.indexOf(o):"$="===n?o&&e.slice(-o.length)===o:"~="===n?-1<(" "+e.replace(z," ")+" ").indexOf(o):"|="===n&&(e===o||e.slice(0,o.length+1)===o+"-"))}},CHILD:function(f,t,e,g,m){var y="nth"!==f.slice(0,3),v="last"!==f.slice(-4),b="of-type"===t;return 1===g&&0===m?function(t){return!!t.parentNode}:function(t,e,i){var n,o,s,r,a,l,c=y!=v?"nextSibling":"previousSibling",d=t.parentNode,u=b&&t.nodeName.toLowerCase(),h=!i&&!b,p=!1;if(d){if(y){for(;c;){for(r=t;r=r[c];)if(b?r.nodeName.toLowerCase()===u:1===r.nodeType)return!1;l=c="only"===f&&!l&&"nextSibling"}return!0}if(l=[v?d.firstChild:d.lastChild],v&&h){for(p=(a=(n=(o=(s=(r=d)[T]||(r[T]={}))[r.uniqueID]||(s[r.uniqueID]={}))[f]||[])[0]===k&&n[1])&&n[2],r=a&&d.childNodes[a];r=++a&&r&&r[c]||(p=a=0)||l.pop();)if(1===r.nodeType&&++p&&r===t){o[f]=[k,a,p];break}}else if(h&&(p=a=(n=(o=(s=(r=t)[T]||(r[T]={}))[r.uniqueID]||(s[r.uniqueID]={}))[f]||[])[0]===k&&n[1]),!1===p)for(;(r=++a&&r&&r[c]||(p=a=0)||l.pop())&&((b?r.nodeName.toLowerCase()!==u:1!==r.nodeType)||!++p||(h&&((o=(s=r[T]||(r[T]={}))[r.uniqueID]||(s[r.uniqueID]={}))[f]=[k,p]),r!==t)););return(p-=m)===g||p%g==0&&0<=p/g}}},PSEUDO:function(t,s){var e,r=x.pseudos[t]||x.setFilters[t.toLowerCase()]||at.error("unsupported pseudo: "+t);return r[T]?r(s):1<r.length?(e=[t,t,"",s],x.setFilters.hasOwnProperty(t.toLowerCase())?ct(function(t,e){for(var i,n=r(t,s),o=n.length;o--;)t[i=R(t,n[o])]=!(e[i]=n[o])}):function(t){return r(t,0,e)}):r}},pseudos:{not:ct(function(t){var n=[],o=[],a=h(t.replace(W,"$1"));return a[T]?ct(function(t,e,i,n){for(var o,s=a(t,null,n,[]),r=t.length;r--;)(o=s[r])&&(t[r]=!(e[r]=o))}):function(t,e,i){return n[0]=t,a(n,null,i,o),n[0]=null,!o.pop()}}),has:ct(function(e){return function(t){return 0<at(e,t).length}}),contains:ct(function(e){return e=e.replace(nt,u),function(t){return-1<(t.textContent||s(t)).indexOf(e)}}),lang:ct(function(i){return G.test(i||"")||at.error("unsupported lang: "+i),i=i.replace(nt,u).toLowerCase(),function(t){var e;do{if(e=S?t.lang:t.getAttribute("xml:lang")||t.getAttribute("lang"))return(e=e.toLowerCase())===i||0===e.indexOf(i+"-")}while((t=t.parentNode)&&1===t.nodeType);return!1}}),target:function(t){var e=i.location&&i.location.hash;return e&&e.slice(1)===t.id},root:function(t){return t===a},focus:function(t){return t===_.activeElement&&(!_.hasFocus||_.hasFocus())&&!!(t.type||t.href||~t.tabIndex)},enabled:gt(!1),disabled:gt(!0),checked:function(t){var e=t.nodeName.toLowerCase();return"input"===e&&!!t.checked||"option"===e&&!!t.selected},selected:function(t){return t.parentNode&&t.parentNode.selectedIndex,!0===t.selected},empty:function(t){for(t=t.firstChild;t;t=t.nextSibling)if(t.nodeType<6)return!1;return!0},parent:function(t){return!x.pseudos.empty(t)},header:function(t){return J.test(t.nodeName)},input:function(t){return Z.test(t.nodeName)},button:function(t){var e=t.nodeName.toLowerCase();return"input"===e&&"button"===t.type||"button"===e},text:function(t){var e;return"input"===t.nodeName.toLowerCase()&&"text"===t.type&&(null==(e=t.getAttribute("type"))||"text"===e.toLowerCase())},first:mt(function(){return[0]}),last:mt(function(t,e){return[e-1]}),eq:mt(function(t,e,i){return[i<0?i+e:i]}),even:mt(function(t,e){for(var i=0;i<e;i+=2)t.push(i);return t}),odd:mt(function(t,e){for(var i=1;i<e;i+=2)t.push(i);return t}),lt:mt(function(t,e,i){for(var n=i<0?i+e:e<i?e:i;0<=--n;)t.push(n);return t}),gt:mt(function(t,e,i){for(var n=i<0?i+e:i;++n<e;)t.push(n);return t})}}).pseudos.nth=x.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})x.pseudos[t]=pt(t);for(t in{submit:!0,reset:!0})x.pseudos[t]=ft(t);function vt(){}function bt(t){for(var e=0,i=t.length,n="";e<i;e++)n+=t[e].value;return n}function xt(a,t,e){var l=t.dir,c=t.next,d=c||l,u=e&&"parentNode"===d,h=n++;return t.first?function(t,e,i){for(;t=t[l];)if(1===t.nodeType||u)return a(t,e,i);return!1}:function(t,e,i){var n,o,s,r=[k,h];if(i){for(;t=t[l];)if((1===t.nodeType||u)&&a(t,e,i))return!0}else for(;t=t[l];)if(1===t.nodeType||u)if(o=(s=t[T]||(t[T]={}))[t.uniqueID]||(s[t.uniqueID]={}),c&&c===t.nodeName.toLowerCase())t=t[l]||t;else{if((n=o[d])&&n[0]===k&&n[1]===h)return r[2]=n[2];if((o[d]=r)[2]=a(t,e,i))return!0}return!1}}function wt(o){return 1<o.length?function(t,e,i){for(var n=o.length;n--;)if(!o[n](t,e,i))return!1;return!0}:o[0]}function Ct(t,e,i,n,o){for(var s,r=[],a=0,l=t.length,c=null!=e;a<l;a++)(s=t[a])&&(i&&!i(s,n,o)||(r.push(s),c&&e.push(a)));return r}function _t(p,f,g,m,y,t){return m&&!m[T]&&(m=_t(m)),y&&!y[T]&&(y=_t(y,t)),ct(function(t,e,i,n){var o,s,r,a=[],l=[],c=e.length,d=t||function(t,e,i){for(var n=0,o=e.length;n<o;n++)at(t,e[n],i);return i}(f||"*",i.nodeType?[i]:i,[]),u=!p||!t&&f?d:Ct(d,a,p,i,n),h=g?y||(t?p:c||m)?[]:e:u;if(g&&g(u,h,i,n),m)for(o=Ct(h,l),m(o,[],i,n),s=o.length;s--;)(r=o[s])&&(h[l[s]]=!(u[l[s]]=r));if(t){if(y||p){if(y){for(o=[],s=h.length;s--;)(r=h[s])&&o.push(u[s]=r);y(null,h=[],o,n)}for(s=h.length;s--;)(r=h[s])&&-1<(o=y?R(t,r):a[s])&&(t[o]=!(e[o]=r))}}else h=Ct(h===e?h.splice(c,h.length):h),y?y(null,e,h,n):M.apply(e,h)})}function St(t){for(var o,e,i,n=t.length,s=x.relative[t[0].type],r=s||x.relative[" "],a=s?1:0,l=xt(function(t){return t===o},r,!0),c=xt(function(t){return-1<R(o,t)},r,!0),d=[function(t,e,i){var n=!s&&(i||e!==w)||((o=e).nodeType?l:c)(t,e,i);return o=null,n}];a<n;a++)if(e=x.relative[t[a].type])d=[xt(wt(d),e)];else{if((e=x.filter[t[a].type].apply(null,t[a].matches))[T]){for(i=++a;i<n&&!x.relative[t[i].type];i++);return _t(1<a&&wt(d),1<a&&bt(t.slice(0,a-1).concat({value:" "===t[a-2].type?"*":""})).replace(W,"$1"),e,a<i&&St(t.slice(a,i)),i<n&&St(t=t.slice(i)),i<n&&bt(t))}d.push(e)}return wt(d)}function Tt(m,y){function t(t,e,i,n,o){var s,r,a,l=0,c="0",d=t&&[],u=[],h=w,p=t||b&&x.find.TAG("*",o),f=k+=null==h?1:Math.random()||.1,g=p.length;for(o&&(w=e===_||e||o);c!==g&&null!=(s=p[c]);c++){if(b&&s){for(r=0,e||s.ownerDocument===_||(C(s),i=!S);a=m[r++];)if(a(s,e||_,i)){n.push(s);break}o&&(k=f)}v&&((s=!a&&s)&&l--,t&&d.push(s))}if(l+=c,v&&c!==l){for(r=0;a=y[r++];)a(d,u,e,i);if(t){if(0<l)for(;c--;)d[c]||u[c]||(u[c]=I.call(n));u=Ct(u)}M.apply(n,u),o&&!t&&0<u.length&&1<l+y.length&&at.uniqueSort(n)}return o&&(k=f,w=h),d}var v=0<y.length,b=0<m.length;return v?ct(t):t}return vt.prototype=x.filters=x.pseudos,x.setFilters=new vt,f=at.tokenize=function(t,e){var i,n,o,s,r,a,l,c=A[t+" "];if(c)return e?0:c.slice(0);for(r=t,a=[],l=x.preFilter;r;){for(s in i&&!(n=U.exec(r))||(n&&(r=r.slice(n[0].length)||r),a.push(o=[])),i=!1,(n=X.exec(r))&&(i=n.shift(),o.push({value:i,type:n[0].replace(W," ")}),r=r.slice(i.length)),x.filter)!(n=K[s].exec(r))||l[s]&&!(n=l[s](n))||(i=n.shift(),o.push({value:i,type:s,matches:n}),r=r.slice(i.length));if(!i)break}return e?r.length:r?at.error(t):A(t,a).slice(0)},h=at.compile=function(t,e){var i,n=[],o=[],s=E[t+" "];if(!s){for(i=(e=e||f(t)).length;i--;)(s=St(e[i]))[T]?n.push(s):o.push(s);(s=E(t,Tt(o,n))).selector=t}return s},g=at.select=function(t,e,i,n){var o,s,r,a,l,c="function"==typeof t&&t,d=!n&&f(t=c.selector||t);if(i=i||[],1===d.length){if(2<(s=d[0]=d[0].slice(0)).length&&"ID"===(r=s[0]).type&&9===e.nodeType&&S&&x.relative[s[1].type]){if(!(e=(x.find.ID(r.matches[0].replace(nt,u),e)||[])[0]))return i;c&&(e=e.parentNode),t=t.slice(s.shift().value.length)}for(o=K.needsContext.test(t)?0:s.length;o--&&(r=s[o],!x.relative[a=r.type]);)if((l=x.find[a])&&(n=l(r.matches[0].replace(nt,u),it.test(s[0].type)&&yt(e.parentNode)||e))){if(s.splice(o,1),!(t=n.length&&bt(s)))return M.apply(i,n),i;break}}return(c||h(t,d))(n,e,!S,i,!e||it.test(t)&&yt(e.parentNode)||e),i},p.sortStable=T.split("").sort(P).join("")===T,p.detectDuplicates=!!c,C(),p.sortDetached=dt(function(t){return 1&t.compareDocumentPosition(_.createElement("fieldset"))}),dt(function(t){return t.innerHTML="<a href='#'></a>","#"===t.firstChild.getAttribute("href")})||ut("type|href|height|width",function(t,e,i){if(!i)return t.getAttribute(e,"type"===e.toLowerCase()?1:2)}),p.attributes&&dt(function(t){return t.innerHTML="<input/>",t.firstChild.setAttribute("value",""),""===t.firstChild.getAttribute("value")})||ut("value",function(t,e,i){if(!i&&"input"===t.nodeName.toLowerCase())return t.defaultValue}),dt(function(t){return null==t.getAttribute("disabled")})||ut(L,function(t,e,i){var n;if(!i)return!0===t[e]?e.toLowerCase():(n=t.getAttributeNode(e))&&n.specified?n.value:null}),at}(_);T.find=f,T.expr=f.selectors,T.expr[":"]=T.expr.pseudos,T.uniqueSort=T.unique=f.uniqueSort,T.text=f.getText,T.isXMLDoc=f.isXML,T.contains=f.contains,T.escapeSelector=f.escape;function C(t,e,i){for(var n=[],o=void 0!==i;(t=t[e])&&9!==t.nodeType;)if(1===t.nodeType){if(o&&T(t).is(i))break;n.push(t)}return n}function k(t,e){for(var i=[];t;t=t.nextSibling)1===t.nodeType&&t!==e&&i.push(t);return i}var $=T.expr.match.needsContext;function A(t,e){return t.nodeName&&t.nodeName.toLowerCase()===e.toLowerCase()}var E=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;function D(t,i,n){return b(i)?T.grep(t,function(t,e){return!!i.call(t,e,t)!==n}):i.nodeType?T.grep(t,function(t){return t===i!==n}):"string"!=typeof i?T.grep(t,function(t){return-1<o.call(i,t)!==n}):T.filter(i,t,n)}T.filter=function(t,e,i){var n=e[0];return i&&(t=":not("+t+")"),1===e.length&&1===n.nodeType?T.find.matchesSelector(n,t)?[n]:[]:T.find.matches(t,T.grep(e,function(t){return 1===t.nodeType}))},T.fn.extend({find:function(t){var e,i,n=this.length,o=this;if("string"!=typeof t)return this.pushStack(T(t).filter(function(){for(e=0;e<n;e++)if(T.contains(o[e],this))return!0}));for(i=this.pushStack([]),e=0;e<n;e++)T.find(t,o[e],i);return 1<n?T.uniqueSort(i):i},filter:function(t){return this.pushStack(D(this,t||[],!1))},not:function(t){return this.pushStack(D(this,t||[],!0))},is:function(t){return!!D(this,"string"==typeof t&&$.test(t)?T(t):t||[],!1).length}});var P,O=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(T.fn.init=function(t,e,i){var n,o;if(!t)return this;if(i=i||P,"string"!=typeof t)return t.nodeType?(this[0]=t,this.length=1,this):b(t)?void 0!==i.ready?i.ready(t):t(T):T.makeArray(t,this);if(!(n="<"===t[0]&&">"===t[t.length-1]&&3<=t.length?[null,t,null]:O.exec(t))||!n[1]&&e)return!e||e.jquery?(e||i).find(t):this.constructor(e).find(t);if(n[1]){if(e=e instanceof T?e[0]:e,T.merge(this,T.parseHTML(n[1],e&&e.nodeType?e.ownerDocument||e:S,!0)),E.test(n[1])&&T.isPlainObject(e))for(n in e)b(this[n])?this[n](e[n]):this.attr(n,e[n]);return this}return(o=S.getElementById(n[2]))&&(this[0]=o,this.length=1),this}).prototype=T.fn,P=T(S);var I=/^(?:parents|prev(?:Until|All))/,F={children:!0,contents:!0,next:!0,prev:!0};function M(t,e){for(;(t=t[e])&&1!==t.nodeType;);return t}T.fn.extend({has:function(t){var e=T(t,this),i=e.length;return this.filter(function(){for(var t=0;t<i;t++)if(T.contains(this,e[t]))return!0})},closest:function(t,e){var i,n=0,o=this.length,s=[],r="string"!=typeof t&&T(t);if(!$.test(t))for(;n<o;n++)for(i=this[n];i&&i!==e;i=i.parentNode)if(i.nodeType<11&&(r?-1<r.index(i):1===i.nodeType&&T.find.matchesSelector(i,t))){s.push(i);break}return this.pushStack(1<s.length?T.uniqueSort(s):s)},index:function(t){return t?"string"==typeof t?o.call(T(t),this[0]):o.call(this,t.jquery?t[0]:t):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(t,e){return this.pushStack(T.uniqueSort(T.merge(this.get(),T(t,e))))},addBack:function(t){return this.add(null==t?this.prevObject:this.prevObject.filter(t))}}),T.each({parent:function(t){var e=t.parentNode;return e&&11!==e.nodeType?e:null},parents:function(t){return C(t,"parentNode")},parentsUntil:function(t,e,i){return C(t,"parentNode",i)},next:function(t){return M(t,"nextSibling")},prev:function(t){return M(t,"previousSibling")},nextAll:function(t){return C(t,"nextSibling")},prevAll:function(t){return C(t,"previousSibling")},nextUntil:function(t,e,i){return C(t,"nextSibling",i)},prevUntil:function(t,e,i){return C(t,"previousSibling",i)},siblings:function(t){return k((t.parentNode||{}).firstChild,t)},children:function(t){return k(t.firstChild)},contents:function(t){return void 0!==t.contentDocument?t.contentDocument:(A(t,"template")&&(t=t.content||t),T.merge([],t.childNodes))}},function(n,o){T.fn[n]=function(t,e){var i=T.map(this,o,t);return"Until"!==n.slice(-5)&&(e=t),e&&"string"==typeof e&&(i=T.filter(e,i)),1<this.length&&(F[n]||T.uniqueSort(i),I.test(n)&&i.reverse()),this.pushStack(i)}});var N=/[^\x20\t\r\n\f]+/g;function R(t){return t}function L(t){throw t}function j(t,e,i,n){var o;try{t&&b(o=t.promise)?o.call(t).done(e).fail(i):t&&b(o=t.then)?o.call(t,e,i):e.apply(void 0,[t].slice(n))}catch(t){i.apply(void 0,[t])}}T.Callbacks=function(n){var t,i;n="string"==typeof n?(t=n,i={},T.each(t.match(N)||[],function(t,e){i[e]=!0}),i):T.extend({},n);function o(){for(a=a||n.once,r=s=!0;c.length;d=-1)for(e=c.shift();++d<l.length;)!1===l[d].apply(e[0],e[1])&&n.stopOnFalse&&(d=l.length,e=!1);n.memory||(e=!1),s=!1,a&&(l=e?[]:"")}var s,e,r,a,l=[],c=[],d=-1,u={add:function(){return l&&(e&&!s&&(d=l.length-1,c.push(e)),function i(t){T.each(t,function(t,e){b(e)?n.unique&&u.has(e)||l.push(e):e&&e.length&&"string"!==w(e)&&i(e)})}(arguments),e&&!s&&o()),this},remove:function(){return T.each(arguments,function(t,e){for(var i;-1<(i=T.inArray(e,l,i));)l.splice(i,1),i<=d&&d--}),this},has:function(t){return t?-1<T.inArray(t,l):0<l.length},empty:function(){return l=l&&[],this},disable:function(){return a=c=[],l=e="",this},disabled:function(){return!l},lock:function(){return a=c=[],e||s||(l=e=""),this},locked:function(){return!!a},fireWith:function(t,e){return a||(e=[t,(e=e||[]).slice?e.slice():e],c.push(e),s||o()),this},fire:function(){return u.fireWith(this,arguments),this},fired:function(){return!!r}};return u},T.extend({Deferred:function(t){var s=[["notify","progress",T.Callbacks("memory"),T.Callbacks("memory"),2],["resolve","done",T.Callbacks("once memory"),T.Callbacks("once memory"),0,"resolved"],["reject","fail",T.Callbacks("once memory"),T.Callbacks("once memory"),1,"rejected"]],o="pending",r={state:function(){return o},always:function(){return a.done(arguments).fail(arguments),this},catch:function(t){return r.then(null,t)},pipe:function(){var o=arguments;return T.Deferred(function(n){T.each(s,function(t,e){var i=b(o[e[4]])&&o[e[4]];a[e[1]](function(){var t=i&&i.apply(this,arguments);t&&b(t.promise)?t.promise().progress(n.notify).done(n.resolve).fail(n.reject):n[e[0]+"With"](this,i?[t]:arguments)})}),o=null}).promise()},then:function(e,i,n){var l=0;function c(o,s,r,a){return function(){function t(){var t,e;if(!(o<l)){if((t=r.apply(i,n))===s.promise())throw new TypeError("Thenable self-resolution");e=t&&("object"==typeof t||"function"==typeof t)&&t.then,b(e)?a?e.call(t,c(l,s,R,a),c(l,s,L,a)):(l++,e.call(t,c(l,s,R,a),c(l,s,L,a),c(l,s,R,s.notifyWith))):(r!==R&&(i=void 0,n=[t]),(a||s.resolveWith)(i,n))}}var i=this,n=arguments,e=a?t:function(){try{t()}catch(t){T.Deferred.exceptionHook&&T.Deferred.exceptionHook(t,e.stackTrace),l<=o+1&&(r!==L&&(i=void 0,n=[t]),s.rejectWith(i,n))}};o?e():(T.Deferred.getStackHook&&(e.stackTrace=T.Deferred.getStackHook()),_.setTimeout(e))}}return T.Deferred(function(t){s[0][3].add(c(0,t,b(n)?n:R,t.notifyWith)),s[1][3].add(c(0,t,b(e)?e:R)),s[2][3].add(c(0,t,b(i)?i:L))}).promise()},promise:function(t){return null!=t?T.extend(t,r):r}},a={};return T.each(s,function(t,e){var i=e[2],n=e[5];r[e[1]]=i.add,n&&i.add(function(){o=n},s[3-t][2].disable,s[3-t][3].disable,s[0][2].lock,s[0][3].lock),i.add(e[3].fire),a[e[0]]=function(){return a[e[0]+"With"](this===a?void 0:this,arguments),this},a[e[0]+"With"]=i.fireWith}),r.promise(a),t&&t.call(a,a),a},when:function(t){function e(e){return function(t){o[e]=this,s[e]=1<arguments.length?a.call(arguments):t,--i||r.resolveWith(o,s)}}var i=arguments.length,n=i,o=Array(n),s=a.call(arguments),r=T.Deferred();if(i<=1&&(j(t,r.done(e(n)).resolve,r.reject,!i),"pending"===r.state()||b(s[n]&&s[n].then)))return r.then();for(;n--;)j(s[n],e(n),r.reject);return r.promise()}});var B=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;T.Deferred.exceptionHook=function(t,e){_.console&&_.console.warn&&t&&B.test(t.name)&&_.console.warn("jQuery.Deferred exception: "+t.message,t.stack,e)},T.readyException=function(t){_.setTimeout(function(){throw t})};var H=T.Deferred();function q(){S.removeEventListener("DOMContentLoaded",q),_.removeEventListener("load",q),T.ready()}T.fn.ready=function(t){return H.then(t).catch(function(t){T.readyException(t)}),this},T.extend({isReady:!1,readyWait:1,ready:function(t){(!0===t?--T.readyWait:T.isReady)||(T.isReady=!0)!==t&&0<--T.readyWait||H.resolveWith(S,[T])}}),T.ready.then=H.then,"complete"===S.readyState||"loading"!==S.readyState&&!S.documentElement.doScroll?_.setTimeout(T.ready):(S.addEventListener("DOMContentLoaded",q),_.addEventListener("load",q));var z=function(t,e,i,n,o,s,r){var a=0,l=t.length,c=null==i;if("object"===w(i))for(a in o=!0,i)z(t,e,a,i[a],!0,s,r);else if(void 0!==n&&(o=!0,b(n)||(r=!0),c&&(e=r?(e.call(t,n),null):(c=e,function(t,e,i){return c.call(T(t),i)})),e))for(;a<l;a++)e(t[a],i,r?n:n.call(t[a],a,e(t[a],i)));return o?t:c?e.call(t):l?e(t[0],i):s},W=/^-ms-/,U=/-([a-z])/g;function X(t,e){return e.toUpperCase()}function V(t){return t.replace(W,"ms-").replace(U,X)}function Y(t){return 1===t.nodeType||9===t.nodeType||!+t.nodeType}function G(){this.expando=T.expando+G.uid++}G.uid=1,G.prototype={cache:function(t){var e=t[this.expando];return e||(e={},Y(t)&&(t.nodeType?t[this.expando]=e:Object.defineProperty(t,this.expando,{value:e,configurable:!0}))),e},set:function(t,e,i){var n,o=this.cache(t);if("string"==typeof e)o[V(e)]=i;else for(n in e)o[V(n)]=e[n];return o},get:function(t,e){return void 0===e?this.cache(t):t[this.expando]&&t[this.expando][V(e)]},access:function(t,e,i){return void 0===e||e&&"string"==typeof e&&void 0===i?this.get(t,e):(this.set(t,e,i),void 0!==i?i:e)},remove:function(t,e){var i,n=t[this.expando];if(void 0!==n){if(void 0!==e){i=(e=Array.isArray(e)?e.map(V):(e=V(e))in n?[e]:e.match(N)||[]).length;for(;i--;)delete n[e[i]]}void 0!==e&&!T.isEmptyObject(n)||(t.nodeType?t[this.expando]=void 0:delete t[this.expando])}},hasData:function(t){var e=t[this.expando];return void 0!==e&&!T.isEmptyObject(e)}};var K=new G,Q=new G,Z=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,J=/[A-Z]/g;function tt(t,e,i){var n,o;if(void 0===i&&1===t.nodeType)if(n="data-"+e.replace(J,"-$&").toLowerCase(),"string"==typeof(i=t.getAttribute(n))){try{i="true"===(o=i)||"false"!==o&&("null"===o?null:o===+o+""?+o:Z.test(o)?JSON.parse(o):o)}catch(t){}Q.set(t,e,i)}else i=void 0;return i}T.extend({hasData:function(t){return Q.hasData(t)||K.hasData(t)},data:function(t,e,i){return Q.access(t,e,i)},removeData:function(t,e){Q.remove(t,e)},_data:function(t,e,i){return K.access(t,e,i)},_removeData:function(t,e){K.remove(t,e)}}),T.fn.extend({data:function(i,t){var e,n,o,s=this[0],r=s&&s.attributes;if(void 0!==i)return"object"==typeof i?this.each(function(){Q.set(this,i)}):z(this,function(t){var e;if(s&&void 0===t)return void 0!==(e=Q.get(s,i))||void 0!==(e=tt(s,i))?e:void 0;this.each(function(){Q.set(this,i,t)})},null,t,1<arguments.length,null,!0);if(this.length&&(o=Q.get(s),1===s.nodeType&&!K.get(s,"hasDataAttrs"))){for(e=r.length;e--;)r[e]&&0===(n=r[e].name).indexOf("data-")&&(n=V(n.slice(5)),tt(s,n,o[n]));K.set(s,"hasDataAttrs",!0)}return o},removeData:function(t){return this.each(function(){Q.remove(this,t)})}}),T.extend({queue:function(t,e,i){var n;if(t)return e=(e||"fx")+"queue",n=K.get(t,e),i&&(!n||Array.isArray(i)?n=K.access(t,e,T.makeArray(i)):n.push(i)),n||[]},dequeue:function(t,e){e=e||"fx";var i=T.queue(t,e),n=i.length,o=i.shift(),s=T._queueHooks(t,e);"inprogress"===o&&(o=i.shift(),n--),o&&("fx"===e&&i.unshift("inprogress"),delete s.stop,o.call(t,function(){T.dequeue(t,e)},s)),!n&&s&&s.empty.fire()},_queueHooks:function(t,e){var i=e+"queueHooks";return K.get(t,i)||K.access(t,i,{empty:T.Callbacks("once memory").add(function(){K.remove(t,[e+"queue",i])})})}}),T.fn.extend({queue:function(e,i){var t=2;return"string"!=typeof e&&(i=e,e="fx",t--),arguments.length<t?T.queue(this[0],e):void 0===i?this:this.each(function(){var t=T.queue(this,e,i);T._queueHooks(this,e),"fx"===e&&"inprogress"!==t[0]&&T.dequeue(this,e)})},dequeue:function(t){return this.each(function(){T.dequeue(this,t)})},clearQueue:function(t){return this.queue(t||"fx",[])},promise:function(t,e){function i(){--o||s.resolveWith(r,[r])}var n,o=1,s=T.Deferred(),r=this,a=this.length;for("string"!=typeof t&&(e=t,t=void 0),t=t||"fx";a--;)(n=K.get(r[a],t+"queueHooks"))&&n.empty&&(o++,n.empty.add(i));return i(),s.promise(e)}});var et=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,it=new RegExp("^(?:([+-])=|)("+et+")([a-z%]*)$","i"),nt=["Top","Right","Bottom","Left"],ot=S.documentElement,st=function(t){return T.contains(t.ownerDocument,t)},rt={composed:!0};ot.getRootNode&&(st=function(t){return T.contains(t.ownerDocument,t)||t.getRootNode(rt)===t.ownerDocument});function at(t,e,i,n){var o,s,r={};for(s in e)r[s]=t.style[s],t.style[s]=e[s];for(s in o=i.apply(t,n||[]),e)t.style[s]=r[s];return o}var lt=function(t,e){return"none"===(t=e||t).style.display||""===t.style.display&&st(t)&&"none"===T.css(t,"display")};function ct(t,e,i,n){var o,s,r=20,a=n?function(){return n.cur()}:function(){return T.css(t,e,"")},l=a(),c=i&&i[3]||(T.cssNumber[e]?"":"px"),d=t.nodeType&&(T.cssNumber[e]||"px"!==c&&+l)&&it.exec(T.css(t,e));if(d&&d[3]!==c){for(l/=2,c=c||d[3],d=+l||1;r--;)T.style(t,e,d+c),(1-s)*(1-(s=a()/l||.5))<=0&&(r=0),d/=s;d*=2,T.style(t,e,d+c),i=i||[]}return i&&(d=+d||+l||0,o=i[1]?d+(i[1]+1)*i[2]:+i[2],n&&(n.unit=c,n.start=d,n.end=o)),o}var dt={};function ut(t,e){for(var i,n,o,s,r,a,l,c=[],d=0,u=t.length;d<u;d++)(n=t[d]).style&&(i=n.style.display,e?("none"===i&&(c[d]=K.get(n,"display")||null,c[d]||(n.style.display="")),""===n.style.display&&lt(n)&&(c[d]=(l=r=s=void 0,r=(o=n).ownerDocument,a=o.nodeName,(l=dt[a])||(s=r.body.appendChild(r.createElement(a)),l=T.css(s,"display"),s.parentNode.removeChild(s),"none"===l&&(l="block"),dt[a]=l)))):"none"!==i&&(c[d]="none",K.set(n,"display",i)));for(d=0;d<u;d++)null!=c[d]&&(t[d].style.display=c[d]);return t}T.fn.extend({show:function(){return ut(this,!0)},hide:function(){return ut(this)},toggle:function(t){return"boolean"==typeof t?t?this.show():this.hide():this.each(function(){lt(this)?T(this).show():T(this).hide()})}});var ht=/^(?:checkbox|radio)$/i,pt=/<([a-z][^\/\0>\x20\t\r\n\f]*)/i,ft=/^$|^module$|\/(?:java|ecma)script/i,gt={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};function mt(t,e){var i;return i=void 0!==t.getElementsByTagName?t.getElementsByTagName(e||"*"):void 0!==t.querySelectorAll?t.querySelectorAll(e||"*"):[],void 0===e||e&&A(t,e)?T.merge([t],i):i}function yt(t,e){for(var i=0,n=t.length;i<n;i++)K.set(t[i],"globalEval",!e||K.get(e[i],"globalEval"))}gt.optgroup=gt.option,gt.tbody=gt.tfoot=gt.colgroup=gt.caption=gt.thead,gt.th=gt.td;var vt,bt,xt=/<|&#?\w+;/;function wt(t,e,i,n,o){for(var s,r,a,l,c,d,u=e.createDocumentFragment(),h=[],p=0,f=t.length;p<f;p++)if((s=t[p])||0===s)if("object"===w(s))T.merge(h,s.nodeType?[s]:s);else if(xt.test(s)){for(r=r||u.appendChild(e.createElement("div")),a=(pt.exec(s)||["",""])[1].toLowerCase(),l=gt[a]||gt._default,r.innerHTML=l[1]+T.htmlPrefilter(s)+l[2],d=l[0];d--;)r=r.lastChild;T.merge(h,r.childNodes),(r=u.firstChild).textContent=""}else h.push(e.createTextNode(s));for(u.textContent="",p=0;s=h[p++];)if(n&&-1<T.inArray(s,n))o&&o.push(s);else if(c=st(s),r=mt(u.appendChild(s),"script"),c&&yt(r),i)for(d=0;s=r[d++];)ft.test(s.type||"")&&i.push(s);return u}vt=S.createDocumentFragment().appendChild(S.createElement("div")),(bt=S.createElement("input")).setAttribute("type","radio"),bt.setAttribute("checked","checked"),bt.setAttribute("name","t"),vt.appendChild(bt),v.checkClone=vt.cloneNode(!0).cloneNode(!0).lastChild.checked,vt.innerHTML="<textarea>x</textarea>",v.noCloneChecked=!!vt.cloneNode(!0).lastChild.defaultValue;var Ct=/^key/,_t=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,St=/^([^.]*)(?:\.(.+)|)/;function Tt(){return!0}function kt(){return!1}function $t(t,e){return t===function(){try{return S.activeElement}catch(t){}}()==("focus"===e)}function At(t,e,i,n,o,s){var r,a;if("object"==typeof e){for(a in"string"!=typeof i&&(n=n||i,i=void 0),e)At(t,a,i,n,e[a],s);return t}if(null==n&&null==o?(o=i,n=i=void 0):null==o&&("string"==typeof i?(o=n,n=void 0):(o=n,n=i,i=void 0)),!1===o)o=kt;else if(!o)return t;return 1===s&&(r=o,(o=function(t){return T().off(t),r.apply(this,arguments)}).guid=r.guid||(r.guid=T.guid++)),t.each(function(){T.event.add(this,e,o,n,i)})}function Et(t,o,s){s?(K.set(t,o,!1),T.event.add(t,o,{namespace:!1,handler:function(t){var e,i,n=K.get(this,o);if(1&t.isTrigger&&this[o]){if(n.length)(T.event.special[o]||{}).delegateType&&t.stopPropagation();else if(n=a.call(arguments),K.set(this,o,n),e=s(this,o),this[o](),n!==(i=K.get(this,o))||e?K.set(this,o,!1):i={},n!==i)return t.stopImmediatePropagation(),t.preventDefault(),i.value}else n.length&&(K.set(this,o,{value:T.event.trigger(T.extend(n[0],T.Event.prototype),n.slice(1),this)}),t.stopImmediatePropagation())}})):void 0===K.get(t,o)&&T.event.add(t,o,Tt)}T.event={global:{},add:function(e,t,i,n,o){var s,r,a,l,c,d,u,h,p,f,g,m=K.get(e);if(m)for(i.handler&&(i=(s=i).handler,o=s.selector),o&&T.find.matchesSelector(ot,o),i.guid||(i.guid=T.guid++),(l=m.events)||(l=m.events={}),(r=m.handle)||(r=m.handle=function(t){return void 0!==T&&T.event.triggered!==t.type?T.event.dispatch.apply(e,arguments):void 0}),c=(t=(t||"").match(N)||[""]).length;c--;)p=g=(a=St.exec(t[c])||[])[1],f=(a[2]||"").split(".").sort(),p&&(u=T.event.special[p]||{},p=(o?u.delegateType:u.bindType)||p,u=T.event.special[p]||{},d=T.extend({type:p,origType:g,data:n,handler:i,guid:i.guid,selector:o,needsContext:o&&T.expr.match.needsContext.test(o),namespace:f.join(".")},s),(h=l[p])||((h=l[p]=[]).delegateCount=0,u.setup&&!1!==u.setup.call(e,n,f,r)||e.addEventListener&&e.addEventListener(p,r)),u.add&&(u.add.call(e,d),d.handler.guid||(d.handler.guid=i.guid)),o?h.splice(h.delegateCount++,0,d):h.push(d),T.event.global[p]=!0)},remove:function(t,e,i,n,o){var s,r,a,l,c,d,u,h,p,f,g,m=K.hasData(t)&&K.get(t);if(m&&(l=m.events)){for(c=(e=(e||"").match(N)||[""]).length;c--;)if(p=g=(a=St.exec(e[c])||[])[1],f=(a[2]||"").split(".").sort(),p){for(u=T.event.special[p]||{},h=l[p=(n?u.delegateType:u.bindType)||p]||[],a=a[2]&&new RegExp("(^|\\.)"+f.join("\\.(?:.*\\.|)")+"(\\.|$)"),r=s=h.length;s--;)d=h[s],!o&&g!==d.origType||i&&i.guid!==d.guid||a&&!a.test(d.namespace)||n&&n!==d.selector&&("**"!==n||!d.selector)||(h.splice(s,1),d.selector&&h.delegateCount--,u.remove&&u.remove.call(t,d));r&&!h.length&&(u.teardown&&!1!==u.teardown.call(t,f,m.handle)||T.removeEvent(t,p,m.handle),delete l[p])}else for(p in l)T.event.remove(t,p+e[c],i,n,!0);T.isEmptyObject(l)&&K.remove(t,"handle events")}},dispatch:function(t){var e,i,n,o,s,r,a=T.event.fix(t),l=new Array(arguments.length),c=(K.get(this,"events")||{})[a.type]||[],d=T.event.special[a.type]||{};for(l[0]=a,e=1;e<arguments.length;e++)l[e]=arguments[e];if(a.delegateTarget=this,!d.preDispatch||!1!==d.preDispatch.call(this,a)){for(r=T.event.handlers.call(this,a,c),e=0;(o=r[e++])&&!a.isPropagationStopped();)for(a.currentTarget=o.elem,i=0;(s=o.handlers[i++])&&!a.isImmediatePropagationStopped();)a.rnamespace&&!1!==s.namespace&&!a.rnamespace.test(s.namespace)||(a.handleObj=s,a.data=s.data,void 0!==(n=((T.event.special[s.origType]||{}).handle||s.handler).apply(o.elem,l))&&!1===(a.result=n)&&(a.preventDefault(),a.stopPropagation()));return d.postDispatch&&d.postDispatch.call(this,a),a.result}},handlers:function(t,e){var i,n,o,s,r,a=[],l=e.delegateCount,c=t.target;if(l&&c.nodeType&&!("click"===t.type&&1<=t.button))for(;c!==this;c=c.parentNode||this)if(1===c.nodeType&&("click"!==t.type||!0!==c.disabled)){for(s=[],r={},i=0;i<l;i++)void 0===r[o=(n=e[i]).selector+" "]&&(r[o]=n.needsContext?-1<T(o,this).index(c):T.find(o,this,null,[c]).length),r[o]&&s.push(n);s.length&&a.push({elem:c,handlers:s})}return c=this,l<e.length&&a.push({elem:c,handlers:e.slice(l)}),a},addProp:function(e,t){Object.defineProperty(T.Event.prototype,e,{enumerable:!0,configurable:!0,get:b(t)?function(){if(this.originalEvent)return t(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[e]},set:function(t){Object.defineProperty(this,e,{enumerable:!0,configurable:!0,writable:!0,value:t})}})},fix:function(t){return t[T.expando]?t:new T.Event(t)},special:{load:{noBubble:!0},click:{setup:function(t){var e=this||t;return ht.test(e.type)&&e.click&&A(e,"input")&&Et(e,"click",Tt),!1},trigger:function(t){var e=this||t;return ht.test(e.type)&&e.click&&A(e,"input")&&Et(e,"click"),!0},_default:function(t){var e=t.target;return ht.test(e.type)&&e.click&&A(e,"input")&&K.get(e,"click")||A(e,"a")}},beforeunload:{postDispatch:function(t){void 0!==t.result&&t.originalEvent&&(t.originalEvent.returnValue=t.result)}}}},T.removeEvent=function(t,e,i){t.removeEventListener&&t.removeEventListener(e,i)},T.Event=function(t,e){if(!(this instanceof T.Event))return new T.Event(t,e);t&&t.type?(this.originalEvent=t,this.type=t.type,this.isDefaultPrevented=t.defaultPrevented||void 0===t.defaultPrevented&&!1===t.returnValue?Tt:kt,this.target=t.target&&3===t.target.nodeType?t.target.parentNode:t.target,this.currentTarget=t.currentTarget,this.relatedTarget=t.relatedTarget):this.type=t,e&&T.extend(this,e),this.timeStamp=t&&t.timeStamp||Date.now(),this[T.expando]=!0},T.Event.prototype={constructor:T.Event,isDefaultPrevented:kt,isPropagationStopped:kt,isImmediatePropagationStopped:kt,isSimulated:!1,preventDefault:function(){var t=this.originalEvent;this.isDefaultPrevented=Tt,t&&!this.isSimulated&&t.preventDefault()},stopPropagation:function(){var t=this.originalEvent;this.isPropagationStopped=Tt,t&&!this.isSimulated&&t.stopPropagation()},stopImmediatePropagation:function(){var t=this.originalEvent;this.isImmediatePropagationStopped=Tt,t&&!this.isSimulated&&t.stopImmediatePropagation(),this.stopPropagation()}},T.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,code:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:function(t){var e=t.button;return null==t.which&&Ct.test(t.type)?null!=t.charCode?t.charCode:t.keyCode:!t.which&&void 0!==e&&_t.test(t.type)?1&e?1:2&e?3:4&e?2:0:t.which}},T.event.addProp),T.each({focus:"focusin",blur:"focusout"},function(t,e){T.event.special[t]={setup:function(){return Et(this,t,$t),!1},trigger:function(){return Et(this,t),!0},delegateType:e}}),T.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(t,o){T.event.special[t]={delegateType:o,bindType:o,handle:function(t){var e,i=t.relatedTarget,n=t.handleObj;return i&&(i===this||T.contains(this,i))||(t.type=n.origType,e=n.handler.apply(this,arguments),t.type=o),e}}}),T.fn.extend({on:function(t,e,i,n){return At(this,t,e,i,n)},one:function(t,e,i,n){return At(this,t,e,i,n,1)},off:function(t,e,i){var n,o;if(t&&t.preventDefault&&t.handleObj)return n=t.handleObj,T(t.delegateTarget).off(n.namespace?n.origType+"."+n.namespace:n.origType,n.selector,n.handler),this;if("object"!=typeof t)return!1!==e&&"function"!=typeof e||(i=e,e=void 0),!1===i&&(i=kt),this.each(function(){T.event.remove(this,t,i,e)});for(o in t)this.off(o,e,t[o]);return this}});var Dt=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,Pt=/<script|<style|<link/i,Ot=/checked\s*(?:[^=]|=\s*.checked.)/i,It=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;function Ft(t,e){return A(t,"table")&&A(11!==e.nodeType?e:e.firstChild,"tr")&&T(t).children("tbody")[0]||t}function Mt(t){return t.type=(null!==t.getAttribute("type"))+"/"+t.type,t}function Nt(t){return"true/"===(t.type||"").slice(0,5)?t.type=t.type.slice(5):t.removeAttribute("type"),t}function Rt(t,e){var i,n,o,s,r,a,l,c;if(1===e.nodeType){if(K.hasData(t)&&(s=K.access(t),r=K.set(e,s),c=s.events))for(o in delete r.handle,r.events={},c)for(i=0,n=c[o].length;i<n;i++)T.event.add(e,o,c[o][i]);Q.hasData(t)&&(a=Q.access(t),l=T.extend({},a),Q.set(e,l))}}function Lt(i,n,o,s){n=m.apply([],n);var t,e,r,a,l,c,d=0,u=i.length,h=u-1,p=n[0],f=b(p);if(f||1<u&&"string"==typeof p&&!v.checkClone&&Ot.test(p))return i.each(function(t){var e=i.eq(t);f&&(n[0]=p.call(this,t,e.html())),Lt(e,n,o,s)});if(u&&(e=(t=wt(n,i[0].ownerDocument,!1,i,s)).firstChild,1===t.childNodes.length&&(t=e),e||s)){for(a=(r=T.map(mt(t,"script"),Mt)).length;d<u;d++)l=t,d!==h&&(l=T.clone(l,!0,!0),a&&T.merge(r,mt(l,"script"))),o.call(i[d],l,d);if(a)for(c=r[r.length-1].ownerDocument,T.map(r,Nt),d=0;d<a;d++)l=r[d],ft.test(l.type||"")&&!K.access(l,"globalEval")&&T.contains(c,l)&&(l.src&&"module"!==(l.type||"").toLowerCase()?T._evalUrl&&!l.noModule&&T._evalUrl(l.src,{nonce:l.nonce||l.getAttribute("nonce")}):x(l.textContent.replace(It,""),l,c))}return i}function jt(t,e,i){for(var n,o=e?T.filter(e,t):t,s=0;null!=(n=o[s]);s++)i||1!==n.nodeType||T.cleanData(mt(n)),n.parentNode&&(i&&st(n)&&yt(mt(n,"script")),n.parentNode.removeChild(n));return t}T.extend({htmlPrefilter:function(t){return t.replace(Dt,"<$1></$2>")},clone:function(t,e,i){var n,o,s,r,a,l,c,d=t.cloneNode(!0),u=st(t);if(!(v.noCloneChecked||1!==t.nodeType&&11!==t.nodeType||T.isXMLDoc(t)))for(r=mt(d),n=0,o=(s=mt(t)).length;n<o;n++)a=s[n],l=r[n],"input"===(c=l.nodeName.toLowerCase())&&ht.test(a.type)?l.checked=a.checked:"input"!==c&&"textarea"!==c||(l.defaultValue=a.defaultValue);if(e)if(i)for(s=s||mt(t),r=r||mt(d),n=0,o=s.length;n<o;n++)Rt(s[n],r[n]);else Rt(t,d);return 0<(r=mt(d,"script")).length&&yt(r,!u&&mt(t,"script")),d},cleanData:function(t){for(var e,i,n,o=T.event.special,s=0;void 0!==(i=t[s]);s++)if(Y(i)){if(e=i[K.expando]){if(e.events)for(n in e.events)o[n]?T.event.remove(i,n):T.removeEvent(i,n,e.handle);i[K.expando]=void 0}i[Q.expando]&&(i[Q.expando]=void 0)}}}),T.fn.extend({detach:function(t){return jt(this,t,!0)},remove:function(t){return jt(this,t)},text:function(t){return z(this,function(t){return void 0===t?T.text(this):this.empty().each(function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=t)})},null,t,arguments.length)},append:function(){return Lt(this,arguments,function(t){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||Ft(this,t).appendChild(t)})},prepend:function(){return Lt(this,arguments,function(t){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var e=Ft(this,t);e.insertBefore(t,e.firstChild)}})},before:function(){return Lt(this,arguments,function(t){this.parentNode&&this.parentNode.insertBefore(t,this)})},after:function(){return Lt(this,arguments,function(t){this.parentNode&&this.parentNode.insertBefore(t,this.nextSibling)})},empty:function(){for(var t,e=0;null!=(t=this[e]);e++)1===t.nodeType&&(T.cleanData(mt(t,!1)),t.textContent="");return this},clone:function(t,e){return t=null!=t&&t,e=null==e?t:e,this.map(function(){return T.clone(this,t,e)})},html:function(t){return z(this,function(t){var e=this[0]||{},i=0,n=this.length;if(void 0===t&&1===e.nodeType)return e.innerHTML;if("string"==typeof t&&!Pt.test(t)&&!gt[(pt.exec(t)||["",""])[1].toLowerCase()]){t=T.htmlPrefilter(t);try{for(;i<n;i++)1===(e=this[i]||{}).nodeType&&(T.cleanData(mt(e,!1)),e.innerHTML=t);e=0}catch(t){}}e&&this.empty().append(t)},null,t,arguments.length)},replaceWith:function(){var i=[];return Lt(this,arguments,function(t){var e=this.parentNode;T.inArray(this,i)<0&&(T.cleanData(mt(this)),e&&e.replaceChild(t,this))},i)}}),T.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(t,r){T.fn[t]=function(t){for(var e,i=[],n=T(t),o=n.length-1,s=0;s<=o;s++)e=s===o?this:this.clone(!0),T(n[s])[r](e),l.apply(i,e.get());return this.pushStack(i)}});var Bt,Ht,qt,zt,Wt,Ut,Xt,Vt=new RegExp("^("+et+")(?!px)[a-z%]+$","i"),Yt=function(t){var e=t.ownerDocument.defaultView;return e&&e.opener||(e=_),e.getComputedStyle(t)},Gt=new RegExp(nt.join("|"),"i");function Kt(){if(Xt){Ut.style.cssText="position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0",Xt.style.cssText="position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%",ot.appendChild(Ut).appendChild(Xt);var t=_.getComputedStyle(Xt);Bt="1%"!==t.top,Wt=12===Qt(t.marginLeft),Xt.style.right="60%",zt=36===Qt(t.right),Ht=36===Qt(t.width),Xt.style.position="absolute",qt=12===Qt(Xt.offsetWidth/3),ot.removeChild(Ut),Xt=null}}function Qt(t){return Math.round(parseFloat(t))}function Zt(t,e,i){var n,o,s,r,a=t.style;return(i=i||Yt(t))&&(""!==(r=i.getPropertyValue(e)||i[e])||st(t)||(r=T.style(t,e)),!v.pixelBoxStyles()&&Vt.test(r)&&Gt.test(e)&&(n=a.width,o=a.minWidth,s=a.maxWidth,a.minWidth=a.maxWidth=a.width=r,r=i.width,a.width=n,a.minWidth=o,a.maxWidth=s)),void 0!==r?r+"":r}function Jt(t,e){return{get:function(){if(!t())return(this.get=e).apply(this,arguments);delete this.get}}}Ut=S.createElement("div"),(Xt=S.createElement("div")).style&&(Xt.style.backgroundClip="content-box",Xt.cloneNode(!0).style.backgroundClip="",v.clearCloneStyle="content-box"===Xt.style.backgroundClip,T.extend(v,{boxSizingReliable:function(){return Kt(),Ht},pixelBoxStyles:function(){return Kt(),zt},pixelPosition:function(){return Kt(),Bt},reliableMarginLeft:function(){return Kt(),Wt},scrollboxSize:function(){return Kt(),qt}}));var te=["Webkit","Moz","ms"],ee=S.createElement("div").style,ie={};function ne(t){var e=T.cssProps[t]||ie[t];return e||(t in ee?t:ie[t]=function(t){for(var e=t[0].toUpperCase()+t.slice(1),i=te.length;i--;)if((t=te[i]+e)in ee)return t}(t)||t)}var oe=/^(none|table(?!-c[ea]).+)/,se=/^--/,re={position:"absolute",visibility:"hidden",display:"block"},ae={letterSpacing:"0",fontWeight:"400"};function le(t,e,i){var n=it.exec(e);return n?Math.max(0,n[2]-(i||0))+(n[3]||"px"):e}function ce(t,e,i,n,o,s){var r="width"===e?1:0,a=0,l=0;if(i===(n?"border":"content"))return 0;for(;r<4;r+=2)"margin"===i&&(l+=T.css(t,i+nt[r],!0,o)),n?("content"===i&&(l-=T.css(t,"padding"+nt[r],!0,o)),"margin"!==i&&(l-=T.css(t,"border"+nt[r]+"Width",!0,o))):(l+=T.css(t,"padding"+nt[r],!0,o),"padding"!==i?l+=T.css(t,"border"+nt[r]+"Width",!0,o):a+=T.css(t,"border"+nt[r]+"Width",!0,o));return!n&&0<=s&&(l+=Math.max(0,Math.ceil(t["offset"+e[0].toUpperCase()+e.slice(1)]-s-l-a-.5))||0),l}function de(t,e,i){var n=Yt(t),o=(!v.boxSizingReliable()||i)&&"border-box"===T.css(t,"boxSizing",!1,n),s=o,r=Zt(t,e,n),a="offset"+e[0].toUpperCase()+e.slice(1);if(Vt.test(r)){if(!i)return r;r="auto"}return(!v.boxSizingReliable()&&o||"auto"===r||!parseFloat(r)&&"inline"===T.css(t,"display",!1,n))&&t.getClientRects().length&&(o="border-box"===T.css(t,"boxSizing",!1,n),(s=a in t)&&(r=t[a])),(r=parseFloat(r)||0)+ce(t,e,i||(o?"border":"content"),s,n,r)+"px"}function ue(t,e,i,n,o){return new ue.prototype.init(t,e,i,n,o)}T.extend({cssHooks:{opacity:{get:function(t,e){if(e){var i=Zt(t,"opacity");return""===i?"1":i}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,gridArea:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnStart:!0,gridRow:!0,gridRowEnd:!0,gridRowStart:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{},style:function(t,e,i,n){if(t&&3!==t.nodeType&&8!==t.nodeType&&t.style){var o,s,r,a=V(e),l=se.test(e),c=t.style;if(l||(e=ne(a)),r=T.cssHooks[e]||T.cssHooks[a],void 0===i)return r&&"get"in r&&void 0!==(o=r.get(t,!1,n))?o:c[e];"string"===(s=typeof i)&&(o=it.exec(i))&&o[1]&&(i=ct(t,e,o),s="number"),null!=i&&i==i&&("number"!==s||l||(i+=o&&o[3]||(T.cssNumber[a]?"":"px")),v.clearCloneStyle||""!==i||0!==e.indexOf("background")||(c[e]="inherit"),r&&"set"in r&&void 0===(i=r.set(t,i,n))||(l?c.setProperty(e,i):c[e]=i))}},css:function(t,e,i,n){var o,s,r,a=V(e);return se.test(e)||(e=ne(a)),(r=T.cssHooks[e]||T.cssHooks[a])&&"get"in r&&(o=r.get(t,!0,i)),void 0===o&&(o=Zt(t,e,n)),"normal"===o&&e in ae&&(o=ae[e]),""===i||i?(s=parseFloat(o),!0===i||isFinite(s)?s||0:o):o}}),T.each(["height","width"],function(t,l){T.cssHooks[l]={get:function(t,e,i){if(e)return!oe.test(T.css(t,"display"))||t.getClientRects().length&&t.getBoundingClientRect().width?de(t,l,i):at(t,re,function(){return de(t,l,i)})},set:function(t,e,i){var n,o=Yt(t),s=!v.scrollboxSize()&&"absolute"===o.position,r=(s||i)&&"border-box"===T.css(t,"boxSizing",!1,o),a=i?ce(t,l,i,r,o):0;return r&&s&&(a-=Math.ceil(t["offset"+l[0].toUpperCase()+l.slice(1)]-parseFloat(o[l])-ce(t,l,"border",!1,o)-.5)),a&&(n=it.exec(e))&&"px"!==(n[3]||"px")&&(t.style[l]=e,e=T.css(t,l)),le(0,e,a)}}}),T.cssHooks.marginLeft=Jt(v.reliableMarginLeft,function(t,e){if(e)return(parseFloat(Zt(t,"marginLeft"))||t.getBoundingClientRect().left-at(t,{marginLeft:0},function(){return t.getBoundingClientRect().left}))+"px"}),T.each({margin:"",padding:"",border:"Width"},function(o,s){T.cssHooks[o+s]={expand:function(t){for(var e=0,i={},n="string"==typeof t?t.split(" "):[t];e<4;e++)i[o+nt[e]+s]=n[e]||n[e-2]||n[0];return i}},"margin"!==o&&(T.cssHooks[o+s].set=le)}),T.fn.extend({css:function(t,e){return z(this,function(t,e,i){var n,o,s={},r=0;if(Array.isArray(e)){for(n=Yt(t),o=e.length;r<o;r++)s[e[r]]=T.css(t,e[r],!1,n);return s}return void 0!==i?T.style(t,e,i):T.css(t,e)},t,e,1<arguments.length)}}),((T.Tween=ue).prototype={constructor:ue,init:function(t,e,i,n,o,s){this.elem=t,this.prop=i,this.easing=o||T.easing._default,this.options=e,this.start=this.now=this.cur(),this.end=n,this.unit=s||(T.cssNumber[i]?"":"px")},cur:function(){var t=ue.propHooks[this.prop];return t&&t.get?t.get(this):ue.propHooks._default.get(this)},run:function(t){var e,i=ue.propHooks[this.prop];return this.options.duration?this.pos=e=T.easing[this.easing](t,this.options.duration*t,0,1,this.options.duration):this.pos=e=t,this.now=(this.end-this.start)*e+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),i&&i.set?i.set(this):ue.propHooks._default.set(this),this}}).init.prototype=ue.prototype,(ue.propHooks={_default:{get:function(t){var e;return 1!==t.elem.nodeType||null!=t.elem[t.prop]&&null==t.elem.style[t.prop]?t.elem[t.prop]:(e=T.css(t.elem,t.prop,""))&&"auto"!==e?e:0},set:function(t){T.fx.step[t.prop]?T.fx.step[t.prop](t):1!==t.elem.nodeType||!T.cssHooks[t.prop]&&null==t.elem.style[ne(t.prop)]?t.elem[t.prop]=t.now:T.style(t.elem,t.prop,t.now+t.unit)}}}).scrollTop=ue.propHooks.scrollLeft={set:function(t){t.elem.nodeType&&t.elem.parentNode&&(t.elem[t.prop]=t.now)}},T.easing={linear:function(t){return t},swing:function(t){return.5-Math.cos(t*Math.PI)/2},_default:"swing"},T.fx=ue.prototype.init,T.fx.step={};var he,pe,fe,ge,me=/^(?:toggle|show|hide)$/,ye=/queueHooks$/;function ve(){pe&&(!1===S.hidden&&_.requestAnimationFrame?_.requestAnimationFrame(ve):_.setTimeout(ve,T.fx.interval),T.fx.tick())}function be(){return _.setTimeout(function(){he=void 0}),he=Date.now()}function xe(t,e){var i,n=0,o={height:t};for(e=e?1:0;n<4;n+=2-e)o["margin"+(i=nt[n])]=o["padding"+i]=t;return e&&(o.opacity=o.width=t),o}function we(t,e,i){for(var n,o=(Ce.tweeners[e]||[]).concat(Ce.tweeners["*"]),s=0,r=o.length;s<r;s++)if(n=o[s].call(i,e,t))return n}function Ce(s,t,e){var i,r,n=0,o=Ce.prefilters.length,a=T.Deferred().always(function(){delete l.elem}),l=function(){if(r)return!1;for(var t=he||be(),e=Math.max(0,c.startTime+c.duration-t),i=1-(e/c.duration||0),n=0,o=c.tweens.length;n<o;n++)c.tweens[n].run(i);return a.notifyWith(s,[c,i,e]),i<1&&o?e:(o||a.notifyWith(s,[c,1,0]),a.resolveWith(s,[c]),!1)},c=a.promise({elem:s,props:T.extend({},t),opts:T.extend(!0,{specialEasing:{},easing:T.easing._default},e),originalProperties:t,originalOptions:e,startTime:he||be(),duration:e.duration,tweens:[],createTween:function(t,e){var i=T.Tween(s,c.opts,t,e,c.opts.specialEasing[t]||c.opts.easing);return c.tweens.push(i),i},stop:function(t){var e=0,i=t?c.tweens.length:0;if(r)return this;for(r=!0;e<i;e++)c.tweens[e].run(1);return t?(a.notifyWith(s,[c,1,0]),a.resolveWith(s,[c,t])):a.rejectWith(s,[c,t]),this}}),d=c.props;for(!function(t,e){var i,n,o,s,r;for(i in t)if(o=e[n=V(i)],s=t[i],Array.isArray(s)&&(o=s[1],s=t[i]=s[0]),i!==n&&(t[n]=s,delete t[i]),(r=T.cssHooks[n])&&"expand"in r)for(i in s=r.expand(s),delete t[n],s)i in t||(t[i]=s[i],e[i]=o);else e[n]=o}(d,c.opts.specialEasing);n<o;n++)if(i=Ce.prefilters[n].call(c,s,d,c.opts))return b(i.stop)&&(T._queueHooks(c.elem,c.opts.queue).stop=i.stop.bind(i)),i;return T.map(d,we,c),b(c.opts.start)&&c.opts.start.call(s,c),c.progress(c.opts.progress).done(c.opts.done,c.opts.complete).fail(c.opts.fail).always(c.opts.always),T.fx.timer(T.extend(l,{elem:s,anim:c,queue:c.opts.queue})),c}T.Animation=T.extend(Ce,{tweeners:{"*":[function(t,e){var i=this.createTween(t,e);return ct(i.elem,t,it.exec(e),i),i}]},tweener:function(t,e){for(var i,n=0,o=(t=b(t)?(e=t,["*"]):t.match(N)).length;n<o;n++)i=t[n],Ce.tweeners[i]=Ce.tweeners[i]||[],Ce.tweeners[i].unshift(e)},prefilters:[function(t,e,i){var n,o,s,r,a,l,c,d,u="width"in e||"height"in e,h=this,p={},f=t.style,g=t.nodeType&&lt(t),m=K.get(t,"fxshow");for(n in i.queue||(null==(r=T._queueHooks(t,"fx")).unqueued&&(r.unqueued=0,a=r.empty.fire,r.empty.fire=function(){r.unqueued||a()}),r.unqueued++,h.always(function(){h.always(function(){r.unqueued--,T.queue(t,"fx").length||r.empty.fire()})})),e)if(o=e[n],me.test(o)){if(delete e[n],s=s||"toggle"===o,o===(g?"hide":"show")){if("show"!==o||!m||void 0===m[n])continue;g=!0}p[n]=m&&m[n]||T.style(t,n)}if((l=!T.isEmptyObject(e))||!T.isEmptyObject(p))for(n in u&&1===t.nodeType&&(i.overflow=[f.overflow,f.overflowX,f.overflowY],null==(c=m&&m.display)&&(c=K.get(t,"display")),"none"===(d=T.css(t,"display"))&&(c?d=c:(ut([t],!0),c=t.style.display||c,d=T.css(t,"display"),ut([t]))),("inline"===d||"inline-block"===d&&null!=c)&&"none"===T.css(t,"float")&&(l||(h.done(function(){f.display=c}),null==c&&(d=f.display,c="none"===d?"":d)),f.display="inline-block")),i.overflow&&(f.overflow="hidden",h.always(function(){f.overflow=i.overflow[0],f.overflowX=i.overflow[1],f.overflowY=i.overflow[2]})),l=!1,p)l||(m?"hidden"in m&&(g=m.hidden):m=K.access(t,"fxshow",{display:c}),s&&(m.hidden=!g),g&&ut([t],!0),h.done(function(){for(n in g||ut([t]),K.remove(t,"fxshow"),p)T.style(t,n,p[n])})),l=we(g?m[n]:0,n,h),n in m||(m[n]=l.start,g&&(l.end=l.start,l.start=0))}],prefilter:function(t,e){e?Ce.prefilters.unshift(t):Ce.prefilters.push(t)}}),T.speed=function(t,e,i){var n=t&&"object"==typeof t?T.extend({},t):{complete:i||!i&&e||b(t)&&t,duration:t,easing:i&&e||e&&!b(e)&&e};return T.fx.off?n.duration=0:"number"!=typeof n.duration&&(n.duration in T.fx.speeds?n.duration=T.fx.speeds[n.duration]:n.duration=T.fx.speeds._default),null!=n.queue&&!0!==n.queue||(n.queue="fx"),n.old=n.complete,n.complete=function(){b(n.old)&&n.old.call(this),n.queue&&T.dequeue(this,n.queue)},n},T.fn.extend({fadeTo:function(t,e,i,n){return this.filter(lt).css("opacity",0).show().end().animate({opacity:e},t,i,n)},animate:function(e,t,i,n){function o(){var t=Ce(this,T.extend({},e),r);(s||K.get(this,"finish"))&&t.stop(!0)}var s=T.isEmptyObject(e),r=T.speed(t,i,n);return o.finish=o,s||!1===r.queue?this.each(o):this.queue(r.queue,o)},stop:function(o,t,s){function r(t){var e=t.stop;delete t.stop,e(s)}return"string"!=typeof o&&(s=t,t=o,o=void 0),t&&!1!==o&&this.queue(o||"fx",[]),this.each(function(){var t=!0,e=null!=o&&o+"queueHooks",i=T.timers,n=K.get(this);if(e)n[e]&&n[e].stop&&r(n[e]);else for(e in n)n[e]&&n[e].stop&&ye.test(e)&&r(n[e]);for(e=i.length;e--;)i[e].elem!==this||null!=o&&i[e].queue!==o||(i[e].anim.stop(s),t=!1,i.splice(e,1));!t&&s||T.dequeue(this,o)})},finish:function(r){return!1!==r&&(r=r||"fx"),this.each(function(){var t,e=K.get(this),i=e[r+"queue"],n=e[r+"queueHooks"],o=T.timers,s=i?i.length:0;for(e.finish=!0,T.queue(this,r,[]),n&&n.stop&&n.stop.call(this,!0),t=o.length;t--;)o[t].elem===this&&o[t].queue===r&&(o[t].anim.stop(!0),o.splice(t,1));for(t=0;t<s;t++)i[t]&&i[t].finish&&i[t].finish.call(this);delete e.finish})}}),T.each(["toggle","show","hide"],function(t,n){var o=T.fn[n];T.fn[n]=function(t,e,i){return null==t||"boolean"==typeof t?o.apply(this,arguments):this.animate(xe(n,!0),t,e,i)}}),T.each({slideDown:xe("show"),slideUp:xe("hide"),slideToggle:xe("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(t,n){T.fn[t]=function(t,e,i){return this.animate(n,t,e,i)}}),T.timers=[],T.fx.tick=function(){var t,e=0,i=T.timers;for(he=Date.now();e<i.length;e++)(t=i[e])()||i[e]!==t||i.splice(e--,1);i.length||T.fx.stop(),he=void 0},T.fx.timer=function(t){T.timers.push(t),T.fx.start()},T.fx.interval=13,T.fx.start=function(){pe||(pe=!0,ve())},T.fx.stop=function(){pe=null},T.fx.speeds={slow:600,fast:200,_default:400},T.fn.delay=function(n,t){return n=T.fx&&T.fx.speeds[n]||n,t=t||"fx",this.queue(t,function(t,e){var i=_.setTimeout(t,n);e.stop=function(){_.clearTimeout(i)}})},fe=S.createElement("input"),ge=S.createElement("select").appendChild(S.createElement("option")),fe.type="checkbox",v.checkOn=""!==fe.value,v.optSelected=ge.selected,(fe=S.createElement("input")).value="t",fe.type="radio",v.radioValue="t"===fe.value;var _e,Se=T.expr.attrHandle;T.fn.extend({attr:function(t,e){return z(this,T.attr,t,e,1<arguments.length)},removeAttr:function(t){return this.each(function(){T.removeAttr(this,t)})}}),T.extend({attr:function(t,e,i){var n,o,s=t.nodeType;if(3!==s&&8!==s&&2!==s)return void 0===t.getAttribute?T.prop(t,e,i):(1===s&&T.isXMLDoc(t)||(o=T.attrHooks[e.toLowerCase()]||(T.expr.match.bool.test(e)?_e:void 0)),void 0!==i?null===i?void T.removeAttr(t,e):o&&"set"in o&&void 0!==(n=o.set(t,i,e))?n:(t.setAttribute(e,i+""),i):!(o&&"get"in o&&null!==(n=o.get(t,e)))&&null==(n=T.find.attr(t,e))?void 0:n)},attrHooks:{type:{set:function(t,e){if(!v.radioValue&&"radio"===e&&A(t,"input")){var i=t.value;return t.setAttribute("type",e),i&&(t.value=i),e}}}},removeAttr:function(t,e){var i,n=0,o=e&&e.match(N);if(o&&1===t.nodeType)for(;i=o[n++];)t.removeAttribute(i)}}),_e={set:function(t,e,i){return!1===e?T.removeAttr(t,i):t.setAttribute(i,i),i}},T.each(T.expr.match.bool.source.match(/\w+/g),function(t,e){var r=Se[e]||T.find.attr;Se[e]=function(t,e,i){var n,o,s=e.toLowerCase();return i||(o=Se[s],Se[s]=n,n=null!=r(t,e,i)?s:null,Se[s]=o),n}});var Te=/^(?:input|select|textarea|button)$/i,ke=/^(?:a|area)$/i;function $e(t){return(t.match(N)||[]).join(" ")}function Ae(t){return t.getAttribute&&t.getAttribute("class")||""}function Ee(t){return Array.isArray(t)?t:"string"==typeof t&&t.match(N)||[]}T.fn.extend({prop:function(t,e){return z(this,T.prop,t,e,1<arguments.length)},removeProp:function(t){return this.each(function(){delete this[T.propFix[t]||t]})}}),T.extend({prop:function(t,e,i){var n,o,s=t.nodeType;if(3!==s&&8!==s&&2!==s)return 1===s&&T.isXMLDoc(t)||(e=T.propFix[e]||e,o=T.propHooks[e]),void 0!==i?o&&"set"in o&&void 0!==(n=o.set(t,i,e))?n:t[e]=i:o&&"get"in o&&null!==(n=o.get(t,e))?n:t[e]},propHooks:{tabIndex:{get:function(t){var e=T.find.attr(t,"tabindex");return e?parseInt(e,10):Te.test(t.nodeName)||ke.test(t.nodeName)&&t.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),v.optSelected||(T.propHooks.selected={get:function(t){var e=t.parentNode;return e&&e.parentNode&&e.parentNode.selectedIndex,null},set:function(t){var e=t.parentNode;e&&(e.selectedIndex,e.parentNode&&e.parentNode.selectedIndex)}}),T.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){T.propFix[this.toLowerCase()]=this}),T.fn.extend({addClass:function(e){var t,i,n,o,s,r,a,l=0;if(b(e))return this.each(function(t){T(this).addClass(e.call(this,t,Ae(this)))});if((t=Ee(e)).length)for(;i=this[l++];)if(o=Ae(i),n=1===i.nodeType&&" "+$e(o)+" "){for(r=0;s=t[r++];)n.indexOf(" "+s+" ")<0&&(n+=s+" ");o!==(a=$e(n))&&i.setAttribute("class",a)}return this},removeClass:function(e){var t,i,n,o,s,r,a,l=0;if(b(e))return this.each(function(t){T(this).removeClass(e.call(this,t,Ae(this)))});if(!arguments.length)return this.attr("class","");if((t=Ee(e)).length)for(;i=this[l++];)if(o=Ae(i),n=1===i.nodeType&&" "+$e(o)+" "){for(r=0;s=t[r++];)for(;-1<n.indexOf(" "+s+" ");)n=n.replace(" "+s+" "," ");o!==(a=$e(n))&&i.setAttribute("class",a)}return this},toggleClass:function(o,e){var s=typeof o,r="string"==s||Array.isArray(o);return"boolean"==typeof e&&r?e?this.addClass(o):this.removeClass(o):b(o)?this.each(function(t){T(this).toggleClass(o.call(this,t,Ae(this),e),e)}):this.each(function(){var t,e,i,n;if(r)for(e=0,i=T(this),n=Ee(o);t=n[e++];)i.hasClass(t)?i.removeClass(t):i.addClass(t);else void 0!==o&&"boolean"!=s||((t=Ae(this))&&K.set(this,"__className__",t),this.setAttribute&&this.setAttribute("class",!t&&!1!==o&&K.get(this,"__className__")||""))})},hasClass:function(t){var e,i,n=0;for(e=" "+t+" ";i=this[n++];)if(1===i.nodeType&&-1<(" "+$e(Ae(i))+" ").indexOf(e))return!0;return!1}});var De=/\r/g;T.fn.extend({val:function(i){var n,t,o,e=this[0];return arguments.length?(o=b(i),this.each(function(t){var e;1===this.nodeType&&(null==(e=o?i.call(this,t,T(this).val()):i)?e="":"number"==typeof e?e+="":Array.isArray(e)&&(e=T.map(e,function(t){return null==t?"":t+""})),(n=T.valHooks[this.type]||T.valHooks[this.nodeName.toLowerCase()])&&"set"in n&&void 0!==n.set(this,e,"value")||(this.value=e))})):e?(n=T.valHooks[e.type]||T.valHooks[e.nodeName.toLowerCase()])&&"get"in n&&void 0!==(t=n.get(e,"value"))?t:"string"==typeof(t=e.value)?t.replace(De,""):null==t?"":t:void 0}}),T.extend({valHooks:{option:{get:function(t){var e=T.find.attr(t,"value");return null!=e?e:$e(T.text(t))}},select:{get:function(t){var e,i,n,o=t.options,s=t.selectedIndex,r="select-one"===t.type,a=r?null:[],l=r?s+1:o.length;for(n=s<0?l:r?s:0;n<l;n++)if(((i=o[n]).selected||n===s)&&!i.disabled&&(!i.parentNode.disabled||!A(i.parentNode,"optgroup"))){if(e=T(i).val(),r)return e;a.push(e)}return a},set:function(t,e){for(var i,n,o=t.options,s=T.makeArray(e),r=o.length;r--;)((n=o[r]).selected=-1<T.inArray(T.valHooks.option.get(n),s))&&(i=!0);return i||(t.selectedIndex=-1),s}}}}),T.each(["radio","checkbox"],function(){T.valHooks[this]={set:function(t,e){if(Array.isArray(e))return t.checked=-1<T.inArray(T(t).val(),e)}},v.checkOn||(T.valHooks[this].get=function(t){return null===t.getAttribute("value")?"on":t.value})}),v.focusin="onfocusin"in _;function Pe(t){t.stopPropagation()}var Oe=/^(?:focusinfocus|focusoutblur)$/;T.extend(T.event,{trigger:function(t,e,i,n){var o,s,r,a,l,c,d,u,h=[i||S],p=y.call(t,"type")?t.type:t,f=y.call(t,"namespace")?t.namespace.split("."):[];if(s=u=r=i=i||S,3!==i.nodeType&&8!==i.nodeType&&!Oe.test(p+T.event.triggered)&&(-1<p.indexOf(".")&&(p=(f=p.split(".")).shift(),f.sort()),l=p.indexOf(":")<0&&"on"+p,(t=t[T.expando]?t:new T.Event(p,"object"==typeof t&&t)).isTrigger=n?2:3,t.namespace=f.join("."),t.rnamespace=t.namespace?new RegExp("(^|\\.)"+f.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,t.result=void 0,t.target||(t.target=i),e=null==e?[t]:T.makeArray(e,[t]),d=T.event.special[p]||{},n||!d.trigger||!1!==d.trigger.apply(i,e))){if(!n&&!d.noBubble&&!g(i)){for(a=d.delegateType||p,Oe.test(a+p)||(s=s.parentNode);s;s=s.parentNode)h.push(s),r=s;r===(i.ownerDocument||S)&&h.push(r.defaultView||r.parentWindow||_)}for(o=0;(s=h[o++])&&!t.isPropagationStopped();)u=s,t.type=1<o?a:d.bindType||p,(c=(K.get(s,"events")||{})[t.type]&&K.get(s,"handle"))&&c.apply(s,e),(c=l&&s[l])&&c.apply&&Y(s)&&(t.result=c.apply(s,e),!1===t.result&&t.preventDefault());return t.type=p,n||t.isDefaultPrevented()||d._default&&!1!==d._default.apply(h.pop(),e)||!Y(i)||l&&b(i[p])&&!g(i)&&((r=i[l])&&(i[l]=null),T.event.triggered=p,t.isPropagationStopped()&&u.addEventListener(p,Pe),i[p](),t.isPropagationStopped()&&u.removeEventListener(p,Pe),T.event.triggered=void 0,r&&(i[l]=r)),t.result}},simulate:function(t,e,i){var n=T.extend(new T.Event,i,{type:t,isSimulated:!0});T.event.trigger(n,null,e)}}),T.fn.extend({trigger:function(t,e){return this.each(function(){T.event.trigger(t,e,this)})},triggerHandler:function(t,e){var i=this[0];if(i)return T.event.trigger(t,e,i,!0)}}),v.focusin||T.each({focus:"focusin",blur:"focusout"},function(i,n){function o(t){T.event.simulate(n,t.target,T.event.fix(t))}T.event.special[n]={setup:function(){var t=this.ownerDocument||this,e=K.access(t,n);e||t.addEventListener(i,o,!0),K.access(t,n,(e||0)+1)},teardown:function(){var t=this.ownerDocument||this,e=K.access(t,n)-1;e?K.access(t,n,e):(t.removeEventListener(i,o,!0),K.remove(t,n))}}});var Ie=_.location,Fe=Date.now(),Me=/\?/;T.parseXML=function(t){var e;if(!t||"string"!=typeof t)return null;try{e=(new _.DOMParser).parseFromString(t,"text/xml")}catch(t){e=void 0}return e&&!e.getElementsByTagName("parsererror").length||T.error("Invalid XML: "+t),e};var Ne=/\[\]$/,Re=/\r?\n/g,Le=/^(?:submit|button|image|reset|file)$/i,je=/^(?:input|select|textarea|keygen)/i;function Be(i,t,n,o){var e;if(Array.isArray(t))T.each(t,function(t,e){n||Ne.test(i)?o(i,e):Be(i+"["+("object"==typeof e&&null!=e?t:"")+"]",e,n,o)});else if(n||"object"!==w(t))o(i,t);else for(e in t)Be(i+"["+e+"]",t[e],n,o)}T.param=function(t,e){function i(t,e){var i=b(e)?e():e;o[o.length]=encodeURIComponent(t)+"="+encodeURIComponent(null==i?"":i)}var n,o=[];if(null==t)return"";if(Array.isArray(t)||t.jquery&&!T.isPlainObject(t))T.each(t,function(){i(this.name,this.value)});else for(n in t)Be(n,t[n],e,i);return o.join("&")},T.fn.extend({serialize:function(){return T.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var t=T.prop(this,"elements");return t?T.makeArray(t):this}).filter(function(){var t=this.type;return this.name&&!T(this).is(":disabled")&&je.test(this.nodeName)&&!Le.test(t)&&(this.checked||!ht.test(t))}).map(function(t,e){var i=T(this).val();return null==i?null:Array.isArray(i)?T.map(i,function(t){return{name:e.name,value:t.replace(Re,"\r\n")}}):{name:e.name,value:i.replace(Re,"\r\n")}}).get()}});var He=/%20/g,qe=/#.*$/,ze=/([?&])_=[^&]*/,We=/^(.*?):[ \t]*([^\r\n]*)$/gm,Ue=/^(?:GET|HEAD)$/,Xe=/^\/\//,Ve={},Ye={},Ge="*/".concat("*"),Ke=S.createElement("a");function Qe(s){return function(t,e){"string"!=typeof t&&(e=t,t="*");var i,n=0,o=t.toLowerCase().match(N)||[];if(b(e))for(;i=o[n++];)"+"===i[0]?(i=i.slice(1)||"*",(s[i]=s[i]||[]).unshift(e)):(s[i]=s[i]||[]).push(e)}}function Ze(e,o,s,r){var a={},l=e===Ye;function c(t){var n;return a[t]=!0,T.each(e[t]||[],function(t,e){var i=e(o,s,r);return"string"!=typeof i||l||a[i]?l?!(n=i):void 0:(o.dataTypes.unshift(i),c(i),!1)}),n}return c(o.dataTypes[0])||!a["*"]&&c("*")}function Je(t,e){var i,n,o=T.ajaxSettings.flatOptions||{};for(i in e)void 0!==e[i]&&((o[i]?t:n=n||{})[i]=e[i]);return n&&T.extend(!0,t,n),t}Ke.href=Ie.href,T.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:Ie.href,type:"GET",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(Ie.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Ge,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":T.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(t,e){return e?Je(Je(t,T.ajaxSettings),e):Je(T.ajaxSettings,t)},ajaxPrefilter:Qe(Ve),ajaxTransport:Qe(Ye),ajax:function(t,e){"object"==typeof t&&(e=t,t=void 0),e=e||{};var d,u,h,i,p,n,f,g,o,s,m=T.ajaxSetup({},e),y=m.context||m,v=m.context&&(y.nodeType||y.jquery)?T(y):T.event,b=T.Deferred(),x=T.Callbacks("once memory"),w=m.statusCode||{},r={},a={},l="canceled",C={readyState:0,getResponseHeader:function(t){var e;if(f){if(!i)for(i={};e=We.exec(h);)i[e[1].toLowerCase()+" "]=(i[e[1].toLowerCase()+" "]||[]).concat(e[2]);e=i[t.toLowerCase()+" "]}return null==e?null:e.join(", ")},getAllResponseHeaders:function(){return f?h:null},setRequestHeader:function(t,e){return null==f&&(t=a[t.toLowerCase()]=a[t.toLowerCase()]||t,r[t]=e),this},overrideMimeType:function(t){return null==f&&(m.mimeType=t),this},statusCode:function(t){var e;if(t)if(f)C.always(t[C.status]);else for(e in t)w[e]=[w[e],t[e]];return this},abort:function(t){var e=t||l;return d&&d.abort(e),c(0,e),this}};if(b.promise(C),m.url=((t||m.url||Ie.href)+"").replace(Xe,Ie.protocol+"//"),m.type=e.method||e.type||m.method||m.type,m.dataTypes=(m.dataType||"*").toLowerCase().match(N)||[""],null==m.crossDomain){n=S.createElement("a");try{n.href=m.url,n.href=n.href,m.crossDomain=Ke.protocol+"//"+Ke.host!=n.protocol+"//"+n.host}catch(t){m.crossDomain=!0}}if(m.data&&m.processData&&"string"!=typeof m.data&&(m.data=T.param(m.data,m.traditional)),Ze(Ve,m,e,C),f)return C;for(o in(g=T.event&&m.global)&&0==T.active++&&T.event.trigger("ajaxStart"),m.type=m.type.toUpperCase(),m.hasContent=!Ue.test(m.type),u=m.url.replace(qe,""),m.hasContent?m.data&&m.processData&&0===(m.contentType||"").indexOf("application/x-www-form-urlencoded")&&(m.data=m.data.replace(He,"+")):(s=m.url.slice(u.length),m.data&&(m.processData||"string"==typeof m.data)&&(u+=(Me.test(u)?"&":"?")+m.data,delete m.data),!1===m.cache&&(u=u.replace(ze,"$1"),s=(Me.test(u)?"&":"?")+"_="+Fe+++s),m.url=u+s),m.ifModified&&(T.lastModified[u]&&C.setRequestHeader("If-Modified-Since",T.lastModified[u]),T.etag[u]&&C.setRequestHeader("If-None-Match",T.etag[u])),(m.data&&m.hasContent&&!1!==m.contentType||e.contentType)&&C.setRequestHeader("Content-Type",m.contentType),C.setRequestHeader("Accept",m.dataTypes[0]&&m.accepts[m.dataTypes[0]]?m.accepts[m.dataTypes[0]]+("*"!==m.dataTypes[0]?", "+Ge+"; q=0.01":""):m.accepts["*"]),m.headers)C.setRequestHeader(o,m.headers[o]);if(m.beforeSend&&(!1===m.beforeSend.call(y,C,m)||f))return C.abort();if(l="abort",x.add(m.complete),C.done(m.success),C.fail(m.error),d=Ze(Ye,m,e,C)){if(C.readyState=1,g&&v.trigger("ajaxSend",[C,m]),f)return C;m.async&&0<m.timeout&&(p=_.setTimeout(function(){C.abort("timeout")},m.timeout));try{f=!1,d.send(r,c)}catch(t){if(f)throw t;c(-1,t)}}else c(-1,"No Transport");function c(t,e,i,n){var o,s,r,a,l,c=e;f||(f=!0,p&&_.clearTimeout(p),d=void 0,h=n||"",C.readyState=0<t?4:0,o=200<=t&&t<300||304===t,i&&(a=function(t,e,i){for(var n,o,s,r,a=t.contents,l=t.dataTypes;"*"===l[0];)l.shift(),void 0===n&&(n=t.mimeType||e.getResponseHeader("Content-Type"));if(n)for(o in a)if(a[o]&&a[o].test(n)){l.unshift(o);break}if(l[0]in i)s=l[0];else{for(o in i){if(!l[0]||t.converters[o+" "+l[0]]){s=o;break}r=r||o}s=s||r}if(s)return s!==l[0]&&l.unshift(s),i[s]}(m,C,i)),a=function(t,e,i,n){var o,s,r,a,l,c={},d=t.dataTypes.slice();if(d[1])for(r in t.converters)c[r.toLowerCase()]=t.converters[r];for(s=d.shift();s;)if(t.responseFields[s]&&(i[t.responseFields[s]]=e),!l&&n&&t.dataFilter&&(e=t.dataFilter(e,t.dataType)),l=s,s=d.shift())if("*"===s)s=l;else if("*"!==l&&l!==s){if(!(r=c[l+" "+s]||c["* "+s]))for(o in c)if((a=o.split(" "))[1]===s&&(r=c[l+" "+a[0]]||c["* "+a[0]])){!0===r?r=c[o]:!0!==c[o]&&(s=a[0],d.unshift(a[1]));break}if(!0!==r)if(r&&t.throws)e=r(e);else try{e=r(e)}catch(t){return{state:"parsererror",error:r?t:"No conversion from "+l+" to "+s}}}return{state:"success",data:e}}(m,a,C,o),o?(m.ifModified&&((l=C.getResponseHeader("Last-Modified"))&&(T.lastModified[u]=l),(l=C.getResponseHeader("etag"))&&(T.etag[u]=l)),204===t||"HEAD"===m.type?c="nocontent":304===t?c="notmodified":(c=a.state,s=a.data,o=!(r=a.error))):(r=c,!t&&c||(c="error",t<0&&(t=0))),C.status=t,C.statusText=(e||c)+"",o?b.resolveWith(y,[s,c,C]):b.rejectWith(y,[C,c,r]),C.statusCode(w),w=void 0,g&&v.trigger(o?"ajaxSuccess":"ajaxError",[C,m,o?s:r]),x.fireWith(y,[C,c]),g&&(v.trigger("ajaxComplete",[C,m]),--T.active||T.event.trigger("ajaxStop")))}return C},getJSON:function(t,e,i){return T.get(t,e,i,"json")},getScript:function(t,e){return T.get(t,void 0,e,"script")}}),T.each(["get","post"],function(t,o){T[o]=function(t,e,i,n){return b(e)&&(n=n||i,i=e,e=void 0),T.ajax(T.extend({url:t,type:o,dataType:n,data:e,success:i},T.isPlainObject(t)&&t))}}),T._evalUrl=function(t,e){return T.ajax({url:t,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,converters:{"text script":function(){}},dataFilter:function(t){T.globalEval(t,e)}})},T.fn.extend({wrapAll:function(t){var e;return this[0]&&(b(t)&&(t=t.call(this[0])),e=T(t,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&e.insertBefore(this[0]),e.map(function(){for(var t=this;t.firstElementChild;)t=t.firstElementChild;return t}).append(this)),this},wrapInner:function(i){return b(i)?this.each(function(t){T(this).wrapInner(i.call(this,t))}):this.each(function(){var t=T(this),e=t.contents();e.length?e.wrapAll(i):t.append(i)})},wrap:function(e){var i=b(e);return this.each(function(t){T(this).wrapAll(i?e.call(this,t):e)})},unwrap:function(t){return this.parent(t).not("body").each(function(){T(this).replaceWith(this.childNodes)}),this}}),T.expr.pseudos.hidden=function(t){return!T.expr.pseudos.visible(t)},T.expr.pseudos.visible=function(t){return!!(t.offsetWidth||t.offsetHeight||t.getClientRects().length)},T.ajaxSettings.xhr=function(){try{return new _.XMLHttpRequest}catch(t){}};var ti={0:200,1223:204},ei=T.ajaxSettings.xhr();v.cors=!!ei&&"withCredentials"in ei,v.ajax=ei=!!ei,T.ajaxTransport(function(o){var s,r;if(v.cors||ei&&!o.crossDomain)return{send:function(t,e){var i,n=o.xhr();if(n.open(o.type,o.url,o.async,o.username,o.password),o.xhrFields)for(i in o.xhrFields)n[i]=o.xhrFields[i];for(i in o.mimeType&&n.overrideMimeType&&n.overrideMimeType(o.mimeType),o.crossDomain||t["X-Requested-With"]||(t["X-Requested-With"]="XMLHttpRequest"),t)n.setRequestHeader(i,t[i]);s=function(t){return function(){s&&(s=r=n.onload=n.onerror=n.onabort=n.ontimeout=n.onreadystatechange=null,"abort"===t?n.abort():"error"===t?"number"!=typeof n.status?e(0,"error"):e(n.status,n.statusText):e(ti[n.status]||n.status,n.statusText,"text"!==(n.responseType||"text")||"string"!=typeof n.responseText?{binary:n.response}:{text:n.responseText},n.getAllResponseHeaders()))}},n.onload=s(),r=n.onerror=n.ontimeout=s("error"),void 0!==n.onabort?n.onabort=r:n.onreadystatechange=function(){4===n.readyState&&_.setTimeout(function(){s&&r()})},s=s("abort");try{n.send(o.hasContent&&o.data||null)}catch(t){if(s)throw t}},abort:function(){s&&s()}}}),T.ajaxPrefilter(function(t){t.crossDomain&&(t.contents.script=!1)}),T.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(t){return T.globalEval(t),t}}}),T.ajaxPrefilter("script",function(t){void 0===t.cache&&(t.cache=!1),t.crossDomain&&(t.type="GET")}),T.ajaxTransport("script",function(i){var n,o;if(i.crossDomain||i.scriptAttrs)return{send:function(t,e){n=T("<script>").attr(i.scriptAttrs||{}).prop({charset:i.scriptCharset,src:i.url}).on("load error",o=function(t){n.remove(),o=null,t&&e("error"===t.type?404:200,t.type)}),S.head.appendChild(n[0])},abort:function(){o&&o()}}});var ii,ni=[],oi=/(=)\?(?=&|$)|\?\?/;T.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var t=ni.pop()||T.expando+"_"+Fe++;return this[t]=!0,t}}),T.ajaxPrefilter("json jsonp",function(t,e,i){var n,o,s,r=!1!==t.jsonp&&(oi.test(t.url)?"url":"string"==typeof t.data&&0===(t.contentType||"").indexOf("application/x-www-form-urlencoded")&&oi.test(t.data)&&"data");if(r||"jsonp"===t.dataTypes[0])return n=t.jsonpCallback=b(t.jsonpCallback)?t.jsonpCallback():t.jsonpCallback,r?t[r]=t[r].replace(oi,"$1"+n):!1!==t.jsonp&&(t.url+=(Me.test(t.url)?"&":"?")+t.jsonp+"="+n),t.converters["script json"]=function(){return s||T.error(n+" was not called"),s[0]},t.dataTypes[0]="json",o=_[n],_[n]=function(){s=arguments},i.always(function(){void 0===o?T(_).removeProp(n):_[n]=o,t[n]&&(t.jsonpCallback=e.jsonpCallback,ni.push(n)),s&&b(o)&&o(s[0]),s=o=void 0}),"script"}),v.createHTMLDocument=((ii=S.implementation.createHTMLDocument("").body).innerHTML="<form></form><form></form>",2===ii.childNodes.length),T.parseHTML=function(t,e,i){return"string"!=typeof t?[]:("boolean"==typeof e&&(i=e,e=!1),e||(v.createHTMLDocument?((n=(e=S.implementation.createHTMLDocument("")).createElement("base")).href=S.location.href,e.head.appendChild(n)):e=S),s=!i&&[],(o=E.exec(t))?[e.createElement(o[1])]:(o=wt([t],e,s),s&&s.length&&T(s).remove(),T.merge([],o.childNodes)));var n,o,s},T.fn.load=function(t,e,i){var n,o,s,r=this,a=t.indexOf(" ");return-1<a&&(n=$e(t.slice(a)),t=t.slice(0,a)),b(e)?(i=e,e=void 0):e&&"object"==typeof e&&(o="POST"),0<r.length&&T.ajax({url:t,type:o||"GET",dataType:"html",data:e}).done(function(t){s=arguments,r.html(n?T("<div>").append(T.parseHTML(t)).find(n):t)}).always(i&&function(t,e){r.each(function(){i.apply(this,s||[t.responseText,e,t])})}),this},T.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(t,e){T.fn[e]=function(t){return this.on(e,t)}}),T.expr.pseudos.animated=function(e){return T.grep(T.timers,function(t){return e===t.elem}).length},T.offset={setOffset:function(t,e,i){var n,o,s,r,a,l,c=T.css(t,"position"),d=T(t),u={};"static"===c&&(t.style.position="relative"),a=d.offset(),s=T.css(t,"top"),l=T.css(t,"left"),o=("absolute"===c||"fixed"===c)&&-1<(s+l).indexOf("auto")?(r=(n=d.position()).top,n.left):(r=parseFloat(s)||0,parseFloat(l)||0),b(e)&&(e=e.call(t,i,T.extend({},a))),null!=e.top&&(u.top=e.top-a.top+r),null!=e.left&&(u.left=e.left-a.left+o),"using"in e?e.using.call(t,u):d.css(u)}},T.fn.extend({offset:function(e){if(arguments.length)return void 0===e?this:this.each(function(t){T.offset.setOffset(this,e,t)});var t,i,n=this[0];return n?n.getClientRects().length?(t=n.getBoundingClientRect(),i=n.ownerDocument.defaultView,{top:t.top+i.pageYOffset,left:t.left+i.pageXOffset}):{top:0,left:0}:void 0},position:function(){if(this[0]){var t,e,i,n=this[0],o={top:0,left:0};if("fixed"===T.css(n,"position"))e=n.getBoundingClientRect();else{for(e=this.offset(),i=n.ownerDocument,t=n.offsetParent||i.documentElement;t&&(t===i.body||t===i.documentElement)&&"static"===T.css(t,"position");)t=t.parentNode;t&&t!==n&&1===t.nodeType&&((o=T(t).offset()).top+=T.css(t,"borderTopWidth",!0),o.left+=T.css(t,"borderLeftWidth",!0))}return{top:e.top-o.top-T.css(n,"marginTop",!0),left:e.left-o.left-T.css(n,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var t=this.offsetParent;t&&"static"===T.css(t,"position");)t=t.offsetParent;return t||ot})}}),T.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(e,o){var s="pageYOffset"===o;T.fn[e]=function(t){return z(this,function(t,e,i){var n;if(g(t)?n=t:9===t.nodeType&&(n=t.defaultView),void 0===i)return n?n[o]:t[e];n?n.scrollTo(s?n.pageXOffset:i,s?i:n.pageYOffset):t[e]=i},e,t,arguments.length)}}),T.each(["top","left"],function(t,i){T.cssHooks[i]=Jt(v.pixelPosition,function(t,e){if(e)return e=Zt(t,i),Vt.test(e)?T(t).position()[i]+"px":e})}),T.each({Height:"height",Width:"width"},function(r,a){T.each({padding:"inner"+r,content:a,"":"outer"+r},function(n,s){T.fn[s]=function(t,e){var i=arguments.length&&(n||"boolean"!=typeof t),o=n||(!0===t||!0===e?"margin":"border");return z(this,function(t,e,i){var n;return g(t)?0===s.indexOf("outer")?t["inner"+r]:t.document.documentElement["client"+r]:9===t.nodeType?(n=t.documentElement,Math.max(t.body["scroll"+r],n["scroll"+r],t.body["offset"+r],n["offset"+r],n["client"+r])):void 0===i?T.css(t,e,o):T.style(t,e,i,o)},a,i?t:void 0,i)}})}),T.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),function(t,i){T.fn[i]=function(t,e){return 0<arguments.length?this.on(i,null,t,e):this.trigger(i)}}),T.fn.extend({hover:function(t,e){return this.mouseenter(t).mouseleave(e||t)}}),T.fn.extend({bind:function(t,e,i){return this.on(t,null,e,i)},unbind:function(t,e){return this.off(t,null,e)},delegate:function(t,e,i,n){return this.on(e,t,i,n)},undelegate:function(t,e,i){return 1===arguments.length?this.off(t,"**"):this.off(e,t||"**",i)}}),T.proxy=function(t,e){var i,n,o;if("string"==typeof e&&(i=t[e],e=t,t=i),b(t))return n=a.call(arguments,2),(o=function(){return t.apply(e||this,n.concat(a.call(arguments)))}).guid=t.guid=t.guid||T.guid++,o},T.holdReady=function(t){t?T.readyWait++:T.ready(!0)},T.isArray=Array.isArray,T.parseJSON=JSON.parse,T.nodeName=A,T.isFunction=b,T.isWindow=g,T.camelCase=V,T.type=w,T.now=Date.now,T.isNumeric=function(t){var e=T.type(t);return("number"===e||"string"===e)&&!isNaN(t-parseFloat(t))},"function"==typeof define&&define.amd&&define("jquery",[],function(){return T});var si=_.jQuery,ri=_.$;return T.noConflict=function(t){return _.$===T&&(_.$=ri),t&&_.jQuery===T&&(_.jQuery=si),T},t||(_.jQuery=_.$=T),T}),function(q){"use strict";var z='<?xml version="1.0" encoding="utf-8"?><svg version="1.1"xmlns="http://www.w3.org/2000/svg"viewBox="0 12.705 512 486.59"x="0px" y="0px"xml:space="preserve"><polygon points="256.814,12.705 317.205,198.566 512.631,198.566 354.529,313.435 414.918,499.295 256.814,384.427 98.713,499.295 159.102,313.435 1,198.566 196.426,198.566 "/></svg>',n={starWidth:"32px",normalFill:"gray",ratedFill:"#f39c12",numStars:5,maxValue:5,precision:1,rating:0,fullStar:!1,halfStar:!1,readOnly:!1,spacing:"0px",rtl:!1,multiColor:null,onInit:null,onChange:null,onSet:null,starSvg:null},W={startColor:"#c0392b",endColor:"#f1c40f"};function U(t,e,i){return t===e?t=e:t===i&&(t=i),t}function X(t){return void 0!==t}var i=/^#([0-9a-f]{2})([0-9a-f]{2})([0-9a-f]{2})$/i,V=function(t){if(!i.test(t))return null;var e=i.exec(t);return{r:parseInt(e[1],16),g:parseInt(e[2],16),b:parseInt(e[3],16)}};function Y(t,e,i){var n=i/100*(e-t);return 1===(n=Math.round(t+n).toString(16)).length&&(n="0"+n),n}function G(s,p){this.node=s.get(0);var i=this;s.empty().addClass("jq-ry-container");var f,n,g,m,y,t,e=q("<div/>").addClass("jq-ry-group-wrapper").appendTo(s),v=q("<div/>").addClass("jq-ry-normal-group").addClass("jq-ry-group").appendTo(e),o=q("<div/>").addClass("jq-ry-rated-group").addClass("jq-ry-group").appendTo(e),b=0,r=p.rating,a=!1;function l(t){X(t)||(t=p.rating);var e=(r=t)/f,i=e*g;1<e&&(i+=(Math.ceil(e)-1)*y),w(p.ratedFill),(i=p.rtl?100-i:i)<0?i=0:100<i&&(i=100),o.css("width",i+"%")}function c(){t=n*p.numStars+m*(p.numStars-1),g=n/t*100,y=m/t*100,s.width(t),l()}function d(t){var e=p.starWidth=t;return n=window.parseFloat(p.starWidth.replace("px","")),v.find("svg").attr({width:p.starWidth,height:e}),o.find("svg").attr({width:p.starWidth,height:e}),c(),s}function u(t){return p.spacing=t,m=parseFloat(p.spacing.replace("px","")),v.find("svg:not(:first-child)").css({"margin-left":t}),o.find("svg:not(:first-child)").css({"margin-left":t}),c(),s}function h(t){return p.normalFill=t,(p.rtl?o:v).find("svg").attr({fill:p.normalFill}),s}var x=p.ratedFill;function w(t){if(p.multiColor){var e=(r-b)/p.maxValue*100,i=p.multiColor||{};t=function(t,e,i){if(!t||!e)return null;i=X(i)?i:0,t=V(t),e=V(e);var n=Y(t.r,e.r,i),o=Y(t.b,e.b,i);return"#"+n+Y(t.g,e.g,i)+o}(i.startColor||W.startColor,i.endColor||W.endColor,e)}else x=t;return p.ratedFill=t,(p.rtl?v:o).find("svg").attr({fill:p.ratedFill}),s}function C(t){t=!!t,p.rtl=t,h(p.normalFill),l()}function _(t){w((p.multiColor=t)||x)}function S(t){p.numStars=t,f=p.maxValue/p.numStars,v.empty(),o.empty();for(var e=0;e<p.numStars;e++)v.append(q(p.starSvg||z)),o.append(q(p.starSvg||z));return d(p.starWidth),h(p.normalFill),u(p.spacing),l(),s}function T(t){return p.maxValue=t,f=p.maxValue/p.numStars,p.rating>t&&P(t),l(),s}function k(t){return p.precision=t,P(p.rating),s}function $(t){return p.halfStar=t,s}function A(t){return p.fullStar=t,s}function E(t){var e,i,n,o,s,r=v.offset().left,a=r+v.width(),l=p.maxValue,c=t.pageX,d=0;if(c<r)d=b;else if(a<c)d=l;else{var u=(c-r)/(a-r);if(0<m)for(var h=u*=100;0<h;)g<h?(d+=f,h-=g+y):(d+=h/g*f,h=0);else d=u*p.maxValue;i=(e=d)%f,n=f/2,o=p.halfStar,((s=p.fullStar)||o)&&(s||o&&n<i?e+=f-i:(e-=i,0<i&&(e+=n))),d=e}return p.rtl&&(d=l-d),parseFloat(d)}function D(t){return p.readOnly=t,s.attr("readonly",!0),H(),t||(s.removeAttr("readonly"),s.on("mousemove",M).on("mouseenter",M).on("mouseleave",N).on("click",R).on("rateyo.init",L).on("rateyo.change",j).on("rateyo.set",B)),s}function P(t){var e=t,i=p.maxValue;return"string"==typeof e&&("%"===e[e.length-1]&&(e=e.substr(0,e.length-1),T(i=100)),e=parseFloat(e)),function(t,e,i){if(!(e<=t&&t<=i))throw Error("Invalid Rating, expected value between "+e+" and "+i)}(e,b,i),e=parseFloat(e.toFixed(p.precision)),U(parseFloat(e),b,i),p.rating=e,l(),a&&s.trigger("rateyo.set",{rating:e}),s}function O(t){return p.onInit=t,s}function I(t){return p.onSet=t,s}function F(t){return p.onChange=t,s}function M(t){var e=E(t).toFixed(p.precision),i=p.maxValue;l(e=U(parseFloat(e),b,i)),s.trigger("rateyo.change",{rating:e})}function N(){var t,e;e=!1,t=navigator.userAgent||navigator.vendor||window.opera,(/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino|android|ipad|playbook|silk/i.test(t)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(t.substr(0,4)))&&(e=!0),e||(l(),s.trigger("rateyo.change",{rating:p.rating}))}function R(t){var e=E(t).toFixed(p.precision);e=parseFloat(e),i.rating(e)}function L(t,e){p.onInit&&"function"==typeof p.onInit&&p.onInit.apply(this,[e.rating,i])}function j(t,e){p.onChange&&"function"==typeof p.onChange&&p.onChange.apply(this,[e.rating,i])}function B(t,e){p.onSet&&"function"==typeof p.onSet&&p.onSet.apply(this,[e.rating,i])}function H(){s.off("mousemove",M).off("mouseenter",M).off("mouseleave",N).off("click",R).off("rateyo.init",L).off("rateyo.change",j).off("rateyo.set",B)}this.rating=function(t){return X(t)?(P(t),s):p.rating},this.destroy=function(){var n,o;return p.readOnly||H(),G.prototype.collection=(n=s.get(0),o=this.collection,q.each(o,function(t){if(n===this.node){var e=o.slice(0,t),i=o.slice(t+1,o.length);return o=e.concat(i),!1}}),o),s.removeClass("jq-ry-container").children().remove(),s},this.method=function(t){if(!t)throw Error("Method name not specified!");if(!X(this[t]))throw Error("Method "+t+" doesn't exist!");var e=Array.prototype.slice.apply(arguments,[]).slice(1);return this[t].apply(this,e)},this.option=function(t,e){if(!X(t))return p;var i;switch(t){case"starWidth":i=d;break;case"numStars":i=S;break;case"normalFill":i=h;break;case"ratedFill":i=w;break;case"multiColor":i=_;break;case"maxValue":i=T;break;case"precision":i=k;break;case"rating":i=P;break;case"halfStar":i=$;break;case"fullStar":i=A;break;case"readOnly":i=D;break;case"spacing":i=u;break;case"rtl":i=C;break;case"onInit":i=O;break;case"onSet":i=I;break;case"onChange":i=F;break;default:throw Error("No such option as "+t)}return X(e)?i(e):p[t]},S(p.numStars),D(p.readOnly),p.rtl&&C(p.rtl),this.collection.push(this),this.rating(p.rating,!0),a=!0,s.trigger("rateyo.init",{rating:p.rating})}function c(t,e){var i;return q.each(e,function(){if(t===this.node)return i=this,!1}),i}G.prototype.collection=[],window.RateYo=G,q.fn.rateYo=function(){return function(i){var s=G.prototype.collection,t=q(this);if(0===t.length)return t;var e=Array.prototype.slice.apply(arguments,[]);if(0===e.length)i=e[0]={};else{if(1!==e.length||"object"!=typeof e[0]){if(1<=e.length&&"string"==typeof e[0]){var r=e[0],a=e.slice(1),l=[];return q.each(t,function(t,e){var i=c(e,s);if(!i)throw Error("Trying to set options before even initialization");var n=i[r];if(!n)throw Error("Method "+r+" does not exist!");var o=n.apply(i,a);l.push(o)}),l=1===l.length?l[0]:l}throw Error("Invalid Arguments")}i=e[0]}return i=q.extend({},n,i),q.each(t,function(){var t=c(this,s);if(t)return t;var e=q(this),n={},o=q.extend({},i);return q.each(e.data(),function(t,e){if(0===t.indexOf("rateyo")){var i=t.replace(/^rateyo/,"");i=i[0].toLowerCase()+i.slice(1),n[i]=e,delete o[i]}}),new G(q(this),q.extend({},n,o))})}.apply(this,Array.prototype.slice.apply(arguments,[]))}}(window.jQuery),function(t){"use strict";"function"==typeof define&&define.amd?define(["jquery"],t):"undefined"!=typeof exports?module.exports=t(require("jquery")):t(jQuery)}(function(c){"use strict";var o,r=window.Slick||{};o=0,(r=function(t,e){var i,n=this;n.defaults={accessibility:!0,adaptiveHeight:!1,appendArrows:c(t),appendDots:c(t),arrows:!0,asNavFor:null,prevArrow:'<button class="slick-prev" aria-label="Previous" type="button">Previous</button>',nextArrow:'<button class="slick-next" aria-label="Next" type="button">Next</button>',autoplay:!1,autoplaySpeed:3e3,centerMode:!1,centerPadding:"50px",cssEase:"ease",customPaging:function(t,e){return c('<button type="button" />').text(e+1)},dots:!1,dotsClass:"slick-dots",draggable:!0,easing:"linear",edgeFriction:.35,fade:!1,focusOnSelect:!1,focusOnChange:!1,infinite:!0,initialSlide:0,lazyLoad:"ondemand",mobileFirst:!1,pauseOnHover:!0,pauseOnFocus:!0,pauseOnDotsHover:!1,respondTo:"window",responsive:null,rows:1,rtl:!1,slide:"",slidesPerRow:1,slidesToShow:1,slidesToScroll:1,speed:500,swipe:!0,swipeToSlide:!1,touchMove:!0,touchThreshold:5,useCSS:!0,useTransform:!0,variableWidth:!1,vertical:!1,verticalSwiping:!1,waitForAnimate:!0,zIndex:1e3},n.initials={animating:!1,dragging:!1,autoPlayTimer:null,currentDirection:0,currentLeft:null,currentSlide:0,direction:1,$dots:null,listWidth:null,listHeight:null,loadIndex:0,$nextArrow:null,$prevArrow:null,scrolling:!1,slideCount:null,slideWidth:null,$slideTrack:null,$slides:null,sliding:!1,slideOffset:0,swipeLeft:null,swiping:!1,$list:null,touchObject:{},transformsEnabled:!1,unslicked:!1},c.extend(n,n.initials),n.activeBreakpoint=null,n.animType=null,n.animProp=null,n.breakpoints=[],n.breakpointSettings=[],n.cssTransitions=!1,n.focussed=!1,n.interrupted=!1,n.hidden="hidden",n.paused=!0,n.positionProp=null,n.respondTo=null,n.rowCount=1,n.shouldClick=!0,n.$slider=c(t),n.$slidesCache=null,n.transformType=null,n.transitionType=null,n.visibilityChange="visibilitychange",n.windowWidth=0,n.windowTimer=null,i=c(t).data("slick")||{},n.options=c.extend({},n.defaults,e,i),n.currentSlide=n.options.initialSlide,n.originalSettings=n.options,void 0!==document.mozHidden?(n.hidden="mozHidden",n.visibilityChange="mozvisibilitychange"):void 0!==document.webkitHidden&&(n.hidden="webkitHidden",n.visibilityChange="webkitvisibilitychange"),n.autoPlay=c.proxy(n.autoPlay,n),n.autoPlayClear=c.proxy(n.autoPlayClear,n),n.autoPlayIterator=c.proxy(n.autoPlayIterator,n),n.changeSlide=c.proxy(n.changeSlide,n),n.clickHandler=c.proxy(n.clickHandler,n),n.selectHandler=c.proxy(n.selectHandler,n),n.setPosition=c.proxy(n.setPosition,n),n.swipeHandler=c.proxy(n.swipeHandler,n),n.dragHandler=c.proxy(n.dragHandler,n),n.keyHandler=c.proxy(n.keyHandler,n),n.instanceUid=o++,n.htmlExpr=/^(?:\s*(<[\w\W]+>)[^>]*)$/,n.registerBreakpoints(),n.init(!0)}).prototype.activateADA=function(){this.$slideTrack.find(".slick-active").attr({"aria-hidden":"false"}).find("a, input, button, select").attr({tabindex:"0"})},r.prototype.addSlide=r.prototype.slickAdd=function(t,e,i){var n=this;if("boolean"==typeof e)i=e,e=null;else if(e<0||e>=n.slideCount)return!1;n.unload(),"number"==typeof e?0===e&&0===n.$slides.length?c(t).appendTo(n.$slideTrack):i?c(t).insertBefore(n.$slides.eq(e)):c(t).insertAfter(n.$slides.eq(e)):!0===i?c(t).prependTo(n.$slideTrack):c(t).appendTo(n.$slideTrack),n.$slides=n.$slideTrack.children(this.options.slide),n.$slideTrack.children(this.options.slide).detach(),n.$slideTrack.append(n.$slides),n.$slides.each(function(t,e){c(e).attr("data-slick-index",t)}),n.$slidesCache=n.$slides,n.reinit()},r.prototype.animateHeight=function(){var t=this;if(1===t.options.slidesToShow&&!0===t.options.adaptiveHeight&&!1===t.options.vertical){var e=t.$slides.eq(t.currentSlide).outerHeight(!0);t.$list.animate({height:e},t.options.speed)}},r.prototype.animateSlide=function(t,e){var i={},n=this;n.animateHeight(),!0===n.options.rtl&&!1===n.options.vertical&&(t=-t),!1===n.transformsEnabled?!1===n.options.vertical?n.$slideTrack.animate({left:t},n.options.speed,n.options.easing,e):n.$slideTrack.animate({top:t},n.options.speed,n.options.easing,e):!1===n.cssTransitions?(!0===n.options.rtl&&(n.currentLeft=-n.currentLeft),c({animStart:n.currentLeft}).animate({animStart:t},{duration:n.options.speed,easing:n.options.easing,step:function(t){t=Math.ceil(t),!1===n.options.vertical?i[n.animType]="translate("+t+"px, 0px)":i[n.animType]="translate(0px,"+t+"px)",n.$slideTrack.css(i)},complete:function(){e&&e.call()}})):(n.applyTransition(),t=Math.ceil(t),!1===n.options.vertical?i[n.animType]="translate3d("+t+"px, 0px, 0px)":i[n.animType]="translate3d(0px,"+t+"px, 0px)",n.$slideTrack.css(i),e&&setTimeout(function(){n.disableTransition(),e.call()},n.options.speed))},r.prototype.getNavTarget=function(){var t=this.options.asNavFor;return t&&null!==t&&(t=c(t).not(this.$slider)),t},r.prototype.asNavFor=function(e){var t=this.getNavTarget();null!==t&&"object"==typeof t&&t.each(function(){var t=c(this).slick("getSlick");t.unslicked||t.slideHandler(e,!0)})},r.prototype.applyTransition=function(t){var e=this,i={};!1===e.options.fade?i[e.transitionType]=e.transformType+" "+e.options.speed+"ms "+e.options.cssEase:i[e.transitionType]="opacity "+e.options.speed+"ms "+e.options.cssEase,!1===e.options.fade?e.$slideTrack.css(i):e.$slides.eq(t).css(i)},r.prototype.autoPlay=function(){var t=this;t.autoPlayClear(),t.slideCount>t.options.slidesToShow&&(t.autoPlayTimer=setInterval(t.autoPlayIterator,t.options.autoplaySpeed))},r.prototype.autoPlayClear=function(){this.autoPlayTimer&&clearInterval(this.autoPlayTimer)},r.prototype.autoPlayIterator=function(){var t=this,e=t.currentSlide+t.options.slidesToScroll;t.paused||t.interrupted||t.focussed||(!1===t.options.infinite&&(1===t.direction&&t.currentSlide+1===t.slideCount-1?t.direction=0:0===t.direction&&(e=t.currentSlide-t.options.slidesToScroll,t.currentSlide-1==0&&(t.direction=1))),t.slideHandler(e))},r.prototype.buildArrows=function(){var t=this;!0===t.options.arrows&&(t.$prevArrow=c(t.options.prevArrow).addClass("slick-arrow"),t.$nextArrow=c(t.options.nextArrow).addClass("slick-arrow"),t.slideCount>t.options.slidesToShow?(t.$prevArrow.removeClass("slick-hidden").removeAttr("aria-hidden tabindex"),t.$nextArrow.removeClass("slick-hidden").removeAttr("aria-hidden tabindex"),t.htmlExpr.test(t.options.prevArrow)&&t.$prevArrow.prependTo(t.options.appendArrows),t.htmlExpr.test(t.options.nextArrow)&&t.$nextArrow.appendTo(t.options.appendArrows),!0!==t.options.infinite&&t.$prevArrow.addClass("slick-disabled").attr("aria-disabled","true")):t.$prevArrow.add(t.$nextArrow).addClass("slick-hidden").attr({"aria-disabled":"true",tabindex:"-1"}))},r.prototype.buildDots=function(){var t,e,i=this;if(!0===i.options.dots&&i.slideCount>i.options.slidesToShow){for(i.$slider.addClass("slick-dotted"),e=c("<ul />").addClass(i.options.dotsClass),t=0;t<=i.getDotCount();t+=1)e.append(c("<li />").append(i.options.customPaging.call(this,i,t)));i.$dots=e.appendTo(i.options.appendDots),i.$dots.find("li").first().addClass("slick-active")}},r.prototype.buildOut=function(){var t=this;t.$slides=t.$slider.children(t.options.slide+":not(.slick-cloned)").addClass("slick-slide"),t.slideCount=t.$slides.length,t.$slides.each(function(t,e){c(e).attr("data-slick-index",t).data("originalStyling",c(e).attr("style")||"")}),t.$slider.addClass("slick-slider"),t.$slideTrack=0===t.slideCount?c('<div class="slick-track"/>').appendTo(t.$slider):t.$slides.wrapAll('<div class="slick-track"/>').parent(),t.$list=t.$slideTrack.wrap('<div class="slick-list"/>').parent(),t.$slideTrack.css("opacity",0),!0!==t.options.centerMode&&!0!==t.options.swipeToSlide||(t.options.slidesToScroll=1),c("img[data-lazy]",t.$slider).not("[src]").addClass("slick-loading"),t.setupInfinite(),t.buildArrows(),t.buildDots(),t.updateDots(),t.setSlideClasses("number"==typeof t.currentSlide?t.currentSlide:0),!0===t.options.draggable&&t.$list.addClass("draggable")},r.prototype.buildRows=function(){var t,e,i,n,o,s,r,a=this;if(n=document.createDocumentFragment(),s=a.$slider.children(),0<a.options.rows){for(r=a.options.slidesPerRow*a.options.rows,o=Math.ceil(s.length/r),t=0;t<o;t++){var l=document.createElement("div");for(e=0;e<a.options.rows;e++){var c=document.createElement("div");for(i=0;i<a.options.slidesPerRow;i++){var d=t*r+(e*a.options.slidesPerRow+i);s.get(d)&&c.appendChild(s.get(d))}l.appendChild(c)}n.appendChild(l)}a.$slider.empty().append(n),a.$slider.children().children().children().css({width:100/a.options.slidesPerRow+"%",display:"inline-block"})}},r.prototype.checkResponsive=function(t,e){var i,n,o,s=this,r=!1,a=s.$slider.width(),l=window.innerWidth||c(window).width();if("window"===s.respondTo?o=l:"slider"===s.respondTo?o=a:"min"===s.respondTo&&(o=Math.min(l,a)),s.options.responsive&&s.options.responsive.length&&null!==s.options.responsive){for(i in n=null,s.breakpoints)s.breakpoints.hasOwnProperty(i)&&(!1===s.originalSettings.mobileFirst?o<s.breakpoints[i]&&(n=s.breakpoints[i]):o>s.breakpoints[i]&&(n=s.breakpoints[i]));null!==n?null!==s.activeBreakpoint&&n===s.activeBreakpoint&&!e||(s.activeBreakpoint=n,"unslick"===s.breakpointSettings[n]?s.unslick(n):(s.options=c.extend({},s.originalSettings,s.breakpointSettings[n]),!0===t&&(s.currentSlide=s.options.initialSlide),s.refresh(t)),r=n):null!==s.activeBreakpoint&&(s.activeBreakpoint=null,s.options=s.originalSettings,!0===t&&(s.currentSlide=s.options.initialSlide),s.refresh(t),r=n),t||!1===r||s.$slider.trigger("breakpoint",[s,r])}},r.prototype.changeSlide=function(t,e){var i,n,o=this,s=c(t.currentTarget);switch(s.is("a")&&t.preventDefault(),s.is("li")||(s=s.closest("li")),i=o.slideCount%o.options.slidesToScroll!=0?0:(o.slideCount-o.currentSlide)%o.options.slidesToScroll,t.data.message){case"previous":n=0==i?o.options.slidesToScroll:o.options.slidesToShow-i,o.slideCount>o.options.slidesToShow&&o.slideHandler(o.currentSlide-n,!1,e);break;case"next":n=0==i?o.options.slidesToScroll:i,o.slideCount>o.options.slidesToShow&&o.slideHandler(o.currentSlide+n,!1,e);break;case"index":var r=0===t.data.index?0:t.data.index||s.index()*o.options.slidesToScroll;o.slideHandler(o.checkNavigable(r),!1,e),s.children().trigger("focus");break;default:return}},r.prototype.checkNavigable=function(t){var e,i;if(i=0,t>(e=this.getNavigableIndexes())[e.length-1])t=e[e.length-1];else for(var n in e){if(t<e[n]){t=i;break}i=e[n]}return t},r.prototype.cleanUpEvents=function(){var t=this;t.options.dots&&null!==t.$dots&&(c("li",t.$dots).off("click.slick",t.changeSlide).off("mouseenter.slick",c.proxy(t.interrupt,t,!0)).off("mouseleave.slick",c.proxy(t.interrupt,t,!1)),!0===t.options.accessibility&&t.$dots.off("keydown.slick",t.keyHandler)),t.$slider.off("focus.slick blur.slick"),!0===t.options.arrows&&t.slideCount>t.options.slidesToShow&&(t.$prevArrow&&t.$prevArrow.off("click.slick",t.changeSlide),t.$nextArrow&&t.$nextArrow.off("click.slick",t.changeSlide),!0===t.options.accessibility&&(t.$prevArrow&&t.$prevArrow.off("keydown.slick",t.keyHandler),t.$nextArrow&&t.$nextArrow.off("keydown.slick",t.keyHandler))),t.$list.off("touchstart.slick mousedown.slick",t.swipeHandler),t.$list.off("touchmove.slick mousemove.slick",t.swipeHandler),t.$list.off("touchend.slick mouseup.slick",t.swipeHandler),t.$list.off("touchcancel.slick mouseleave.slick",t.swipeHandler),t.$list.off("click.slick",t.clickHandler),c(document).off(t.visibilityChange,t.visibility),t.cleanUpSlideEvents(),!0===t.options.accessibility&&t.$list.off("keydown.slick",t.keyHandler),!0===t.options.focusOnSelect&&c(t.$slideTrack).children().off("click.slick",t.selectHandler),c(window).off("orientationchange.slick.slick-"+t.instanceUid,t.orientationChange),c(window).off("resize.slick.slick-"+t.instanceUid,t.resize),c("[draggable!=true]",t.$slideTrack).off("dragstart",t.preventDefault),c(window).off("load.slick.slick-"+t.instanceUid,t.setPosition)},r.prototype.cleanUpSlideEvents=function(){var t=this;t.$list.off("mouseenter.slick",c.proxy(t.interrupt,t,!0)),t.$list.off("mouseleave.slick",c.proxy(t.interrupt,t,!1))},r.prototype.cleanUpRows=function(){var t;0<this.options.rows&&((t=this.$slides.children().children()).removeAttr("style"),this.$slider.empty().append(t))},r.prototype.clickHandler=function(t){!1===this.shouldClick&&(t.stopImmediatePropagation(),t.stopPropagation(),t.preventDefault())},r.prototype.destroy=function(t){var e=this;e.autoPlayClear(),e.touchObject={},e.cleanUpEvents(),c(".slick-cloned",e.$slider).detach(),e.$dots&&e.$dots.remove(),e.$prevArrow&&e.$prevArrow.length&&(e.$prevArrow.removeClass("slick-disabled slick-arrow slick-hidden").removeAttr("aria-hidden aria-disabled tabindex").css("display",""),e.htmlExpr.test(e.options.prevArrow)&&e.$prevArrow.remove()),e.$nextArrow&&e.$nextArrow.length&&(e.$nextArrow.removeClass("slick-disabled slick-arrow slick-hidden").removeAttr("aria-hidden aria-disabled tabindex").css("display",""),e.htmlExpr.test(e.options.nextArrow)&&e.$nextArrow.remove()),e.$slides&&(e.$slides.removeClass("slick-slide slick-active slick-center slick-visible slick-current").removeAttr("aria-hidden").removeAttr("data-slick-index").each(function(){c(this).attr("style",c(this).data("originalStyling"))}),e.$slideTrack.children(this.options.slide).detach(),e.$slideTrack.detach(),e.$list.detach(),e.$slider.append(e.$slides)),e.cleanUpRows(),e.$slider.removeClass("slick-slider"),e.$slider.removeClass("slick-initialized"),e.$slider.removeClass("slick-dotted"),e.unslicked=!0,t||e.$slider.trigger("destroy",[e])},r.prototype.disableTransition=function(t){var e={};e[this.transitionType]="",!1===this.options.fade?this.$slideTrack.css(e):this.$slides.eq(t).css(e)},r.prototype.fadeSlide=function(t,e){var i=this;!1===i.cssTransitions?(i.$slides.eq(t).css({zIndex:i.options.zIndex}),i.$slides.eq(t).animate({opacity:1},i.options.speed,i.options.easing,e)):(i.applyTransition(t),i.$slides.eq(t).css({opacity:1,zIndex:i.options.zIndex}),e&&setTimeout(function(){i.disableTransition(t),e.call()},i.options.speed))},r.prototype.fadeSlideOut=function(t){var e=this;!1===e.cssTransitions?e.$slides.eq(t).animate({opacity:0,zIndex:e.options.zIndex-2},e.options.speed,e.options.easing):(e.applyTransition(t),e.$slides.eq(t).css({opacity:0,zIndex:e.options.zIndex-2}))},r.prototype.filterSlides=r.prototype.slickFilter=function(t){var e=this;null!==t&&(e.$slidesCache=e.$slides,e.unload(),e.$slideTrack.children(this.options.slide).detach(),e.$slidesCache.filter(t).appendTo(e.$slideTrack),e.reinit())},r.prototype.focusHandler=function(){var i=this;i.$slider.off("focus.slick blur.slick").on("focus.slick blur.slick","*",function(t){t.stopImmediatePropagation();var e=c(this);setTimeout(function(){i.options.pauseOnFocus&&(i.focussed=e.is(":focus"),i.autoPlay())},0)})},r.prototype.getCurrent=r.prototype.slickCurrentSlide=function(){return this.currentSlide},r.prototype.getDotCount=function(){var t=this,e=0,i=0,n=0;if(!0===t.options.infinite)if(t.slideCount<=t.options.slidesToShow)++n;else for(;e<t.slideCount;)++n,e=i+t.options.slidesToScroll,i+=t.options.slidesToScroll<=t.options.slidesToShow?t.options.slidesToScroll:t.options.slidesToShow;else if(!0===t.options.centerMode)n=t.slideCount;else if(t.options.asNavFor)for(;e<t.slideCount;)++n,e=i+t.options.slidesToScroll,i+=t.options.slidesToScroll<=t.options.slidesToShow?t.options.slidesToScroll:t.options.slidesToShow;else n=1+Math.ceil((t.slideCount-t.options.slidesToShow)/t.options.slidesToScroll);return n-1},r.prototype.getLeft=function(t){var e,i,n,o,s=this,r=0;return s.slideOffset=0,i=s.$slides.first().outerHeight(!0),!0===s.options.infinite?(s.slideCount>s.options.slidesToShow&&(s.slideOffset=s.slideWidth*s.options.slidesToShow*-1,o=-1,!0===s.options.vertical&&!0===s.options.centerMode&&(2===s.options.slidesToShow?o=-1.5:1===s.options.slidesToShow&&(o=-2)),r=i*s.options.slidesToShow*o),s.slideCount%s.options.slidesToScroll!=0&&t+s.options.slidesToScroll>s.slideCount&&s.slideCount>s.options.slidesToShow&&(r=t>s.slideCount?(s.slideOffset=(s.options.slidesToShow-(t-s.slideCount))*s.slideWidth*-1,(s.options.slidesToShow-(t-s.slideCount))*i*-1):(s.slideOffset=s.slideCount%s.options.slidesToScroll*s.slideWidth*-1,s.slideCount%s.options.slidesToScroll*i*-1))):t+s.options.slidesToShow>s.slideCount&&(s.slideOffset=(t+s.options.slidesToShow-s.slideCount)*s.slideWidth,r=(t+s.options.slidesToShow-s.slideCount)*i),s.slideCount<=s.options.slidesToShow&&(r=s.slideOffset=0),!0===s.options.centerMode&&s.slideCount<=s.options.slidesToShow?s.slideOffset=s.slideWidth*Math.floor(s.options.slidesToShow)/2-s.slideWidth*s.slideCount/2:!0===s.options.centerMode&&!0===s.options.infinite?s.slideOffset+=s.slideWidth*Math.floor(s.options.slidesToShow/2)-s.slideWidth:!0===s.options.centerMode&&(s.slideOffset=0,s.slideOffset+=s.slideWidth*Math.floor(s.options.slidesToShow/2)),e=!1===s.options.vertical?t*s.slideWidth*-1+s.slideOffset:t*i*-1+r,!0===s.options.variableWidth&&(n=s.slideCount<=s.options.slidesToShow||!1===s.options.infinite?s.$slideTrack.children(".slick-slide").eq(t):s.$slideTrack.children(".slick-slide").eq(t+s.options.slidesToShow),e=!0===s.options.rtl?n[0]?-1*(s.$slideTrack.width()-n[0].offsetLeft-n.width()):0:n[0]?-1*n[0].offsetLeft:0,!0===s.options.centerMode&&(n=s.slideCount<=s.options.slidesToShow||!1===s.options.infinite?s.$slideTrack.children(".slick-slide").eq(t):s.$slideTrack.children(".slick-slide").eq(t+s.options.slidesToShow+1),e=!0===s.options.rtl?n[0]?-1*(s.$slideTrack.width()-n[0].offsetLeft-n.width()):0:n[0]?-1*n[0].offsetLeft:0,e+=(s.$list.width()-n.outerWidth())/2)),e},r.prototype.getOption=r.prototype.slickGetOption=function(t){return this.options[t]},r.prototype.getNavigableIndexes=function(){var t,e=this,i=0,n=0,o=[];for(t=!1===e.options.infinite?e.slideCount:(i=-1*e.options.slidesToScroll,n=-1*e.options.slidesToScroll,2*e.slideCount);i<t;)o.push(i),i=n+e.options.slidesToScroll,n+=e.options.slidesToScroll<=e.options.slidesToShow?e.options.slidesToScroll:e.options.slidesToShow;return o},r.prototype.getSlick=function(){return this},r.prototype.getSlideCount=function(){var i,n,o=this;return n=!0===o.options.centerMode?o.slideWidth*Math.floor(o.options.slidesToShow/2):0,!0===o.options.swipeToSlide?(o.$slideTrack.find(".slick-slide").each(function(t,e){if(e.offsetLeft-n+c(e).outerWidth()/2>-1*o.swipeLeft)return i=e,!1}),Math.abs(c(i).attr("data-slick-index")-o.currentSlide)||1):o.options.slidesToScroll},r.prototype.goTo=r.prototype.slickGoTo=function(t,e){this.changeSlide({data:{message:"index",index:parseInt(t)}},e)},r.prototype.init=function(t){var e=this;c(e.$slider).hasClass("slick-initialized")||(c(e.$slider).addClass("slick-initialized"),e.buildRows(),e.buildOut(),e.setProps(),e.startLoad(),e.loadSlider(),e.initializeEvents(),e.updateArrows(),e.updateDots(),e.checkResponsive(!0),e.focusHandler()),t&&e.$slider.trigger("init",[e]),!0===e.options.accessibility&&e.initADA(),e.options.autoplay&&(e.paused=!1,e.autoPlay())},r.prototype.initADA=function(){var n=this,i=Math.ceil(n.slideCount/n.options.slidesToShow),o=n.getNavigableIndexes().filter(function(t){return 0<=t&&t<n.slideCount});n.$slides.add(n.$slideTrack.find(".slick-cloned")).attr({"aria-hidden":"true",tabindex:"-1"}).find("a, input, button, select").attr({tabindex:"-1"}),null!==n.$dots&&(n.$slides.not(n.$slideTrack.find(".slick-cloned")).each(function(t){var e=o.indexOf(t);if(c(this).attr({role:"tabpanel",id:"slick-slide"+n.instanceUid+t,tabindex:-1}),-1!==e){var i="slick-slide-control"+n.instanceUid+e;c("#"+i).length&&c(this).attr({"aria-describedby":i})}}),n.$dots.attr("role","tablist").find("li").each(function(t){var e=o[t];c(this).attr({role:"presentation"}),c(this).find("button").first().attr({role:"tab",id:"slick-slide-control"+n.instanceUid+t,"aria-controls":"slick-slide"+n.instanceUid+e,"aria-label":t+1+" of "+i,"aria-selected":null,tabindex:"-1"})}).eq(n.currentSlide).find("button").attr({"aria-selected":"true",tabindex:"0"}).end());for(var t=n.currentSlide,e=t+n.options.slidesToShow;t<e;t++)n.options.focusOnChange?n.$slides.eq(t).attr({tabindex:"0"}):n.$slides.eq(t).removeAttr("tabindex");n.activateADA()},r.prototype.initArrowEvents=function(){var t=this;!0===t.options.arrows&&t.slideCount>t.options.slidesToShow&&(t.$prevArrow.off("click.slick").on("click.slick",{message:"previous"},t.changeSlide),t.$nextArrow.off("click.slick").on("click.slick",{message:"next"},t.changeSlide),!0===t.options.accessibility&&(t.$prevArrow.on("keydown.slick",t.keyHandler),t.$nextArrow.on("keydown.slick",t.keyHandler)))},r.prototype.initDotEvents=function(){var t=this;!0===t.options.dots&&t.slideCount>t.options.slidesToShow&&(c("li",t.$dots).on("click.slick",{message:"index"},t.changeSlide),!0===t.options.accessibility&&t.$dots.on("keydown.slick",t.keyHandler)),!0===t.options.dots&&!0===t.options.pauseOnDotsHover&&t.slideCount>t.options.slidesToShow&&c("li",t.$dots).on("mouseenter.slick",c.proxy(t.interrupt,t,!0)).on("mouseleave.slick",c.proxy(t.interrupt,t,!1))},r.prototype.initSlideEvents=function(){var t=this;t.options.pauseOnHover&&(t.$list.on("mouseenter.slick",c.proxy(t.interrupt,t,!0)),t.$list.on("mouseleave.slick",c.proxy(t.interrupt,t,!1)))},r.prototype.initializeEvents=function(){var t=this;t.initArrowEvents(),t.initDotEvents(),t.initSlideEvents(),t.$list.on("touchstart.slick mousedown.slick",{action:"start"},t.swipeHandler),t.$list.on("touchmove.slick mousemove.slick",{action:"move"},t.swipeHandler),t.$list.on("touchend.slick mouseup.slick",{action:"end"},t.swipeHandler),t.$list.on("touchcancel.slick mouseleave.slick",{action:"end"},t.swipeHandler),t.$list.on("click.slick",t.clickHandler),c(document).on(t.visibilityChange,c.proxy(t.visibility,t)),!0===t.options.accessibility&&t.$list.on("keydown.slick",t.keyHandler),!0===t.options.focusOnSelect&&c(t.$slideTrack).children().on("click.slick",t.selectHandler),c(window).on("orientationchange.slick.slick-"+t.instanceUid,c.proxy(t.orientationChange,t)),c(window).on("resize.slick.slick-"+t.instanceUid,c.proxy(t.resize,t)),c("[draggable!=true]",t.$slideTrack).on("dragstart",t.preventDefault),c(window).on("load.slick.slick-"+t.instanceUid,t.setPosition),c(t.setPosition)},r.prototype.initUI=function(){var t=this;!0===t.options.arrows&&t.slideCount>t.options.slidesToShow&&(t.$prevArrow.show(),t.$nextArrow.show()),!0===t.options.dots&&t.slideCount>t.options.slidesToShow&&t.$dots.show()},r.prototype.keyHandler=function(t){var e=this;t.target.tagName.match("TEXTAREA|INPUT|SELECT")||(37===t.keyCode&&!0===e.options.accessibility?e.changeSlide({data:{message:!0===e.options.rtl?"next":"previous"}}):39===t.keyCode&&!0===e.options.accessibility&&e.changeSlide({data:{message:!0===e.options.rtl?"previous":"next"}}))},r.prototype.lazyLoad=function(){var t,e,i,s=this;function n(t){c("img[data-lazy]",t).each(function(){var t=c(this),e=c(this).attr("data-lazy"),i=c(this).attr("data-srcset"),n=c(this).attr("data-sizes")||s.$slider.attr("data-sizes"),o=document.createElement("img");o.onload=function(){t.animate({opacity:0},100,function(){i&&(t.attr("srcset",i),n&&t.attr("sizes",n)),t.attr("src",e).animate({opacity:1},200,function(){t.removeAttr("data-lazy data-srcset data-sizes").removeClass("slick-loading")}),s.$slider.trigger("lazyLoaded",[s,t,e])})},o.onerror=function(){t.removeAttr("data-lazy").removeClass("slick-loading").addClass("slick-lazyload-error"),s.$slider.trigger("lazyLoadError",[s,t,e])},o.src=e})}if(!0===s.options.centerMode?i=!0===s.options.infinite?(e=s.currentSlide+(s.options.slidesToShow/2+1))+s.options.slidesToShow+2:(e=Math.max(0,s.currentSlide-(s.options.slidesToShow/2+1)),s.options.slidesToShow/2+1+2+s.currentSlide):(e=s.options.infinite?s.options.slidesToShow+s.currentSlide:s.currentSlide,i=Math.ceil(e+s.options.slidesToShow),!0===s.options.fade&&(0<e&&e--,i<=s.slideCount&&i++)),t=s.$slider.find(".slick-slide").slice(e,i),"anticipated"===s.options.lazyLoad)for(var o=e-1,r=i,a=s.$slider.find(".slick-slide"),l=0;l<s.options.slidesToScroll;l++)o<0&&(o=s.slideCount-1),t=(t=t.add(a.eq(o))).add(a.eq(r)),o--,r++;n(t),s.slideCount<=s.options.slidesToShow?n(s.$slider.find(".slick-slide")):s.currentSlide>=s.slideCount-s.options.slidesToShow?n(s.$slider.find(".slick-cloned").slice(0,s.options.slidesToShow)):0===s.currentSlide&&n(s.$slider.find(".slick-cloned").slice(-1*s.options.slidesToShow))},r.prototype.loadSlider=function(){var t=this;t.setPosition(),t.$slideTrack.css({opacity:1}),t.$slider.removeClass("slick-loading"),t.initUI(),"progressive"===t.options.lazyLoad&&t.progressiveLazyLoad()},r.prototype.next=r.prototype.slickNext=function(){this.changeSlide({data:{message:"next"}})},r.prototype.orientationChange=function(){this.checkResponsive(),this.setPosition()},r.prototype.pause=r.prototype.slickPause=function(){this.autoPlayClear(),this.paused=!0},r.prototype.play=r.prototype.slickPlay=function(){var t=this;t.autoPlay(),t.options.autoplay=!0,t.paused=!1,t.focussed=!1,t.interrupted=!1},r.prototype.postSlide=function(t){var e=this;e.unslicked||(e.$slider.trigger("afterChange",[e,t]),e.animating=!1,e.slideCount>e.options.slidesToShow&&e.setPosition(),e.swipeLeft=null,e.options.autoplay&&e.autoPlay(),!0===e.options.accessibility&&(e.initADA(),e.options.focusOnChange&&c(e.$slides.get(e.currentSlide)).attr("tabindex",0).focus()))},r.prototype.prev=r.prototype.slickPrev=function(){this.changeSlide({data:{message:"previous"}})},r.prototype.preventDefault=function(t){t.preventDefault()},r.prototype.progressiveLazyLoad=function(t){t=t||1;var e,i,n,o,s,r=this,a=c("img[data-lazy]",r.$slider);a.length?(e=a.first(),i=e.attr("data-lazy"),n=e.attr("data-srcset"),o=e.attr("data-sizes")||r.$slider.attr("data-sizes"),(s=document.createElement("img")).onload=function(){n&&(e.attr("srcset",n),o&&e.attr("sizes",o)),e.attr("src",i).removeAttr("data-lazy data-srcset data-sizes").removeClass("slick-loading"),!0===r.options.adaptiveHeight&&r.setPosition(),r.$slider.trigger("lazyLoaded",[r,e,i]),r.progressiveLazyLoad()},s.onerror=function(){t<3?setTimeout(function(){r.progressiveLazyLoad(t+1)},500):(e.removeAttr("data-lazy").removeClass("slick-loading").addClass("slick-lazyload-error"),r.$slider.trigger("lazyLoadError",[r,e,i]),r.progressiveLazyLoad())},s.src=i):r.$slider.trigger("allImagesLoaded",[r])},r.prototype.refresh=function(t){var e,i,n=this;i=n.slideCount-n.options.slidesToShow,!n.options.infinite&&n.currentSlide>i&&(n.currentSlide=i),n.slideCount<=n.options.slidesToShow&&(n.currentSlide=0),e=n.currentSlide,n.destroy(!0),c.extend(n,n.initials,{currentSlide:e}),n.init(),t||n.changeSlide({data:{message:"index",index:e}},!1)},r.prototype.registerBreakpoints=function(){var t,e,i,n=this,o=n.options.responsive||null;if("array"===c.type(o)&&o.length){for(t in n.respondTo=n.options.respondTo||"window",o)if(i=n.breakpoints.length-1,o.hasOwnProperty(t)){for(e=o[t].breakpoint;0<=i;)n.breakpoints[i]&&n.breakpoints[i]===e&&n.breakpoints.splice(i,1),i--;n.breakpoints.push(e),n.breakpointSettings[e]=o[t].settings}n.breakpoints.sort(function(t,e){return n.options.mobileFirst?t-e:e-t})}},r.prototype.reinit=function(){var t=this;t.$slides=t.$slideTrack.children(t.options.slide).addClass("slick-slide"),t.slideCount=t.$slides.length,t.currentSlide>=t.slideCount&&0!==t.currentSlide&&(t.currentSlide=t.currentSlide-t.options.slidesToScroll),t.slideCount<=t.options.slidesToShow&&(t.currentSlide=0),t.registerBreakpoints(),t.setProps(),t.setupInfinite(),t.buildArrows(),t.updateArrows(),t.initArrowEvents(),t.buildDots(),t.updateDots(),t.initDotEvents(),t.cleanUpSlideEvents(),t.initSlideEvents(),t.checkResponsive(!1,!0),!0===t.options.focusOnSelect&&c(t.$slideTrack).children().on("click.slick",t.selectHandler),t.setSlideClasses("number"==typeof t.currentSlide?t.currentSlide:0),t.setPosition(),t.focusHandler(),t.paused=!t.options.autoplay,t.autoPlay(),t.$slider.trigger("reInit",[t])},r.prototype.resize=function(){var t=this;c(window).width()!==t.windowWidth&&(clearTimeout(t.windowDelay),t.windowDelay=window.setTimeout(function(){t.windowWidth=c(window).width(),t.checkResponsive(),t.unslicked||t.setPosition()},50))},r.prototype.removeSlide=r.prototype.slickRemove=function(t,e,i){var n=this;if(t="boolean"==typeof t?!0===(e=t)?0:n.slideCount-1:!0===e?--t:t,n.slideCount<1||t<0||t>n.slideCount-1)return!1;n.unload(),!0===i?n.$slideTrack.children().remove():n.$slideTrack.children(this.options.slide).eq(t).remove(),n.$slides=n.$slideTrack.children(this.options.slide),n.$slideTrack.children(this.options.slide).detach(),n.$slideTrack.append(n.$slides),n.$slidesCache=n.$slides,n.reinit()},r.prototype.setCSS=function(t){var e,i,n=this,o={};!0===n.options.rtl&&(t=-t),e="left"==n.positionProp?Math.ceil(t)+"px":"0px",i="top"==n.positionProp?Math.ceil(t)+"px":"0px",o[n.positionProp]=t,!1===n.transformsEnabled||(!(o={})===n.cssTransitions?o[n.animType]="translate("+e+", "+i+")":o[n.animType]="translate3d("+e+", "+i+", 0px)"),n.$slideTrack.css(o)},r.prototype.setDimensions=function(){var t=this;!1===t.options.vertical?!0===t.options.centerMode&&t.$list.css({padding:"0px "+t.options.centerPadding}):(t.$list.height(t.$slides.first().outerHeight(!0)*t.options.slidesToShow),!0===t.options.centerMode&&t.$list.css({padding:t.options.centerPadding+" 0px"})),t.listWidth=t.$list.width(),t.listHeight=t.$list.height(),!1===t.options.vertical&&!1===t.options.variableWidth?(t.slideWidth=Math.ceil(t.listWidth/t.options.slidesToShow),t.$slideTrack.width(Math.ceil(t.slideWidth*t.$slideTrack.children(".slick-slide").length))):!0===t.options.variableWidth?t.$slideTrack.width(5e3*t.slideCount):(t.slideWidth=Math.ceil(t.listWidth),t.$slideTrack.height(Math.ceil(t.$slides.first().outerHeight(!0)*t.$slideTrack.children(".slick-slide").length)));var e=t.$slides.first().outerWidth(!0)-t.$slides.first().width();!1===t.options.variableWidth&&t.$slideTrack.children(".slick-slide").width(t.slideWidth-e)},r.prototype.setFade=function(){var i,n=this;n.$slides.each(function(t,e){i=n.slideWidth*t*-1,!0===n.options.rtl?c(e).css({position:"relative",right:i,top:0,zIndex:n.options.zIndex-2,opacity:0}):c(e).css({position:"relative",left:i,top:0,zIndex:n.options.zIndex-2,opacity:0})}),n.$slides.eq(n.currentSlide).css({zIndex:n.options.zIndex-1,opacity:1})},r.prototype.setHeight=function(){var t=this;if(1===t.options.slidesToShow&&!0===t.options.adaptiveHeight&&!1===t.options.vertical){var e=t.$slides.eq(t.currentSlide).outerHeight(!0);t.$list.css("height",e)}},r.prototype.setOption=r.prototype.slickSetOption=function(){var t,e,i,n,o,s=this,r=!1;if("object"===c.type(arguments[0])?(i=arguments[0],r=arguments[1],o="multiple"):"string"===c.type(arguments[0])&&(n=arguments[1],r=arguments[2],"responsive"===(i=arguments[0])&&"array"===c.type(arguments[1])?o="responsive":void 0!==arguments[1]&&(o="single")),"single"===o)s.options[i]=n;else if("multiple"===o)c.each(i,function(t,e){s.options[t]=e});else if("responsive"===o)for(e in n)if("array"!==c.type(s.options.responsive))s.options.responsive=[n[e]];else{for(t=s.options.responsive.length-1;0<=t;)s.options.responsive[t].breakpoint===n[e].breakpoint&&s.options.responsive.splice(t,1),t--;s.options.responsive.push(n[e])}r&&(s.unload(),s.reinit())},r.prototype.setPosition=function(){var t=this;t.setDimensions(),t.setHeight(),!1===t.options.fade?t.setCSS(t.getLeft(t.currentSlide)):t.setFade(),t.$slider.trigger("setPosition",[t])},r.prototype.setProps=function(){var t=this,e=document.body.style;t.positionProp=!0===t.options.vertical?"top":"left","top"===t.positionProp?t.$slider.addClass("slick-vertical"):t.$slider.removeClass("slick-vertical"),void 0===e.WebkitTransition&&void 0===e.MozTransition&&void 0===e.msTransition||!0===t.options.useCSS&&(t.cssTransitions=!0),t.options.fade&&("number"==typeof t.options.zIndex?t.options.zIndex<3&&(t.options.zIndex=3):t.options.zIndex=t.defaults.zIndex),void 0!==e.OTransform&&(t.animType="OTransform",t.transformType="-o-transform",t.transitionType="OTransition",void 0===e.perspectiveProperty&&void 0===e.webkitPerspective&&(t.animType=!1)),void 0!==e.MozTransform&&(t.animType="MozTransform",t.transformType="-moz-transform",t.transitionType="MozTransition",void 0===e.perspectiveProperty&&void 0===e.MozPerspective&&(t.animType=!1)),void 0!==e.webkitTransform&&(t.animType="webkitTransform",t.transformType="-webkit-transform",t.transitionType="webkitTransition",void 0===e.perspectiveProperty&&void 0===e.webkitPerspective&&(t.animType=!1)),void 0!==e.msTransform&&(t.animType="msTransform",t.transformType="-ms-transform",t.transitionType="msTransition",void 0===e.msTransform&&(t.animType=!1)),void 0!==e.transform&&!1!==t.animType&&(t.animType="transform",t.transformType="transform",t.transitionType="transition"),t.transformsEnabled=t.options.useTransform&&null!==t.animType&&!1!==t.animType},r.prototype.setSlideClasses=function(t){var e,i,n,o,s=this;if(i=s.$slider.find(".slick-slide").removeClass("slick-active slick-center slick-current").attr("aria-hidden","true"),s.$slides.eq(t).addClass("slick-current"),!0===s.options.centerMode){var r=s.options.slidesToShow%2==0?1:0;e=Math.floor(s.options.slidesToShow/2),!0===s.options.infinite&&(e<=t&&t<=s.slideCount-1-e?s.$slides.slice(t-e+r,t+e+1).addClass("slick-active").attr("aria-hidden","false"):(n=s.options.slidesToShow+t,i.slice(n-e+1+r,n+e+2).addClass("slick-active").attr("aria-hidden","false")),0===t?i.eq(i.length-1-s.options.slidesToShow).addClass("slick-center"):t===s.slideCount-1&&i.eq(s.options.slidesToShow).addClass("slick-center")),s.$slides.eq(t).addClass("slick-center")}else 0<=t&&t<=s.slideCount-s.options.slidesToShow?s.$slides.slice(t,t+s.options.slidesToShow).addClass("slick-active").attr("aria-hidden","false"):i.length<=s.options.slidesToShow?i.addClass("slick-active").attr("aria-hidden","false"):(o=s.slideCount%s.options.slidesToShow,n=!0===s.options.infinite?s.options.slidesToShow+t:t,s.options.slidesToShow==s.options.slidesToScroll&&s.slideCount-t<s.options.slidesToShow?i.slice(n-(s.options.slidesToShow-o),n+o).addClass("slick-active").attr("aria-hidden","false"):i.slice(n,n+s.options.slidesToShow).addClass("slick-active").attr("aria-hidden","false"));"ondemand"!==s.options.lazyLoad&&"anticipated"!==s.options.lazyLoad||s.lazyLoad()},r.prototype.setupInfinite=function(){var t,e,i,n=this;if(!0===n.options.fade&&(n.options.centerMode=!1),!0===n.options.infinite&&!1===n.options.fade&&(e=null,n.slideCount>n.options.slidesToShow)){for(i=!0===n.options.centerMode?n.options.slidesToShow+1:n.options.slidesToShow,t=n.slideCount;t>n.slideCount-i;--t)e=t-1,c(n.$slides[e]).clone(!0).attr("id","").attr("data-slick-index",e-n.slideCount).prependTo(n.$slideTrack).addClass("slick-cloned");for(t=0;t<i+n.slideCount;t+=1)e=t,c(n.$slides[e]).clone(!0).attr("id","").attr("data-slick-index",e+n.slideCount).appendTo(n.$slideTrack).addClass("slick-cloned");n.$slideTrack.find(".slick-cloned").find("[id]").each(function(){c(this).attr("id","")})}},r.prototype.interrupt=function(t){t||this.autoPlay(),this.interrupted=t},r.prototype.selectHandler=function(t){var e=c(t.target).is(".slick-slide")?c(t.target):c(t.target).parents(".slick-slide"),i=parseInt(e.attr("data-slick-index"));i=i||0,this.slideCount<=this.options.slidesToShow?this.slideHandler(i,!1,!0):this.slideHandler(i)},r.prototype.slideHandler=function(t,e,i){var n,o,s,r,a,l,c=this;if(e=e||!1,!(!0===c.animating&&!0===c.options.waitForAnimate||!0===c.options.fade&&c.currentSlide===t))if(!1===e&&c.asNavFor(t),n=t,a=c.getLeft(n),r=c.getLeft(c.currentSlide),c.currentLeft=null===c.swipeLeft?r:c.swipeLeft,!1===c.options.infinite&&!1===c.options.centerMode&&(t<0||t>c.getDotCount()*c.options.slidesToScroll))!1===c.options.fade&&(n=c.currentSlide,!0!==i&&c.slideCount>c.options.slidesToShow?c.animateSlide(r,function(){c.postSlide(n)}):c.postSlide(n));else if(!1===c.options.infinite&&!0===c.options.centerMode&&(t<0||t>c.slideCount-c.options.slidesToScroll))!1===c.options.fade&&(n=c.currentSlide,!0!==i&&c.slideCount>c.options.slidesToShow?c.animateSlide(r,function(){c.postSlide(n)}):c.postSlide(n));else{if(c.options.autoplay&&clearInterval(c.autoPlayTimer),o=n<0?c.slideCount%c.options.slidesToScroll!=0?c.slideCount-c.slideCount%c.options.slidesToScroll:c.slideCount+n:n>=c.slideCount?c.slideCount%c.options.slidesToScroll!=0?0:n-c.slideCount:n,c.animating=!0,c.$slider.trigger("beforeChange",[c,c.currentSlide,o]),s=c.currentSlide,c.currentSlide=o,c.setSlideClasses(c.currentSlide),c.options.asNavFor&&(l=(l=c.getNavTarget()).slick("getSlick")).slideCount<=l.options.slidesToShow&&l.setSlideClasses(c.currentSlide),c.updateDots(),c.updateArrows(),!0===c.options.fade)return!0!==i?(c.fadeSlideOut(s),c.fadeSlide(o,function(){c.postSlide(o)})):c.postSlide(o),void c.animateHeight();!0!==i&&c.slideCount>c.options.slidesToShow?c.animateSlide(a,function(){c.postSlide(o)}):c.postSlide(o)}},r.prototype.startLoad=function(){var t=this;!0===t.options.arrows&&t.slideCount>t.options.slidesToShow&&(t.$prevArrow.hide(),t.$nextArrow.hide()),!0===t.options.dots&&t.slideCount>t.options.slidesToShow&&t.$dots.hide(),t.$slider.addClass("slick-loading")},r.prototype.swipeDirection=function(){var t,e,i,n,o=this;return t=o.touchObject.startX-o.touchObject.curX,e=o.touchObject.startY-o.touchObject.curY,i=Math.atan2(e,t),(n=Math.round(180*i/Math.PI))<0&&(n=360-Math.abs(n)),n<=45&&0<=n||n<=360&&315<=n?!1===o.options.rtl?"left":"right":135<=n&&n<=225?!1===o.options.rtl?"right":"left":!0===o.options.verticalSwiping?35<=n&&n<=135?"down":"up":"vertical"},r.prototype.swipeEnd=function(t){var e,i,n=this;if(n.dragging=!1,n.swiping=!1,n.scrolling)return n.scrolling=!1;if(n.interrupted=!1,n.shouldClick=!(10<n.touchObject.swipeLength),void 0===n.touchObject.curX)return!1;if(!0===n.touchObject.edgeHit&&n.$slider.trigger("edge",[n,n.swipeDirection()]),n.touchObject.swipeLength>=n.touchObject.minSwipe){switch(i=n.swipeDirection()){case"left":case"down":e=n.options.swipeToSlide?n.checkNavigable(n.currentSlide+n.getSlideCount()):n.currentSlide+n.getSlideCount(),n.currentDirection=0;break;case"right":case"up":e=n.options.swipeToSlide?n.checkNavigable(n.currentSlide-n.getSlideCount()):n.currentSlide-n.getSlideCount(),n.currentDirection=1}"vertical"!=i&&(n.slideHandler(e),n.touchObject={},n.$slider.trigger("swipe",[n,i]))}else n.touchObject.startX!==n.touchObject.curX&&(n.slideHandler(n.currentSlide),n.touchObject={})},r.prototype.swipeHandler=function(t){var e=this;if(!(!1===e.options.swipe||"ontouchend"in document&&!1===e.options.swipe||!1===e.options.draggable&&-1!==t.type.indexOf("mouse")))switch(e.touchObject.fingerCount=t.originalEvent&&void 0!==t.originalEvent.touches?t.originalEvent.touches.length:1,e.touchObject.minSwipe=e.listWidth/e.options.touchThreshold,!0===e.options.verticalSwiping&&(e.touchObject.minSwipe=e.listHeight/e.options.touchThreshold),t.data.action){case"start":e.swipeStart(t);break;case"move":e.swipeMove(t);break;case"end":e.swipeEnd(t)}},r.prototype.swipeMove=function(t){var e,i,n,o,s,r,a=this;return s=void 0!==t.originalEvent?t.originalEvent.touches:null,!(!a.dragging||a.scrolling||s&&1!==s.length)&&(e=a.getLeft(a.currentSlide),a.touchObject.curX=void 0!==s?s[0].pageX:t.clientX,a.touchObject.curY=void 0!==s?s[0].pageY:t.clientY,a.touchObject.swipeLength=Math.round(Math.sqrt(Math.pow(a.touchObject.curX-a.touchObject.startX,2))),r=Math.round(Math.sqrt(Math.pow(a.touchObject.curY-a.touchObject.startY,2))),!a.options.verticalSwiping&&!a.swiping&&4<r?!(a.scrolling=!0):(!0===a.options.verticalSwiping&&(a.touchObject.swipeLength=r),i=a.swipeDirection(),void 0!==t.originalEvent&&4<a.touchObject.swipeLength&&(a.swiping=!0,t.preventDefault()),o=(!1===a.options.rtl?1:-1)*(a.touchObject.curX>a.touchObject.startX?1:-1),!0===a.options.verticalSwiping&&(o=a.touchObject.curY>a.touchObject.startY?1:-1),n=a.touchObject.swipeLength,(a.touchObject.edgeHit=!1)===a.options.infinite&&(0===a.currentSlide&&"right"===i||a.currentSlide>=a.getDotCount()&&"left"===i)&&(n=a.touchObject.swipeLength*a.options.edgeFriction,a.touchObject.edgeHit=!0),!1===a.options.vertical?a.swipeLeft=e+n*o:a.swipeLeft=e+n*(a.$list.height()/a.listWidth)*o,!0===a.options.verticalSwiping&&(a.swipeLeft=e+n*o),!0!==a.options.fade&&!1!==a.options.touchMove&&(!0===a.animating?(a.swipeLeft=null,!1):void a.setCSS(a.swipeLeft))))},r.prototype.swipeStart=function(t){var e,i=this;if(i.interrupted=!0,1!==i.touchObject.fingerCount||i.slideCount<=i.options.slidesToShow)return!(i.touchObject={});void 0!==t.originalEvent&&void 0!==t.originalEvent.touches&&(e=t.originalEvent.touches[0]),i.touchObject.startX=i.touchObject.curX=void 0!==e?e.pageX:t.clientX,i.touchObject.startY=i.touchObject.curY=void 0!==e?e.pageY:t.clientY,i.dragging=!0},r.prototype.unfilterSlides=r.prototype.slickUnfilter=function(){var t=this;null!==t.$slidesCache&&(t.unload(),t.$slideTrack.children(this.options.slide).detach(),t.$slidesCache.appendTo(t.$slideTrack),t.reinit())},r.prototype.unload=function(){var t=this;c(".slick-cloned",t.$slider).remove(),t.$dots&&t.$dots.remove(),t.$prevArrow&&t.htmlExpr.test(t.options.prevArrow)&&t.$prevArrow.remove(),t.$nextArrow&&t.htmlExpr.test(t.options.nextArrow)&&t.$nextArrow.remove(),t.$slides.removeClass("slick-slide slick-active slick-visible slick-current").attr("aria-hidden","true").css("width","")},r.prototype.unslick=function(t){this.$slider.trigger("unslick",[this,t]),this.destroy()},r.prototype.updateArrows=function(){var t=this;Math.floor(t.options.slidesToShow/2),!0===t.options.arrows&&t.slideCount>t.options.slidesToShow&&!t.options.infinite&&(t.$prevArrow.removeClass("slick-disabled").attr("aria-disabled","false"),t.$nextArrow.removeClass("slick-disabled").attr("aria-disabled","false"),0===t.currentSlide?(t.$prevArrow.addClass("slick-disabled").attr("aria-disabled","true"),t.$nextArrow.removeClass("slick-disabled").attr("aria-disabled","false")):(t.currentSlide>=t.slideCount-t.options.slidesToShow&&!1===t.options.centerMode||t.currentSlide>=t.slideCount-1&&!0===t.options.centerMode)&&(t.$nextArrow.addClass("slick-disabled").attr("aria-disabled","true"),t.$prevArrow.removeClass("slick-disabled").attr("aria-disabled","false")))},r.prototype.updateDots=function(){var t=this;null!==t.$dots&&(t.$dots.find("li").removeClass("slick-active").end(),t.$dots.find("li").eq(Math.floor(t.currentSlide/t.options.slidesToScroll)).addClass("slick-active"))},r.prototype.visibility=function(){this.options.autoplay&&(document[this.hidden]?this.interrupted=!0:this.interrupted=!1)},c.fn.slick=function(){var t,e,i=this,n=arguments[0],o=Array.prototype.slice.call(arguments,1),s=i.length;for(t=0;t<s;t++)if("object"==typeof n||void 0===n?i[t].slick=new r(i[t],n):e=i[t].slick[n].apply(i[t].slick,o),void 0!==e)return e;return i}}),function(h){"use strict";var p=null,f=null;!function(){var t,o,s,r,a,e=["webkit","moz","o","ms"],i=h.document.createElement("div"),n=-1;for(n=0;n<e.length&&!h.requestAnimationFrame;n++)h.requestAnimationFrame=h[e[n]+"RequestAnimationFrame"];function l(){}void 0===i.nextElementSibling&&Object.defineProperty(h.Element.prototype,"nextElementSibling",{get:function(){for(var t=this.nextSibling;t;){if(1===t.nodeType)return t;t=t.nextSibling}return null}}),(t=h.Element.prototype).matches=t.matches||t.machesSelector||t.mozMatchesSelector||t.msMatchesSelector||t.oMatchesSelector||t.webkitMatchesSelector||function(t){return-1<Array.prototype.indexOf.call(this.parentElement.querySelectorAll(t),this)},Object.keys||(Object.keys=(a=Object.prototype.hasOwnProperty,o=!{toString:null}.propertyIsEnumerable("toString"),r=(s=["toString","toLocaleString","valueOf","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","constructor"]).length,function(t){var e=[],i="",n=-1;if("object"!=typeof t&&("function"!=typeof t||null===t))throw new TypeError("Object.keys called on non-object");for(i in t)a.call(t,i)&&e.push(i);if(o)for(n=0;n<r;n++)a.call(t,s[n])&&e.push(s[n]);return e})),Array.isArray||(Array.isArray=function(t){return"[object Array]"===Object.prototype.toString.call(t)}),"function"!=typeof Object.create&&(Object.create=function(t,e){if(t!==Object(t)&&null!==t)throw TypeError("Argument must be an object, or null");l.prototype=t||{};var i=new l;return l.prototype=null,void 0!==e&&Object.defineProperties(i,e),null===t&&(i.__proto__=null),i}),String.prototype.trim||(String.prototype.trim=function(){return this.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,"")}),Array.prototype.indexOf||(Array.prototype.indexOf=function(t){var e,i,n,o;if(null===this)throw new TypeError;if(0==(o=(n=Object(this)).length>>>0))return-1;if(e=0,1<arguments.length&&((e=Number(arguments[1]))!=e?e=0:0!==e&&e!==1/0&&e!==-1/0&&(e=(0<e||-1)*Math.floor(Math.abs(e)))),o<=e)return-1;for(i=0<=e?e:Math.max(o-Math.abs(e),0);i<o;i++)if(i in n&&n[i]===t)return i;return-1}),Function.prototype.bind||(Function.prototype.bind=function(t){var e,i,n,o;if("function"!=typeof this)throw new TypeError;return e=Array.prototype.slice.call(arguments,1),n=function(){},o=function(){return i.apply(this instanceof n?this:t,e.concat(Array.prototype.slice.call(arguments)))},(i=this).prototype&&(n.prototype=this.prototype),o.prototype=new n,o}),h.Element.prototype.dispatchEvent||(h.Element.prototype.dispatchEvent=function(t){try{return this.fireEvent("on"+t.type,t)}catch(t){}})}(),(p=function(t,e,i){var n=null,o=!1,s=null,r=null,a=null,l=[],c="",d=[],u=-1;if(a=i||h.document,(o=arguments[3])&&(o="boolean"==typeof o),"string"==typeof t)d=a.querySelectorAll(t);else if(t&&"object"==typeof t&&f.isElement(t,a))d=[t];else{if(!t||"object"!=typeof t||!t.length)throw new Error(p.messages.errorFactoryInvalidContainer());d=t}if(d.length<1)throw new Error(p.messages.errorFactoryContainerNotFound());for(u=0;(n=d[u])&&(!(0<u)||o);u++)n.id?c=n.id:(c="MixItUp"+f.randomHex(),n.id=c),p.instances[c]instanceof p.Mixer?(s=p.instances[c],(!e||e&&e.debug&&!1!==e.debug.showWarnings)&&console.warn(p.messages.warningFactoryPreexistingInstance())):((s=new p.Mixer).attach(n,a,c,e),p.instances[c]=s),r=new p.Facade(s),e&&e.debug&&e.debug.enable?l.push(s):l.push(r);return o?new p.Collection(l):l[0]}).use=function(t){p.Base.prototype.callActions.call(p,"beforeUse",arguments),"function"==typeof t&&"mixitup-extension"===t.TYPE?void 0===p.extensions[t.NAME]&&(t(p),p.extensions[t.NAME]=t):t.fn&&t.fn.jquery&&(p.libraries.$=t),p.Base.prototype.callActions.call(p,"afterUse",arguments)},p.instances={},p.extensions={},p.libraries={},f={hasClass:function(t,e){return!!t.className.match(new RegExp("(\\s|^)"+e+"(\\s|$)"))},addClass:function(t,e){this.hasClass(t,e)||(t.className+=t.className?" "+e:e)},removeClass:function(t,e){if(this.hasClass(t,e)){var i=new RegExp("(\\s|^)"+e+"(\\s|$)");t.className=t.className.replace(i," ").trim()}},extend:function(e,t,i,n){var o=[],s="",r=-1;i=i||!1,n=n||!1;try{if(Array.isArray(t))for(r=0;r<t.length;r++)o.push(r);else t&&(o=Object.keys(t));for(r=0;r<o.length;r++)s=o[r],!i||"object"!=typeof t[s]||this.isElement(t[s])?e[s]=t[s]:(Array.isArray(t[s])?e[s]||(e[s]=[]):e[s]||(e[s]={}),this.extend(e[s],t[s],i,n))}catch(t){if(!n)throw t;this.handleExtendError(t,e)}return e},handleExtendError:function(t,e){var i=null,n="",o="",s="",r="",a="",l=-1,c=-1;if(t instanceof TypeError&&(i=/property "?(\w*)"?[,:] object/i.exec(t.message))){for(a in n=i[1],e){for(c=0;c<n.length&&n.charAt(c)===a.charAt(c);)c++;l<c&&(l=c,r=a)}throw 1<l&&(s=p.messages.errorConfigInvalidPropertySuggestion({probableMatch:r})),o=p.messages.errorConfigInvalidProperty({erroneous:n,suggestion:s}),new TypeError(o)}throw t},template:function(n){for(var t=/\${([\w]*)}/g,o={},e=null;e=t.exec(n);)o[e[1]]=new RegExp("\\${"+e[1]+"}","g");return function(t){var e="",i=n;for(e in t=t||{},o)i=i.replace(o[e],void 0!==t[e]?t[e]:"");return i}},on:function(t,e,i,n){t&&(t.addEventListener?t.addEventListener(e,i,n):t.attachEvent&&(t["e"+e+i]=i,t[e+i]=function(){t["e"+e+i](h.event)},t.attachEvent("on"+e,t[e+i])))},off:function(t,e,i){t&&(t.removeEventListener?t.removeEventListener(e,i,!1):t.detachEvent&&(t.detachEvent("on"+e,t[e+i]),t[e+i]=null))},getCustomEvent:function(t,e,i){var n=null;return i=i||h.document,"function"==typeof h.CustomEvent?n=new h.CustomEvent(t,{detail:e,bubbles:!0,cancelable:!0}):"function"==typeof i.createEvent?(n=i.createEvent("CustomEvent")).initCustomEvent(t,!0,!0,e):((n=i.createEventObject()).type=t,n.returnValue=!1,n.cancelBubble=!1,n.detail=e),n},getOriginalEvent:function(t){return t.touches&&t.touches.length?t.touches[0]:t.changedTouches&&t.changedTouches.length?t.changedTouches[0]:t},index:function(t,e){for(var i=0;null!==(t=t.previousElementSibling);)e&&!t.matches(e)||++i;return i},camelCase:function(t){return t.toLowerCase().replace(/([_-][a-z])/g,function(t){return t.toUpperCase().replace(/[_-]/,"")})},pascalCase:function(t){return(t=this.camelCase(t)).charAt(0).toUpperCase()+t.slice(1)},dashCase:function(t){return t.replace(/([A-Z])/g,"-$1").replace(/^-/,"").toLowerCase()},isElement:function(t,e){return e=e||h.document,!!(h.HTMLElement&&t instanceof h.HTMLElement)||(!!(e.defaultView&&e.defaultView.HTMLElement&&t instanceof e.defaultView.HTMLElement)||null!==t&&1===t.nodeType&&"string"==typeof t.nodeName)},createElement:function(t,e){var i=null,n=null;for(i=(e=e||h.document).createDocumentFragment(),(n=e.createElement("div")).innerHTML=t.trim();n.firstChild;)i.appendChild(n.firstChild);return i},removeWhitespace:function(t){for(var e;t&&"#text"===t.nodeName;)t=(e=t).previousSibling,e.parentElement&&e.parentElement.removeChild(e)},isEqualArray:function(t,e){var i=t.length;if(i!==e.length)return!1;for(;i--;)if(t[i]!==e[i])return!1;return!0},deepEquals:function(t,e){var i;if("object"==typeof t&&t&&"object"==typeof e&&e){if(Object.keys(t).length!==Object.keys(e).length)return!1;for(i in t)if(!e.hasOwnProperty(i)||!this.deepEquals(t[i],e[i]))return!1}else if(t!==e)return!1;return!0},arrayShuffle:function(t){for(var e=t.slice(),i=e.length,n=i,o=-1,s=[];n--;)o=~~(Math.random()*i),s=e[n],e[n]=e[o],e[o]=s;return e},arrayFromList:function(e){var i,n;try{return Array.prototype.slice.call(e)}catch(t){for(i=[],n=0;n<e.length;n++)i.push(e[n]);return i}},debounce:function(o,s,r){var a;return function(){var t,e=this,i=arguments,n=r&&!a;t=function(){a=null,r||o.apply(e,i)},clearTimeout(a),a=setTimeout(t,s),n&&o.apply(e,i)}},position:function(t){for(var e=0,i=0,n=t;t;)e-=t.scrollLeft,i-=t.scrollTop,t===n&&(e+=t.offsetLeft,i+=t.offsetTop,n=t.offsetParent),t=t.parentElement;return{x:e,y:i}},getHypotenuse:function(t,e){var i=t.x-e.x,n=t.y-e.y;return i=i<0?-1*i:i,n=n<0?-1*n:n,Math.sqrt(Math.pow(i,2)+Math.pow(n,2))},getIntersectionRatio:function(t,e){var i,n=t.width*t.height;return i=Math.max(0,Math.min(t.left+t.width,e.left+e.width)-Math.max(t.left,e.left)),Math.max(0,Math.min(t.top+t.height,e.top+e.height)-Math.max(t.top,e.top))*i/n},closestParent:function(t,e,i,n){var o=t.parentNode;if(n=n||h.document,i&&t.matches(e))return t;for(;o&&o!=n.body;){if(o.matches&&o.matches(e))return o;if(!o.parentNode)return null;o=o.parentNode}return null},children:function(t,e,i){var n=[],o="";return i=i||h.doc,t&&(t.id||(o="Temp"+this.randomHexKey(),t.id=o),n=i.querySelectorAll("#"+t.id+" > "+e),o&&t.removeAttribute("id")),n},clean:function(t){var e=[],i=-1;for(i=0;i<t.length;i++)""!==t[i]&&e.push(t[i]);return e},defer:function(t){var e=null,i=null,n=null;return i=new this.Deferred,p.features.has.promises?i.promise=new Promise(function(t,e){i.resolve=t,i.reject=e}):(n=h.jQuery||t.$)&&"function"==typeof n.Deferred?(e=n.Deferred(),i.promise=e.promise(),i.resolve=e.resolve,i.reject=e.reject):h.console&&console.warn(p.messages.warningNoPromiseImplementation()),i},all:function(t,e){var i=null;return p.features.has.promises?Promise.all(t):(i=h.jQuery||e.$)&&"function"==typeof i.when?i.when.apply(i,t).done(function(){return arguments}):(h.console&&console.warn(p.messages.warningNoPromiseImplementation()),[])},getPrefix:function(t,e,i){var n=-1,o="";if(f.dashCase(e)in t.style)return"";for(n=0;o=i[n];n++)if(o+e in t.style)return o.toLowerCase();return"unsupported"},randomHex:function(){return("00000"+(16777216*Math.random()<<0).toString(16)).substr(-6).toUpperCase()},getDocumentState:function(t){return t="object"==typeof t.body?t:h.document,{scrollTop:h.pageYOffset,scrollLeft:h.pageXOffset,docHeight:t.documentElement.scrollHeight,docWidth:t.documentElement.scrollWidth,viewportHeight:t.documentElement.clientHeight,viewportWidth:t.documentElement.clientWidth}},bind:function(t,e){return function(){return e.apply(t,arguments)}},isVisible:function(t){var e;return!!t.offsetParent||"fixed"===(e=h.getComputedStyle(t)).position&&"hidden"!==e.visibility&&"0"!==e.opacity},seal:function(t){"function"==typeof Object.seal&&Object.seal(t)},freeze:function(t){"function"==typeof Object.freeze&&Object.freeze(t)},compareVersions:function(t,e){var i=t.split("."),n=e.split("."),o=-1,s=-1,r=-1;for(r=0;r<i.length;r++){if(o=parseInt(i[r].replace(/[^\d.]/g,"")),(s=parseInt(n[r].replace(/[^\d.]/g,"")||0))<o)return!1;if(o<s)return!0}return!0},Deferred:function(){this.promise=null,this.resolve=null,this.reject=null,this.id=f.randomHex()},isEmptyObject:function(t){var e="";if("function"==typeof Object.keys)return 0===Object.keys(t).length;for(e in t)if(t.hasOwnProperty(e))return!1;return!0},getClassname:function(t,e,i){var n="";return(n+=t.block).length&&(n+=t.delineatorElement),n+=t["element"+this.pascalCase(e)],i?(n.length&&(n+=t.delineatorModifier),n+=i):n},getProperty:function(t,e){var i,n=e.split("."),o="",s=0;if(!e)return t;for(i=function(t){return t?t[o]:null};s<n.length;)o=n[s],t=i(t),s++;return void 0!==t?t:null}},p.h=f,p.Base=function(){},p.Base.prototype={constructor:p.Base,callActions:function(t,e){var i=this.constructor.actions[t],n="";if(i&&!f.isEmptyObject(i))for(n in i)i[n].apply(this,e)},callFilters:function(t,e,i){var n=this.constructor.filters[t],o=e,s="";if(!n||f.isEmptyObject(n))return o;for(s in i=i||[],n)(i=f.arrayFromList(i)).unshift(o),o=n[s].apply(this,i);return o}},p.BaseStatic=function(){this.actions={},this.filters={},this.extend=function(t){f.extend(this.prototype,t)},this.registerAction=function(t,e,i){(this.actions[t]=this.actions[t]||{})[e]=i},this.registerFilter=function(t,e,i){(this.filters[t]=this.filters[t]||{})[e]=i}},p.Features=function(){p.Base.call(this),this.callActions("beforeConstruct"),this.boxSizingPrefix="",this.transformPrefix="",this.transitionPrefix="",this.boxSizingPrefix="",this.transformProp="",this.transformRule="",this.transitionProp="",this.perspectiveProp="",this.perspectiveOriginProp="",this.has=new p.Has,this.canary=null,this.BOX_SIZING_PROP="boxSizing",this.TRANSITION_PROP="transition",this.TRANSFORM_PROP="transform",this.PERSPECTIVE_PROP="perspective",this.PERSPECTIVE_ORIGIN_PROP="perspectiveOrigin",this.VENDORS=["Webkit","moz","O","ms"],this.TWEENABLE=["opacity","width","height","marginRight","marginBottom","x","y","scale","translateX","translateY","translateZ","rotateX","rotateY","rotateZ"],this.callActions("afterConstruct")},p.BaseStatic.call(p.Features),p.Features.prototype=Object.create(p.Base.prototype),f.extend(p.Features.prototype,{constructor:p.Features,init:function(){var t=this;t.callActions("beforeInit",arguments),t.canary=document.createElement("div"),t.setPrefixes(),t.runTests(),t.callActions("beforeInit",arguments)},runTests:function(){var t=this;t.callActions("beforeRunTests",arguments),t.has.promises="function"==typeof h.Promise,t.has.transitions="unsupported"!==t.transitionPrefix,t.callActions("afterRunTests",arguments),f.freeze(t.has)},setPrefixes:function(){var t=this;t.callActions("beforeSetPrefixes",arguments),t.transitionPrefix=f.getPrefix(t.canary,"Transition",t.VENDORS),t.transformPrefix=f.getPrefix(t.canary,"Transform",t.VENDORS),t.boxSizingPrefix=f.getPrefix(t.canary,"BoxSizing",t.VENDORS),t.boxSizingProp=t.boxSizingPrefix?t.boxSizingPrefix+f.pascalCase(t.BOX_SIZING_PROP):t.BOX_SIZING_PROP,t.transitionProp=t.transitionPrefix?t.transitionPrefix+f.pascalCase(t.TRANSITION_PROP):t.TRANSITION_PROP,t.transformProp=t.transformPrefix?t.transformPrefix+f.pascalCase(t.TRANSFORM_PROP):t.TRANSFORM_PROP,t.transformRule=t.transformPrefix?"-"+t.transformPrefix+"-"+t.TRANSFORM_PROP:t.TRANSFORM_PROP,t.perspectiveProp=t.transformPrefix?t.transformPrefix+f.pascalCase(t.PERSPECTIVE_PROP):t.PERSPECTIVE_PROP,t.perspectiveOriginProp=t.transformPrefix?t.transformPrefix+f.pascalCase(t.PERSPECTIVE_ORIGIN_PROP):t.PERSPECTIVE_ORIGIN_PROP,t.callActions("afterSetPrefixes",arguments)}}),p.Has=function(){this.transitions=!1,this.promises=!1,f.seal(this)},p.features=new p.Features,p.features.init(),p.ConfigAnimation=function(){p.Base.call(this),this.callActions("beforeConstruct"),this.enable=!0,this.effects="fade scale",this.effectsIn="",this.effectsOut="",this.duration=600,this.easing="ease",this.applyPerspective=!0,this.perspectiveDistance="3000px",this.perspectiveOrigin="50% 50%",this.queue=!0,this.queueLimit=3,this.animateResizeContainer=!0,this.animateResizeTargets=!1,this.staggerSequence=null,this.reverseOut=!1,this.nudge=!0,this.clampHeight=!0,this.clampWidth=!0,this.callActions("afterConstruct"),f.seal(this)},p.BaseStatic.call(p.ConfigAnimation),p.ConfigAnimation.prototype=Object.create(p.Base.prototype),p.ConfigAnimation.prototype.constructor=p.ConfigAnimation,p.ConfigBehavior=function(){p.Base.call(this),this.callActions("beforeConstruct"),this.liveSort=!1,this.callActions("afterConstruct"),f.seal(this)},p.BaseStatic.call(p.ConfigBehavior),p.ConfigBehavior.prototype=Object.create(p.Base.prototype),p.ConfigBehavior.prototype.constructor=p.ConfigBehavior,p.ConfigCallbacks=function(){p.Base.call(this),this.callActions("beforeConstruct"),this.onMixStart=null,this.onMixBusy=null,this.onMixEnd=null,this.onMixFail=null,this.onMixClick=null,this.callActions("afterConstruct"),f.seal(this)},p.BaseStatic.call(p.ConfigCallbacks),p.ConfigCallbacks.prototype=Object.create(p.Base.prototype),p.ConfigCallbacks.prototype.constructor=p.ConfigCallbacks,p.ConfigControls=function(){p.Base.call(this),this.callActions("beforeConstruct"),this.enable=!0,this.live=!1,this.scope="global",this.toggleLogic="or",this.toggleDefault="all",this.callActions("afterConstruct"),f.seal(this)},p.BaseStatic.call(p.ConfigControls),p.ConfigControls.prototype=Object.create(p.Base.prototype),p.ConfigControls.prototype.constructor=p.ConfigControls,p.ConfigClassNames=function(){p.Base.call(this),this.callActions("beforeConstruct"),this.block="mixitup",this.elementContainer="container",this.elementFilter="control",this.elementSort="control",this.elementMultimix="control",this.elementToggle="control",this.modifierActive="active",this.modifierDisabled="disabled",this.modifierFailed="failed",this.delineatorElement="-",this.delineatorModifier="-",this.callActions("afterConstruct"),f.seal(this)},p.BaseStatic.call(p.ConfigClassNames),p.ConfigClassNames.prototype=Object.create(p.Base.prototype),p.ConfigClassNames.prototype.constructor=p.ConfigClassNames,p.ConfigData=function(){p.Base.call(this),this.callActions("beforeConstruct"),this.uidKey="",this.dirtyCheck=!1,this.callActions("afterConstruct"),f.seal(this)},p.BaseStatic.call(p.ConfigData),p.ConfigData.prototype=Object.create(p.Base.prototype),p.ConfigData.prototype.constructor=p.ConfigData,p.ConfigDebug=function(){p.Base.call(this),this.callActions("beforeConstruct"),this.enable=!1,this.showWarnings=!0,this.fauxAsync=!1,this.callActions("afterConstruct"),f.seal(this)},p.BaseStatic.call(p.ConfigDebug),p.ConfigDebug.prototype=Object.create(p.Base.prototype),p.ConfigDebug.prototype.constructor=p.ConfigDebug,p.ConfigLayout=function(){p.Base.call(this),this.callActions("beforeConstruct"),this.allowNestedTargets=!0,this.containerClassName="",this.siblingBefore=null,this.siblingAfter=null,this.callActions("afterConstruct"),f.seal(this)},p.BaseStatic.call(p.ConfigLayout),p.ConfigLayout.prototype=Object.create(p.Base.prototype),p.ConfigLayout.prototype.constructor=p.ConfigLayout,p.ConfigLoad=function(){p.Base.call(this),this.callActions("beforeConstruct"),this.filter="all",this.sort="default:asc",this.dataset=null,this.callActions("afterConstruct"),f.seal(this)},p.BaseStatic.call(p.ConfigLoad),p.ConfigLoad.prototype=Object.create(p.Base.prototype),p.ConfigLoad.prototype.constructor=p.ConfigLoad,p.ConfigSelectors=function(){p.Base.call(this),this.callActions("beforeConstruct"),this.target=".mix",this.control="",this.callActions("afterConstruct"),f.seal(this)},p.BaseStatic.call(p.ConfigSelectors),p.ConfigSelectors.prototype=Object.create(p.Base.prototype),p.ConfigSelectors.prototype.constructor=p.ConfigSelectors,p.ConfigRender=function(){p.Base.call(this),this.callActions("beforeConstruct"),this.target=null,this.callActions("afterConstruct"),f.seal(this)},p.BaseStatic.call(p.ConfigRender),p.ConfigRender.prototype=Object.create(p.Base.prototype),p.ConfigRender.prototype.constructor=p.ConfigRender,p.ConfigTemplates=function(){p.Base.call(this),this.callActions("beforeConstruct"),this.callActions("afterConstruct"),f.seal(this)},p.BaseStatic.call(p.ConfigTemplates),p.ConfigTemplates.prototype=Object.create(p.Base.prototype),p.ConfigTemplates.prototype.constructor=p.ConfigTemplates,p.Config=function(){p.Base.call(this),this.callActions("beforeConstruct"),this.animation=new p.ConfigAnimation,this.behavior=new p.ConfigBehavior,this.callbacks=new p.ConfigCallbacks,this.controls=new p.ConfigControls,this.classNames=new p.ConfigClassNames,this.data=new p.ConfigData,this.debug=new p.ConfigDebug,this.layout=new p.ConfigLayout,this.load=new p.ConfigLoad,this.selectors=new p.ConfigSelectors,this.render=new p.ConfigRender,this.templates=new p.ConfigTemplates,this.callActions("afterConstruct"),f.seal(this)},p.BaseStatic.call(p.Config),p.Config.prototype=Object.create(p.Base.prototype),p.Config.prototype.constructor=p.Config,p.MixerDom=function(){p.Base.call(this),this.callActions("beforeConstruct"),this.document=null,this.body=null,this.container=null,this.parent=null,this.targets=[],this.callActions("afterConstruct"),f.seal(this)},p.BaseStatic.call(p.MixerDom),p.MixerDom.prototype=Object.create(p.Base.prototype),p.MixerDom.prototype.constructor=p.MixerDom,p.UiClassNames=function(){p.Base.call(this),this.callActions("beforeConstruct"),this.base="",this.active="",this.disabled="",this.callActions("afterConstruct"),f.seal(this)},p.BaseStatic.call(p.UiClassNames),p.UiClassNames.prototype=Object.create(p.Base.prototype),p.UiClassNames.prototype.constructor=p.UiClassNames,p.CommandDataset=function(){p.Base.call(this),this.callActions("beforeConstruct"),this.dataset=null,this.callActions("afterConstruct"),f.seal(this)},p.BaseStatic.call(p.CommandDataset),p.CommandDataset.prototype=Object.create(p.Base.prototype),p.CommandDataset.prototype.constructor=p.CommandDataset,p.CommandMultimix=function(){p.Base.call(this),this.callActions("beforeConstruct"),this.filter=null,this.sort=null,this.insert=null,this.remove=null,this.changeLayout=null,this.callActions("afterConstruct"),f.seal(this)},p.BaseStatic.call(p.CommandMultimix),p.CommandMultimix.prototype=Object.create(p.Base.prototype),p.CommandMultimix.prototype.constructor=p.CommandMultimix,p.CommandFilter=function(){p.Base.call(this),this.callActions("beforeConstruct"),this.selector="",this.collection=null,this.action="show",this.callActions("afterConstruct"),f.seal(this)},p.BaseStatic.call(p.CommandFilter),p.CommandFilter.prototype=Object.create(p.Base.prototype),p.CommandFilter.prototype.constructor=p.CommandFilter,p.CommandSort=function(){p.Base.call(this),this.callActions("beforeConstruct"),this.sortString="",this.attribute="",this.order="asc",this.collection=null,this.next=null,this.callActions("afterConstruct"),f.seal(this)},p.BaseStatic.call(p.CommandSort),p.CommandSort.prototype=Object.create(p.Base.prototype),p.CommandSort.prototype.constructor=p.CommandSort,p.CommandInsert=function(){p.Base.call(this),this.callActions("beforeConstruct"),this.index=0,this.collection=[],this.position="before",this.sibling=null,this.callActions("afterConstruct"),f.seal(this)},p.BaseStatic.call(p.CommandInsert),p.CommandInsert.prototype=Object.create(p.Base.prototype),p.CommandInsert.prototype.constructor=p.CommandInsert,p.CommandRemove=function(){p.Base.call(this),this.callActions("beforeConstruct"),this.targets=[],this.collection=[],this.callActions("afterConstruct"),f.seal(this)},p.BaseStatic.call(p.CommandRemove),p.CommandRemove.prototype=Object.create(p.Base.prototype),p.CommandRemove.prototype.constructor=p.CommandRemove,p.CommandChangeLayout=function(){p.Base.call(this),this.callActions("beforeConstruct"),this.containerClassName="",this.callActions("afterConstruct"),f.seal(this)},p.BaseStatic.call(p.CommandChangeLayout),p.CommandChangeLayout.prototype=Object.create(p.Base.prototype),p.CommandChangeLayout.prototype.constructor=p.CommandChangeLayout,p.ControlDefinition=function(t,e,i,n){p.Base.call(this),this.callActions("beforeConstruct"),this.type=t,this.selector=e,this.live=i||!1,this.parent=n||"",this.callActions("afterConstruct"),f.freeze(this),f.seal(this)},p.BaseStatic.call(p.ControlDefinition),p.ControlDefinition.prototype=Object.create(p.Base.prototype),p.ControlDefinition.prototype.constructor=p.ControlDefinition,p.controlDefinitions=[],p.controlDefinitions.push(new p.ControlDefinition("multimix","[data-filter][data-sort]")),p.controlDefinitions.push(new p.ControlDefinition("filter","[data-filter]")),p.controlDefinitions.push(new p.ControlDefinition("sort","[data-sort]")),p.controlDefinitions.push(new p.ControlDefinition("toggle","[data-toggle]")),p.Control=function(){p.Base.call(this),this.callActions("beforeConstruct"),this.el=null,this.selector="",this.bound=[],this.pending=-1,this.type="",this.status="inactive",this.filter="",this.sort="",this.canDisable=!1,this.handler=null,this.classNames=new p.UiClassNames,this.callActions("afterConstruct"),f.seal(this)},p.BaseStatic.call(p.Control),p.Control.prototype=Object.create(p.Base.prototype),f.extend(p.Control.prototype,{constructor:p.Control,init:function(t,e,i){var n=this;if(this.callActions("beforeInit",arguments),n.el=t,n.type=e,n.selector=i,n.selector)n.status="live";else switch(n.canDisable="boolean"==typeof n.el.disable,n.type){case"filter":n.filter=n.el.getAttribute("data-filter");break;case"toggle":n.filter=n.el.getAttribute("data-toggle");break;case"sort":n.sort=n.el.getAttribute("data-sort");break;case"multimix":n.filter=n.el.getAttribute("data-filter"),n.sort=n.el.getAttribute("data-sort")}n.bindClick(),p.controls.push(n),this.callActions("afterInit",arguments)},isBound:function(t){var e;return this.callActions("beforeIsBound",arguments),e=-1<this.bound.indexOf(t),this.callFilters("afterIsBound",e,arguments)},addBinding:function(t){this.callActions("beforeAddBinding",arguments),this.isBound()||this.bound.push(t),this.callActions("afterAddBinding",arguments)},removeBinding:function(t){var e=this,i=-1;this.callActions("beforeRemoveBinding",arguments),-1<(i=e.bound.indexOf(t))&&e.bound.splice(i,1),e.bound.length<1&&(e.unbindClick(),i=p.controls.indexOf(e),p.controls.splice(i,1),"active"===e.status&&e.renderStatus(e.el,"inactive")),this.callActions("afterRemoveBinding",arguments)},bindClick:function(){var e=this;this.callActions("beforeBindClick",arguments),e.handler=function(t){e.handleClick(t)},f.on(e.el,"click",e.handler),this.callActions("afterBindClick",arguments)},unbindClick:function(){this.callActions("beforeUnbindClick",arguments),f.off(this.el,"click",this.handler),this.handler=null,this.callActions("afterUnbindClick",arguments)},handleClick:function(t){var e=this,i=null,n=null,o=!1,s={},r=null,a=[],l=-1;if(this.callActions("beforeHandleClick",arguments),this.pending=0,n=e.bound[0],i=e.selector?f.closestParent(t.target,n.config.selectors.control+e.selector,!0,n.dom.document):e.el){switch(e.type){case"filter":s.filter=e.filter||i.getAttribute("data-filter");break;case"sort":s.sort=e.sort||i.getAttribute("data-sort");break;case"multimix":s.filter=e.filter||i.getAttribute("data-filter"),s.sort=e.sort||i.getAttribute("data-sort");break;case"toggle":s.filter=e.filter||i.getAttribute("data-toggle"),o="live"===e.status?f.hasClass(i,e.classNames.active):"active"===e.status}for(l=0;l<e.bound.length;l++)r=new p.CommandMultimix,f.extend(r,s),a.push(r);for(a=e.callFilters("commandsHandleClick",a,arguments),e.pending=e.bound.length,l=0;n=e.bound[l];l++)(s=a[l])&&(n.lastClicked||(n.lastClicked=i),p.events.fire("mixClick",n.dom.container,{state:n.state,instance:n,originalEvent:t,control:n.lastClicked},n.dom.document),"function"==typeof n.config.callbacks.onMixClick&&!1===n.config.callbacks.onMixClick.call(n.lastClicked,n.state,t,n)||("toggle"===e.type?o?n.toggleOff(s.filter):n.toggleOn(s.filter):n.multimix(s)));this.callActions("afterHandleClick",arguments)}else e.callActions("afterHandleClick",arguments)},update:function(t,e){var i=this,n=new p.CommandMultimix;i.callActions("beforeUpdate",arguments),i.pending--,i.pending=Math.max(0,i.pending),0<i.pending||("live"===i.status?i.updateLive(t,e):(n.sort=i.sort,n.filter=i.filter,i.callFilters("actionsUpdate",n,arguments),i.parseStatusChange(i.el,t,n,e)),i.callActions("afterUpdate",arguments))},updateLive:function(t,e){var i,n=this,o=null,s=null,r=-1;if(n.callActions("beforeUpdateLive",arguments),n.el){for(i=n.el.querySelectorAll(n.selector),r=0;s=i[r];r++){switch(o=new p.CommandMultimix,n.type){case"filter":o.filter=s.getAttribute("data-filter");break;case"sort":o.sort=s.getAttribute("data-sort");break;case"multimix":o.filter=s.getAttribute("data-filter"),o.sort=s.getAttribute("data-sort");break;case"toggle":o.filter=s.getAttribute("data-toggle")}o=n.callFilters("actionsUpdateLive",o,arguments),n.parseStatusChange(s,t,o,e)}n.callActions("afterUpdateLive",arguments)}},parseStatusChange:function(t,e,i,n){var o=this,s="",r=-1;switch(o.callActions("beforeParseStatusChange",arguments),o.type){case"filter":e.filter===i.filter?o.renderStatus(t,"active"):o.renderStatus(t,"inactive");break;case"multimix":e.sort===i.sort&&e.filter===i.filter?o.renderStatus(t,"active"):o.renderStatus(t,"inactive");break;case"sort":e.sort.match(/:asc/g)&&(s=e.sort.replace(/:asc/g,"")),e.sort===i.sort||s===i.sort?o.renderStatus(t,"active"):o.renderStatus(t,"inactive");break;case"toggle":for(n.length<1&&o.renderStatus(t,"inactive"),e.filter===i.filter&&o.renderStatus(t,"active"),r=0;r<n.length;r++){if(n[r]===i.filter){o.renderStatus(t,"active");break}o.renderStatus(t,"inactive")}}o.callActions("afterParseStatusChange",arguments)},renderStatus:function(t,e){var i=this;switch(i.callActions("beforeRenderStatus",arguments),e){case"active":f.addClass(t,i.classNames.active),f.removeClass(t,i.classNames.disabled),i.canDisable&&(i.el.disabled=!1);break;case"inactive":f.removeClass(t,i.classNames.active),f.removeClass(t,i.classNames.disabled),i.canDisable&&(i.el.disabled=!1);break;case"disabled":i.canDisable&&(i.el.disabled=!0),f.addClass(t,i.classNames.disabled),f.removeClass(t,i.classNames.active)}"live"!==i.status&&(i.status=e),i.callActions("afterRenderStatus",arguments)}}),p.controls=[],p.StyleData=function(){p.Base.call(this),this.callActions("beforeConstruct"),this.x=0,this.y=0,this.top=0,this.right=0,this.bottom=0,this.left=0,this.width=0,this.height=0,this.marginRight=0,this.marginBottom=0,this.opacity=0,this.scale=new p.TransformData,this.translateX=new p.TransformData,this.translateY=new p.TransformData,this.translateZ=new p.TransformData,this.rotateX=new p.TransformData,this.rotateY=new p.TransformData,this.rotateZ=new p.TransformData,this.callActions("afterConstruct"),f.seal(this)},p.BaseStatic.call(p.StyleData),p.StyleData.prototype=Object.create(p.Base.prototype),p.StyleData.prototype.constructor=p.StyleData,p.TransformData=function(){p.Base.call(this),this.callActions("beforeConstruct"),this.value=0,this.unit="",this.callActions("afterConstruct"),f.seal(this)},p.BaseStatic.call(p.TransformData),p.TransformData.prototype=Object.create(p.Base.prototype),p.TransformData.prototype.constructor=p.TransformData,p.TransformDefaults=function(){p.StyleData.apply(this),this.callActions("beforeConstruct"),this.scale.value=.01,this.scale.unit="",this.translateX.value=20,this.translateX.unit="px",this.translateY.value=20,this.translateY.unit="px",this.translateZ.value=20,this.translateZ.unit="px",this.rotateX.value=90,this.rotateX.unit="deg",this.rotateY.value=90,this.rotateY.unit="deg",this.rotateX.value=90,this.rotateX.unit="deg",this.rotateZ.value=180,this.rotateZ.unit="deg",this.callActions("afterConstruct"),f.seal(this)},p.BaseStatic.call(p.TransformDefaults),p.TransformDefaults.prototype=Object.create(p.StyleData.prototype),p.TransformDefaults.prototype.constructor=p.TransformDefaults,p.transformDefaults=new p.TransformDefaults,p.EventDetail=function(){this.state=null,this.futureState=null,this.instance=null,this.originalEvent=null},p.Events=function(){p.Base.call(this),this.callActions("beforeConstruct"),this.mixStart=null,this.mixBusy=null,this.mixEnd=null,this.mixFail=null,this.mixClick=null,this.callActions("afterConstruct"),f.seal(this)},p.BaseStatic.call(p.Events),p.Events.prototype=Object.create(p.Base.prototype),p.Events.prototype.constructor=p.Events,p.Events.prototype.fire=function(t,e,i,n){var o,s=new p.EventDetail;if(this.callActions("beforeFire",arguments),void 0===this[t])throw new Error('Event type "'+t+'" not found.');s.state=new p.State,f.extend(s.state,i.state),i.futureState&&(s.futureState=new p.State,f.extend(s.futureState,i.futureState)),s.instance=i.instance,i.originalEvent&&(s.originalEvent=i.originalEvent),o=f.getCustomEvent(t,s,n),this.callFilters("eventFire",o,arguments),e.dispatchEvent(o)},p.events=new p.Events,p.QueueItem=function(){p.Base.call(this),this.callActions("beforeConstruct"),this.args=[],this.instruction=null,this.triggerElement=null,this.deferred=null,this.isToggling=!1,this.callActions("afterConstruct"),f.seal(this)},p.BaseStatic.call(p.QueueItem),p.QueueItem.prototype=Object.create(p.Base.prototype),p.QueueItem.prototype.constructor=p.QueueItem,p.Mixer=function(){p.Base.call(this),this.callActions("beforeConstruct"),this.config=new p.Config,this.id="",this.isBusy=!1,this.isToggling=!1,this.incPadding=!0,this.controls=[],this.targets=[],this.origOrder=[],this.cache={},this.toggleArray=[],this.targetsMoved=0,this.targetsImmovable=0,this.targetsBound=0,this.targetsDone=0,this.staggerDuration=0,this.effectsIn=null,this.effectsOut=null,this.transformIn=[],this.transformOut=[],this.queue=[],this.state=null,this.lastOperation=null,this.lastClicked=null,this.userCallback=null,this.userDeferred=null,this.dom=new p.MixerDom,this.callActions("afterConstruct"),f.seal(this)},p.BaseStatic.call(p.Mixer),p.Mixer.prototype=Object.create(p.Base.prototype),f.extend(p.Mixer.prototype,{constructor:p.Mixer,attach:function(t,e,i,n){var o=this,s=null,r=-1;for(o.callActions("beforeAttach",arguments),o.id=i,n&&f.extend(o.config,n,!0,!0),o.sanitizeConfig(),o.cacheDom(t,e),o.config.layout.containerClassName&&f.addClass(o.dom.container,o.config.layout.containerClassName),p.features.has.transitions||(o.config.animation.enable=!1),void 0===h.console&&(o.config.debug.showWarnings=!1),o.config.data.uidKey&&(o.config.controls.enable=!1),o.indexTargets(),o.state=o.getInitialState(),r=0;s=o.lastOperation.toHide[r];r++)s.hide();o.config.controls.enable&&(o.initControls(),o.buildToggleArray(null,o.state),o.updateControls({filter:o.state.activeFilter,sort:o.state.activeSort})),o.parseEffects(),o.callActions("afterAttach",arguments)},sanitizeConfig:function(){var t=this;t.callActions("beforeSanitizeConfig",arguments),t.config.controls.scope=t.config.controls.scope.toLowerCase().trim(),t.config.controls.toggleLogic=t.config.controls.toggleLogic.toLowerCase().trim(),t.config.controls.toggleDefault=t.config.controls.toggleDefault.toLowerCase().trim(),t.config.animation.effects=t.config.animation.effects.trim(),t.callActions("afterSanitizeConfig",arguments)},getInitialState:function(){var t=this,e=new p.State,i=new p.Operation;if(t.callActions("beforeGetInitialState",arguments),e.activeContainerClassName=t.config.layout.containerClassName,t.config.load.dataset){if(!t.config.data.uidKey||"string"!=typeof t.config.data.uidKey)throw new TypeError(p.messages.errorConfigDataUidKeyNotSet());i.startDataset=i.newDataset=e.activeDataset=t.config.load.dataset.slice(),i.startContainerClassName=i.newContainerClassName=e.activeContainerClassName,i.show=t.targets.slice(),e=t.callFilters("stateGetInitialState",e,arguments)}else e.activeFilter=t.parseFilterArgs([t.config.load.filter]).command,e.activeSort=t.parseSortArgs([t.config.load.sort]).command,e.totalTargets=t.targets.length,(e=t.callFilters("stateGetInitialState",e,arguments)).activeSort.collection||e.activeSort.attribute||"random"===e.activeSort.order||"desc"===e.activeSort.order?(i.newSort=e.activeSort,t.sortOperation(i),t.printSort(!1,i),t.targets=i.newOrder):i.startOrder=i.newOrder=t.targets,i.startFilter=i.newFilter=e.activeFilter,i.startSort=i.newSort=e.activeSort,i.startContainerClassName=i.newContainerClassName=e.activeContainerClassName,"all"===i.newFilter.selector?i.newFilter.selector=t.config.selectors.target:"none"===i.newFilter.selector&&(i.newFilter.selector="");return i=t.callFilters("operationGetInitialState",i,[e]),(t.lastOperation=i).newFilter&&t.filterOperation(i),e=t.buildState(i)},cacheDom:function(t,e){var i=this;i.callActions("beforeCacheDom",arguments),i.dom.document=e,i.dom.body=i.dom.document.querySelector("body"),i.dom.container=t,i.dom.parent=t,i.callActions("afterCacheDom",arguments)},indexTargets:function(){var t,e=this,i=null,n=null,o=-1;if(e.callActions("beforeIndexTargets",arguments),e.dom.targets=e.config.layout.allowNestedTargets?e.dom.container.querySelectorAll(e.config.selectors.target):f.children(e.dom.container,e.config.selectors.target,e.dom.document),e.dom.targets=f.arrayFromList(e.dom.targets),e.targets=[],(t=e.config.load.dataset)&&t.length!==e.dom.targets.length)throw new Error(p.messages.errorDatasetPrerenderedMismatch());if(e.dom.targets.length){for(o=0;n=e.dom.targets[o];o++)(i=new p.Target).init(n,e,t?t[o]:void 0),i.isInDom=!0,e.targets.push(i);e.dom.parent=e.dom.targets[0].parentElement===e.dom.container?e.dom.container:e.dom.targets[0].parentElement}e.origOrder=e.targets,e.callActions("afterIndexTargets",arguments)},initControls:function(){var t=this,e="",i=null,n=null,o=null,s=null,r=null,a=-1,l=-1;switch(t.callActions("beforeInitControls",arguments),t.config.controls.scope){case"local":o=t.dom.container;break;case"global":o=t.dom.document;break;default:throw new Error(p.messages.errorConfigInvalidControlsScope())}for(a=0;e=p.controlDefinitions[a];a++)if(t.config.controls.live||e.live){if(e.parent){if(!(s=t.dom[e.parent])||s.length<0)continue;"number"!=typeof s.length&&(s=[s])}else s=[o];for(l=0;n=s[l];l++)r=t.getControl(n,e.type,e.selector),t.controls.push(r)}else for(i=o.querySelectorAll(t.config.selectors.control+e.selector),l=0;n=i[l];l++)(r=t.getControl(n,e.type,""))&&t.controls.push(r);t.callActions("afterInitControls",arguments)},getControl:function(t,e,i){var n=this,o=null,s=-1;if(n.callActions("beforeGetControl",arguments),!i)for(s=0;o=p.controls[s];s++){if(o.el===t&&o.isBound(n))return n.callFilters("controlGetControl",null,arguments);if(o.el===t&&o.type===e&&o.selector===i)return o.addBinding(n),n.callFilters("controlGetControl",o,arguments)}return(o=new p.Control).init(t,e,i),o.classNames.base=f.getClassname(n.config.classNames,e),o.classNames.active=f.getClassname(n.config.classNames,e,n.config.classNames.modifierActive),o.classNames.disabled=f.getClassname(n.config.classNames,e,n.config.classNames.modifierDisabled),o.addBinding(n),n.callFilters("controlGetControl",o,arguments)},getToggleSelector:function(){var t=this,e="or"===t.config.controls.toggleLogic?", ":"",i="";return t.callActions("beforeGetToggleSelector",arguments),t.toggleArray=f.clean(t.toggleArray),""===(i=t.toggleArray.join(e))&&(i=t.config.controls.toggleDefault),t.callFilters("selectorGetToggleSelector",i,arguments)},buildToggleArray:function(t,e){var i=this,n="";if(i.callActions("beforeBuildToggleArray",arguments),t&&t.filter)n=t.filter.selector.replace(/\s/g,"");else{if(!e)return;n=e.activeFilter.selector.replace(/\s/g,"")}n!==i.config.selectors.target&&"all"!==n||(n=""),"or"===i.config.controls.toggleLogic?i.toggleArray=n.split(","):i.toggleArray=i.splitCompoundSelector(n),i.toggleArray=f.clean(i.toggleArray),i.callActions("afterBuildToggleArray",arguments)},splitCompoundSelector:function(t){var e=t.split(/([\.\[])/g),i=[],n="",o=-1;for(""===e[0]&&e.shift(),o=0;o<e.length;o++)o%2==0&&(n=""),n+=e[o],o%2!=0&&i.push(n);return i},updateControls:function(t){var e=this,i=null,n=new p.CommandMultimix,o=-1;for(e.callActions("beforeUpdateControls",arguments),t.filter?n.filter=t.filter.selector:n.filter=e.state.activeFilter.selector,t.sort?n.sort=e.buildSortString(t.sort):n.sort=e.buildSortString(e.state.activeSort),n.filter===e.config.selectors.target&&(n.filter="all"),""===n.filter&&(n.filter="none"),f.freeze(n),o=0;i=e.controls[o];o++)i.update(n,e.toggleArray);e.callActions("afterUpdateControls",arguments)},buildSortString:function(t){var e="";return e+=t.sortString,t.next&&(e+=" "+this.buildSortString(t.next)),e},insertTargets:function(t,e){var i,n=this,o=-1,s=null,r=null,a=null,l=-1;if(n.callActions("beforeInsertTargets",arguments),void 0===t.index&&(t.index=0),i=n.getNextSibling(t.index,t.sibling,t.position),s=n.dom.document.createDocumentFragment(),o=i?f.index(i,n.config.selectors.target):n.targets.length,t.collection){for(l=0;a=t.collection[l];l++){if(-1<n.dom.targets.indexOf(a))throw new Error(p.messages.errorInsertPreexistingElement());a.style.display="none",s.appendChild(a),s.appendChild(n.dom.document.createTextNode(" ")),f.isElement(a,n.dom.document)&&a.matches(n.config.selectors.target)&&((r=new p.Target).init(a,n),r.isInDom=!0,n.targets.splice(o,0,r),o++)}n.dom.parent.insertBefore(s,i)}e.startOrder=n.origOrder=n.targets,n.callActions("afterInsertTargets",arguments)},getNextSibling:function(t,e,i){var n=this,o=null;return t=Math.max(t,0),e&&"before"===i?o=e:e&&"after"===i?o=e.nextElementSibling||null:0<n.targets.length&&void 0!==t?o=t<n.targets.length||!n.targets.length?n.targets[t].dom.el:n.targets[n.targets.length-1].dom.el.nextElementSibling:0===n.targets.length&&0<n.dom.parent.children.length&&(n.config.layout.siblingAfter?o=n.config.layout.siblingAfter:n.config.layout.siblingBefore?o=n.config.layout.siblingBefore.nextElementSibling:n.dom.parent.children[0]),n.callFilters("elementGetNextSibling",o,arguments)},filterOperation:function(t){var e,i=!1,n=-1,o=null,s=-1;for(this.callActions("beforeFilterOperation",arguments),e=t.newFilter.action,s=0;o=t.newOrder[s];s++)i=t.newFilter.collection?-1<t.newFilter.collection.indexOf(o.dom.el):""!==t.newFilter.selector&&o.dom.el.matches(t.newFilter.selector),this.evaluateHideShow(i,o,e,t);if(t.toRemove.length)for(s=0;o=t.show[s];s++)-1<t.toRemove.indexOf(o)&&(t.show.splice(s,1),-1<(n=t.toShow.indexOf(o))&&t.toShow.splice(n,1),t.toHide.push(o),t.hide.push(o),s--);t.matching=t.show.slice(),0===t.show.length&&""!==t.newFilter.selector&&0!==this.targets.length&&(t.hasFailed=!0),this.callActions("afterFilterOperation",arguments)},evaluateHideShow:function(t,e,i,n){var o,s=Array.prototype.slice.call(arguments,1);o=this.callFilters("testResultEvaluateHideShow",t,s),this.callActions("beforeEvaluateHideShow",arguments),!0===o&&"show"===i||!1===o&&"hide"===i?(n.show.push(e),e.isShown||n.toShow.push(e)):(n.hide.push(e),e.isShown&&n.toHide.push(e)),this.callActions("afterEvaluateHideShow",arguments)},sortOperation:function(i){var n=this,t=[],e=null,o=null,s=-1;if(n.callActions("beforeSortOperation",arguments),i.startOrder=n.targets,i.newSort.collection){for(t=[],s=0;o=i.newSort.collection[s];s++){if(n.dom.targets.indexOf(o)<0)throw new Error(p.messages.errorSortNonExistentElement());(e=new p.Target).init(o,n),e.isInDom=!0,t.push(e)}i.newOrder=t}else"random"===i.newSort.order?i.newOrder=f.arrayShuffle(i.startOrder):""===i.newSort.attribute?(i.newOrder=n.origOrder.slice(),"desc"===i.newSort.order&&i.newOrder.reverse()):(i.newOrder=i.startOrder.slice(),i.newOrder.sort(function(t,e){return n.compare(t,e,i.newSort)}));f.isEqualArray(i.newOrder,i.startOrder)&&(i.willSort=!1),n.callActions("afterSortOperation",arguments)},compare:function(t,e,i){var n=i.order,o=this.getAttributeValue(t,i.attribute),s=this.getAttributeValue(e,i.attribute);return s=isNaN(+o)||isNaN(+s)?(o=o.toLowerCase(),s.toLowerCase()):(o=+o,+s),o<s?"asc"===n?-1:1:s<o?"asc"===n?1:-1:o===s&&i.next?this.compare(t,e,i.next):0},getAttributeValue:function(t,e){var i;return null===(i=t.dom.el.getAttribute("data-"+e))&&this.config.debug.showWarnings&&console.warn(p.messages.warningInconsistentSortingAttributes({attribute:"data-"+e})),this.callFilters("valueGetAttributeValue",i||0,arguments)},printSort:function(t,e){var i,n=this,o=t?e.newOrder:e.startOrder,s=t?e.startOrder:e.newOrder,r=o.length?o[o.length-1].dom.el.nextElementSibling:null,a=h.document.createDocumentFragment(),l=null,c=null,d=-1;for(n.callActions("beforePrintSort",arguments),d=0;l=o[d];d++)"absolute"!==(c=l.dom.el).style.position&&(f.removeWhitespace(c.previousSibling),c.parentElement.removeChild(c));for((i=r?r.previousSibling:n.dom.parent.lastChild)&&"#text"===i.nodeName&&f.removeWhitespace(i),d=0;l=s[d];d++)c=l.dom.el,f.isElement(a.lastChild)&&a.appendChild(h.document.createTextNode(" ")),a.appendChild(c);n.dom.parent.firstChild&&n.dom.parent.firstChild!==r&&a.insertBefore(h.document.createTextNode(" "),a.childNodes[0]),r?(a.appendChild(h.document.createTextNode(" ")),n.dom.parent.insertBefore(a,r)):n.dom.parent.appendChild(a),n.callActions("afterPrintSort",arguments)},parseSortString:function(t,e){var i=t.split(" "),n=e,o=[],s=-1;for(s=0;s<i.length;s++){switch(o=i[s].split(":"),n.sortString=i[s],n.attribute=f.dashCase(o[0]),n.order=o[1]||"asc",n.attribute){case"default":n.attribute="";break;case"random":n.attribute="",n.order="random"}if(!n.attribute||"random"===n.order)break;s<i.length-1&&(n.next=new p.CommandSort,f.freeze(n),n=n.next)}return this.callFilters("commandsParseSort",e,arguments)},parseEffects:function(){var t=this,e="",i=t.config.animation.effectsIn||t.config.animation.effects,n=t.config.animation.effectsOut||t.config.animation.effects;for(e in t.callActions("beforeParseEffects",arguments),t.effectsIn=new p.StyleData,t.effectsOut=new p.StyleData,t.transformIn=[],t.transformOut=[],t.effectsIn.opacity=t.effectsOut.opacity=1,t.parseEffect("fade",i,t.effectsIn,t.transformIn),t.parseEffect("fade",n,t.effectsOut,t.transformOut,!0),p.transformDefaults)p.transformDefaults[e]instanceof p.TransformData&&(t.parseEffect(e,i,t.effectsIn,t.transformIn),t.parseEffect(e,n,t.effectsOut,t.transformOut,!0));t.parseEffect("stagger",i,t.effectsIn,t.transformIn),t.parseEffect("stagger",n,t.effectsOut,t.transformOut,!0),t.callActions("afterParseEffects",arguments)},parseEffect:function(t,e,i,n,o){var s,r=this,a="",l="",c=["%","px","em","rem","vh","vw","deg"],d="",u=-1;if(r.callActions("beforeParseEffect",arguments),"string"!=typeof e)throw new TypeError(p.messages.errorConfigInvalidAnimationEffects());if(e.indexOf(t)<0)"stagger"===t&&(r.staggerDuration=0);else{switch(-1<(s=e.indexOf(t+"("))&&(a=e.substring(s),l=/\(([^)]+)\)/.exec(a)[1]),t){case"fade":i.opacity=l?parseFloat(l):0;break;case"stagger":r.staggerDuration=l?parseFloat(l):100;break;default:if(o&&r.config.animation.reverseOut&&"scale"!==t?i[t].value=-1*(l?parseFloat(l):p.transformDefaults[t].value):i[t].value=l?parseFloat(l):p.transformDefaults[t].value,l){for(u=0;d=c[u];u++)if(-1<l.indexOf(d)){i[t].unit=d;break}}else i[t].unit=p.transformDefaults[t].unit;n.push(t+"("+i[t].value+i[t].unit+")")}r.callActions("afterParseEffect",arguments)}},buildState:function(t){var e=this,i=new p.State,n=null,o=-1;for(e.callActions("beforeBuildState",arguments),o=0;n=e.targets[o];o++)(!t.toRemove.length||t.toRemove.indexOf(n)<0)&&i.targets.push(n.dom.el);for(o=0;n=t.matching[o];o++)i.matching.push(n.dom.el);for(o=0;n=t.show[o];o++)i.show.push(n.dom.el);for(o=0;n=t.hide[o];o++)(!t.toRemove.length||t.toRemove.indexOf(n)<0)&&i.hide.push(n.dom.el);return i.id=e.id,i.container=e.dom.container,i.activeFilter=t.newFilter,i.activeSort=t.newSort,i.activeDataset=t.newDataset,i.activeContainerClassName=t.newContainerClassName,i.hasFailed=t.hasFailed,i.totalTargets=e.targets.length,i.totalShow=t.show.length,i.totalHide=t.hide.length,i.totalMatching=t.matching.length,i.triggerElement=t.triggerElement,e.callFilters("stateBuildState",i,arguments)},goMix:function(t,e){var i=this,n=null;return i.callActions("beforeGoMix",arguments),i.config.animation.duration&&i.config.animation.effects&&f.isVisible(i.dom.container)||(t=!1),e.toShow.length||e.toHide.length||e.willSort||e.willChangeLayout||(t=!1),e.startState.show.length||e.show.length||(t=!1),p.events.fire("mixStart",i.dom.container,{state:e.startState,futureState:e.newState,instance:i},i.dom.document),"function"==typeof i.config.callbacks.onMixStart&&i.config.callbacks.onMixStart.call(i.dom.container,e.startState,e.newState,i),f.removeClass(i.dom.container,f.getClassname(i.config.classNames,"container",i.config.classNames.modifierFailed)),n=i.userDeferred?i.userDeferred:i.userDeferred=f.defer(p.libraries),i.isBusy=!0,t&&p.features.has.transitions?(h.pageYOffset!==e.docState.scrollTop&&h.scrollTo(e.docState.scrollLeft,e.docState.scrollTop),i.config.animation.applyPerspective&&(i.dom.parent.style[p.features.perspectiveProp]=i.config.animation.perspectiveDistance,i.dom.parent.style[p.features.perspectiveOriginProp]=i.config.animation.perspectiveOrigin),i.config.animation.animateResizeContainer&&e.startHeight!==e.newHeight&&e.viewportDeltaY!==e.startHeight-e.newHeight&&(i.dom.parent.style.height=e.startHeight+"px"),i.config.animation.animateResizeContainer&&e.startWidth!==e.newWidth&&e.viewportDeltaX!==e.startWidth-e.newWidth&&(i.dom.parent.style.width=e.startWidth+"px"),e.startHeight===e.newHeight&&(i.dom.parent.style.height=e.startHeight+"px"),e.startWidth===e.newWidth&&(i.dom.parent.style.width=e.startWidth+"px"),e.startHeight===e.newHeight&&e.startWidth===e.newWidth&&(i.dom.parent.style.overflow="hidden"),requestAnimationFrame(function(){i.moveTargets(e)})):i.config.debug.fauxAsync?setTimeout(function(){i.cleanUp(e)},i.config.animation.duration):i.cleanUp(e),i.callFilters("promiseGoMix",n.promise,arguments)},getStartMixData:function(t){var e=this,i=h.getComputedStyle(e.dom.parent),n=e.dom.parent.getBoundingClientRect(),o=null,s={},r=-1,a=i[p.features.boxSizingProp];for(e.incPadding="border-box"===a,e.callActions("beforeGetStartMixData",arguments),r=0;o=t.show[r];r++)s=o.getPosData(),t.showPosData[r]={startPosData:s};for(r=0;o=t.toHide[r];r++)s=o.getPosData(),t.toHidePosData[r]={startPosData:s};t.startX=n.left,t.startY=n.top,t.startHeight=e.incPadding?n.height:n.height-parseFloat(i.paddingTop)-parseFloat(i.paddingBottom)-parseFloat(i.borderTop)-parseFloat(i.borderBottom),t.startWidth=e.incPadding?n.width:n.width-parseFloat(i.paddingLeft)-parseFloat(i.paddingRight)-parseFloat(i.borderLeft)-parseFloat(i.borderRight),e.callActions("afterGetStartMixData",arguments)},setInter:function(t){var e=this,i=null,n=-1;for(e.callActions("beforeSetInter",arguments),e.config.animation.clampHeight&&(e.dom.parent.style.height=t.startHeight+"px",e.dom.parent.style.overflow="hidden"),e.config.animation.clampWidth&&(e.dom.parent.style.width=t.startWidth+"px",e.dom.parent.style.overflow="hidden"),n=0;i=t.toShow[n];n++)i.show();t.willChangeLayout&&(f.removeClass(e.dom.container,t.startContainerClassName),f.addClass(e.dom.container,t.newContainerClassName)),e.callActions("afterSetInter",arguments)},getInterMixData:function(t){var e=null,i=-1;for(this.callActions("beforeGetInterMixData",arguments),i=0;e=t.show[i];i++)t.showPosData[i].interPosData=e.getPosData();for(i=0;e=t.toHide[i];i++)t.toHidePosData[i].interPosData=e.getPosData();this.callActions("afterGetInterMixData",arguments)},setFinal:function(t){var e=null,i=-1;for(this.callActions("beforeSetFinal",arguments),t.willSort&&this.printSort(!1,t),i=0;e=t.toHide[i];i++)e.hide();this.callActions("afterSetFinal",arguments)},getFinalMixData:function(t){var e,i=this,n=null,o=null,s=-1;for(i.callActions("beforeGetFinalMixData",arguments),s=0;o=t.show[s];s++)t.showPosData[s].finalPosData=o.getPosData();for(s=0;o=t.toHide[s];s++)t.toHidePosData[s].finalPosData=o.getPosData();for((i.config.animation.clampHeight||i.config.animation.clampWidth)&&(i.dom.parent.style.height=i.dom.parent.style.width=i.dom.parent.style.overflow=""),i.incPadding||(n=h.getComputedStyle(i.dom.parent)),e=i.dom.parent.getBoundingClientRect(),t.newX=e.left,t.newY=e.top,t.newHeight=i.incPadding?e.height:e.height-parseFloat(n.paddingTop)-parseFloat(n.paddingBottom)-parseFloat(n.borderTop)-parseFloat(n.borderBottom),t.newWidth=i.incPadding?e.width:e.width-parseFloat(n.paddingLeft)-parseFloat(n.paddingRight)-parseFloat(n.borderLeft)-parseFloat(n.borderRight),t.viewportDeltaX=t.docState.viewportWidth-this.dom.document.documentElement.clientWidth,t.viewportDeltaY=t.docState.viewportHeight-this.dom.document.documentElement.clientHeight,t.willSort&&i.printSort(!0,t),s=0;o=t.toShow[s];s++)o.hide();for(s=0;o=t.toHide[s];s++)o.show();t.willChangeLayout&&(f.removeClass(i.dom.container,t.newContainerClassName),f.addClass(i.dom.container,i.config.layout.containerClassName)),i.callActions("afterGetFinalMixData",arguments)},getTweenData:function(t){var e=this,i=null,n=null,o=Object.getOwnPropertyNames(e.effectsIn),s="",r=null,a=-1,l=-1,c=-1,d=-1;for(e.callActions("beforeGetTweenData",arguments),c=0;i=t.show[c];c++)for((n=t.showPosData[c]).posIn=new p.StyleData,n.posOut=new p.StyleData,n.tweenData=new p.StyleData,i.isShown?(n.posIn.x=n.startPosData.x-n.interPosData.x,n.posIn.y=n.startPosData.y-n.interPosData.y):n.posIn.x=n.posIn.y=0,n.posOut.x=n.finalPosData.x-n.interPosData.x,n.posOut.y=n.finalPosData.y-n.interPosData.y,n.posIn.opacity=i.isShown?1:e.effectsIn.opacity,n.posOut.opacity=1,n.tweenData.opacity=n.posOut.opacity-n.posIn.opacity,i.isShown||e.config.animation.nudge||(n.posIn.x=n.posOut.x,n.posIn.y=n.posOut.y),n.tweenData.x=n.posOut.x-n.posIn.x,n.tweenData.y=n.posOut.y-n.posIn.y,e.config.animation.animateResizeTargets&&(n.posIn.width=n.startPosData.width,n.posIn.height=n.startPosData.height,a=(n.startPosData.width||n.finalPosData.width)-n.interPosData.width,n.posIn.marginRight=n.startPosData.marginRight-a,l=(n.startPosData.height||n.finalPosData.height)-n.interPosData.height,n.posIn.marginBottom=n.startPosData.marginBottom-l,n.posOut.width=n.finalPosData.width,n.posOut.height=n.finalPosData.height,a=(n.finalPosData.width||n.startPosData.width)-n.interPosData.width,n.posOut.marginRight=n.finalPosData.marginRight-a,l=(n.finalPosData.height||n.startPosData.height)-n.interPosData.height,n.posOut.marginBottom=n.finalPosData.marginBottom-l,n.tweenData.width=n.posOut.width-n.posIn.width,n.tweenData.height=n.posOut.height-n.posIn.height,n.tweenData.marginRight=n.posOut.marginRight-n.posIn.marginRight,n.tweenData.marginBottom=n.posOut.marginBottom-n.posIn.marginBottom),d=0;s=o[d];d++)(r=e.effectsIn[s])instanceof p.TransformData&&r.value&&(n.posIn[s].value=r.value,n.posOut[s].value=0,n.tweenData[s].value=n.posOut[s].value-n.posIn[s].value,n.posIn[s].unit=n.posOut[s].unit=n.tweenData[s].unit=r.unit);for(c=0;i=t.toHide[c];c++)for((n=t.toHidePosData[c]).posIn=new p.StyleData,n.posOut=new p.StyleData,n.tweenData=new p.StyleData,n.posIn.x=i.isShown?n.startPosData.x-n.interPosData.x:0,n.posIn.y=i.isShown?n.startPosData.y-n.interPosData.y:0,n.posOut.x=e.config.animation.nudge?0:n.posIn.x,n.posOut.y=e.config.animation.nudge?0:n.posIn.y,n.tweenData.x=n.posOut.x-n.posIn.x,n.tweenData.y=n.posOut.y-n.posIn.y,e.config.animation.animateResizeTargets&&(n.posIn.width=n.startPosData.width,n.posIn.height=n.startPosData.height,a=n.startPosData.width-n.interPosData.width,n.posIn.marginRight=n.startPosData.marginRight-a,l=n.startPosData.height-n.interPosData.height,n.posIn.marginBottom=n.startPosData.marginBottom-l),n.posIn.opacity=1,n.posOut.opacity=e.effectsOut.opacity,n.tweenData.opacity=n.posOut.opacity-n.posIn.opacity,d=0;s=o[d];d++)(r=e.effectsOut[s])instanceof p.TransformData&&r.value&&(n.posIn[s].value=0,n.posOut[s].value=r.value,n.tweenData[s].value=n.posOut[s].value-n.posIn[s].value,n.posIn[s].unit=n.posOut[s].unit=n.tweenData[s].unit=r.unit);e.callActions("afterGetTweenData",arguments)},moveTargets:function(t){var e=this,i=null,n=null,o=null,s="",r=!1,a=-1,l=-1,c=e.checkProgress.bind(e);for(e.callActions("beforeMoveTargets",arguments),l=0;i=t.show[l];l++)n=new p.IMoveData,o=t.showPosData[l],s=i.isShown?"none":"show",(r=e.willTransition(s,t.hasEffect,o.posIn,o.posOut))&&a++,i.show(),n.posIn=o.posIn,n.posOut=o.posOut,n.statusChange=s,n.staggerIndex=a,n.operation=t,n.callback=r?c:null,i.move(n);for(l=0;i=t.toHide[l];l++)o=t.toHidePosData[l],n=new p.IMoveData,s="hide",r=e.willTransition(s,o.posIn,o.posOut),n.posIn=o.posIn,n.posOut=o.posOut,n.statusChange=s,n.staggerIndex=l,n.operation=t,n.callback=r?c:null,i.move(n);e.config.animation.animateResizeContainer&&(e.dom.parent.style[p.features.transitionProp]="height "+e.config.animation.duration+"ms ease, width "+e.config.animation.duration+"ms ease ",requestAnimationFrame(function(){t.startHeight!==t.newHeight&&t.viewportDeltaY!==t.startHeight-t.newHeight&&(e.dom.parent.style.height=t.newHeight+"px"),t.startWidth!==t.newWidth&&t.viewportDeltaX!==t.startWidth-t.newWidth&&(e.dom.parent.style.width=t.newWidth+"px")})),t.willChangeLayout&&(f.removeClass(e.dom.container,e.config.layout.ContainerClassName),f.addClass(e.dom.container,t.newContainerClassName)),e.callActions("afterMoveTargets",arguments)},hasEffect:function(){var t=["scale","translateX","translateY","translateZ","rotateX","rotateY","rotateZ"],e="",i=null,n=!1,o=-1;if(1!==this.effectsIn.opacity)return this.callFilters("resultHasEffect",!0,arguments);for(o=0;e=t[o];o++)if(0!==("undefined"!==(i=this.effectsIn[e]).value?i.value:i)){n=!0;break}return this.callFilters("resultHasEffect",n,arguments)},willTransition:function(t,e,i,n){var o=!1;return o=!!f.isVisible(this.dom.container)&&(!!("none"!==t&&e||i.x!==n.x||i.y!==n.y)||!!this.config.animation.animateResizeTargets&&(i.width!==n.width||i.height!==n.height||i.marginRight!==n.marginRight||i.marginTop!==n.marginTop)),this.callFilters("resultWillTransition",o,arguments)},checkProgress:function(t){this.targetsDone++,this.targetsBound===this.targetsDone&&this.cleanUp(t)},cleanUp:function(t){var e=this,i=null,n=null,o=null,s=null,r=-1;for(e.callActions("beforeCleanUp",arguments),e.targetsMoved=e.targetsImmovable=e.targetsBound=e.targetsDone=0,r=0;i=t.show[r];r++)i.cleanUp(),i.show();for(r=0;i=t.toHide[r];r++)i.cleanUp(),i.hide();if(t.willSort&&e.printSort(!1,t),e.dom.parent.style[p.features.transitionProp]=e.dom.parent.style.height=e.dom.parent.style.width=e.dom.parent.style.overflow=e.dom.parent.style[p.features.perspectiveProp]=e.dom.parent.style[p.features.perspectiveOriginProp]="",t.willChangeLayout&&(f.removeClass(e.dom.container,t.startContainerClassName),f.addClass(e.dom.container,t.newContainerClassName)),t.toRemove.length){for(r=0;i=e.targets[r];r++)-1<t.toRemove.indexOf(i)&&((n=i.dom.el.previousSibling)&&"#text"===n.nodeName&&(o=i.dom.el.nextSibling)&&"#text"===o.nodeName&&f.removeWhitespace(n),t.willSort||e.dom.parent.removeChild(i.dom.el),e.targets.splice(r,1),i.isInDom=!1,r--);e.origOrder=e.targets}t.willSort&&(e.targets=t.newOrder),e.state=t.newState,e.lastOperation=t,e.dom.targets=e.state.targets,p.events.fire("mixEnd",e.dom.container,{state:e.state,instance:e},e.dom.document),"function"==typeof e.config.callbacks.onMixEnd&&e.config.callbacks.onMixEnd.call(e.dom.container,e.state,e),t.hasFailed&&(p.events.fire("mixFail",e.dom.container,{state:e.state,instance:e},e.dom.document),"function"==typeof e.config.callbacks.onMixFail&&e.config.callbacks.onMixFail.call(e.dom.container,e.state,e),f.addClass(e.dom.container,f.getClassname(e.config.classNames,"container",e.config.classNames.modifierFailed))),"function"==typeof e.userCallback&&e.userCallback.call(e.dom.container,e.state,e),"function"==typeof e.userDeferred.resolve&&e.userDeferred.resolve(e.state),e.userCallback=null,e.userDeferred=null,e.lastClicked=null,e.isToggling=!1,e.isBusy=!1,e.queue.length&&(e.callActions("beforeReadQueueCleanUp",arguments),s=e.queue.shift(),e.userDeferred=s.deferred,e.isToggling=s.isToggling,e.lastClicked=s.triggerElement,s.instruction.command instanceof p.CommandMultimix?e.multimix.apply(e,s.args):e.dataset.apply(e,s.args)),e.callActions("afterCleanUp",arguments)},parseMultimixArgs:function(t){var e=this,i=new p.UserInstruction,n=null,o=-1;for(i.animate=e.config.animation.enable,i.command=new p.CommandMultimix,o=0;o<t.length;o++)null!==(n=t[o])&&("object"==typeof n?f.extend(i.command,n):"boolean"==typeof n?i.animate=n:"function"==typeof n&&(i.callback=n));return!i.command.insert||i.command.insert instanceof p.CommandInsert||(i.command.insert=e.parseInsertArgs([i.command.insert]).command),!i.command.remove||i.command.remove instanceof p.CommandRemove||(i.command.remove=e.parseRemoveArgs([i.command.remove]).command),!i.command.filter||i.command.filter instanceof p.CommandFilter||(i.command.filter=e.parseFilterArgs([i.command.filter]).command),!i.command.sort||i.command.sort instanceof p.CommandSort||(i.command.sort=e.parseSortArgs([i.command.sort]).command),!i.command.changeLayout||i.command.changeLayout instanceof p.CommandChangeLayout||(i.command.changeLayout=e.parseChangeLayoutArgs([i.command.changeLayout]).command),i=e.callFilters("instructionParseMultimixArgs",i,arguments),f.freeze(i),i},parseFilterArgs:function(t){var e=new p.UserInstruction,i=null,n=-1;for(e.animate=this.config.animation.enable,e.command=new p.CommandFilter,n=0;n<t.length;n++)"string"==typeof(i=t[n])?e.command.selector=i:null===i?e.command.collection=[]:"object"==typeof i&&f.isElement(i,this.dom.document)?e.command.collection=[i]:"object"==typeof i&&void 0!==i.length?e.command.collection=f.arrayFromList(i):"object"==typeof i?f.extend(e.command,i):"boolean"==typeof i?e.animate=i:"function"==typeof i&&(e.callback=i);if(e.command.selector&&e.command.collection)throw new Error(p.messages.errorFilterInvalidArguments());return e=this.callFilters("instructionParseFilterArgs",e,arguments),f.freeze(e),e},parseSortArgs:function(t){var e=new p.UserInstruction,i=null,n="",o=-1;for(e.animate=this.config.animation.enable,e.command=new p.CommandSort,o=0;o<t.length;o++)if(null!==(i=t[o]))switch(typeof i){case"string":n=i;break;case"object":i.length&&(e.command.collection=f.arrayFromList(i));break;case"boolean":e.animate=i;break;case"function":e.callback=i}return n&&(e.command=this.parseSortString(n,e.command)),e=this.callFilters("instructionParseSortArgs",e,arguments),f.freeze(e),e},parseInsertArgs:function(t){var e=new p.UserInstruction,i=null,n=-1;for(e.animate=this.config.animation.enable,e.command=new p.CommandInsert,n=0;n<t.length;n++)null!==(i=t[n])&&("number"==typeof i?e.command.index=i:"string"==typeof i&&-1<["before","after"].indexOf(i)?e.command.position=i:"string"==typeof i?e.command.collection=f.arrayFromList(f.createElement(i).childNodes):"object"==typeof i&&f.isElement(i,this.dom.document)?e.command.collection.length?e.command.sibling=i:e.command.collection=[i]:"object"==typeof i&&i.length?e.command.collection.length?e.command.sibling=i[0]:e.command.collection=i:"object"==typeof i&&i.childNodes&&i.childNodes.length?e.command.collection.length?e.command.sibling=i.childNodes[0]:e.command.collection=f.arrayFromList(i.childNodes):"object"==typeof i?f.extend(e.command,i):"boolean"==typeof i?e.animate=i:"function"==typeof i&&(e.callback=i));if(e.command.index&&e.command.sibling)throw new Error(p.messages.errorInsertInvalidArguments());return!e.command.collection.length&&this.config.debug.showWarnings&&console.warn(p.messages.warningInsertNoElements()),e=this.callFilters("instructionParseInsertArgs",e,arguments),f.freeze(e),e},parseRemoveArgs:function(t){var e=this,i=new p.UserInstruction,n=null,o=null,s=-1;for(i.animate=e.config.animation.enable,i.command=new p.CommandRemove,s=0;s<t.length;s++)if(null!==(o=t[s]))switch(typeof o){case"number":e.targets[o]&&(i.command.targets[0]=e.targets[o]);break;case"string":i.command.collection=f.arrayFromList(e.dom.parent.querySelectorAll(o));break;case"object":o&&o.length?i.command.collection=o:f.isElement(o,e.dom.document)?i.command.collection=[o]:f.extend(i.command,o);break;case"boolean":i.animate=o;break;case"function":i.callback=o}if(i.command.collection.length)for(s=0;n=e.targets[s];s++)-1<i.command.collection.indexOf(n.dom.el)&&i.command.targets.push(n);return!i.command.targets.length&&e.config.debug.showWarnings&&console.warn(p.messages.warningRemoveNoElements()),f.freeze(i),i},parseDatasetArgs:function(t){var e=new p.UserInstruction,i=null,n=-1;for(e.animate=this.config.animation.enable,e.command=new p.CommandDataset,n=0;n<t.length;n++)if(null!==(i=t[n]))switch(typeof i){case"object":Array.isArray(i)||"number"==typeof i.length?e.command.dataset=i:f.extend(e.command,i);break;case"boolean":e.animate=i;break;case"function":e.callback=i}return f.freeze(e),e},parseChangeLayoutArgs:function(t){var e=new p.UserInstruction,i=null,n=-1;for(e.animate=this.config.animation.enable,e.command=new p.CommandChangeLayout,n=0;n<t.length;n++)if(null!==(i=t[n]))switch(typeof i){case"string":e.command.containerClassName=i;break;case"object":f.extend(e.command,i);break;case"boolean":e.animate=i;break;case"function":e.callback=i}return f.freeze(e),e},queueMix:function(t){var e=this,i=null,n="";return e.callActions("beforeQueueMix",arguments),i=f.defer(p.libraries),e.config.animation.queue&&e.queue.length<e.config.animation.queueLimit?(t.deferred=i,e.queue.push(t),e.config.controls.enable&&(e.isToggling?(e.buildToggleArray(t.instruction.command),n=e.getToggleSelector(),e.updateControls({filter:{selector:n}})):e.updateControls(t.instruction.command))):(e.config.debug.showWarnings&&console.warn(p.messages.warningMultimixInstanceQueueFull()),i.resolve(e.state),p.events.fire("mixBusy",e.dom.container,{state:e.state,instance:e},e.dom.document),"function"==typeof e.config.callbacks.onMixBusy&&e.config.callbacks.onMixBusy.call(e.dom.container,e.state,e)),e.callFilters("promiseQueueMix",i.promise,arguments)},getDataOperation:function(t){var e=this,i=new p.Operation,n=[];if(i=e.callFilters("operationUnmappedGetDataOperation",i,arguments),e.dom.targets.length&&!(n=e.state.activeDataset||[]).length)throw new Error(p.messages.errorDatasetNotSet());return i.id=f.randomHex(),i.startState=e.state,i.startDataset=n,i.newDataset=t.slice(),e.diffDatasets(i),i.startOrder=e.targets,i.newOrder=i.show,e.config.animation.enable&&(e.getStartMixData(i),e.setInter(i),i.docState=f.getDocumentState(e.dom.document),e.getInterMixData(i),e.setFinal(i),e.getFinalMixData(i),e.parseEffects(),i.hasEffect=e.hasEffect(),e.getTweenData(i)),e.targets=i.show.slice(),i.newState=e.buildState(i),Array.prototype.push.apply(e.targets,i.toRemove),i=e.callFilters("operationMappedGetDataOperation",i,arguments)},diffDatasets:function(t){var e=this,i=[],n=[],o=[],s=null,r=null,a=null,l=null,c=null,d={},u="",h=-1;for(e.callActions("beforeDiffDatasets",arguments),h=0;s=t.newDataset[h];h++){if(void 0===(u=s[e.config.data.uidKey])||u.toString().length<1)throw new TypeError(p.messages.errorDatasetInvalidUidKey({uidKey:e.config.data.uidKey}));if(d[u])throw new Error(p.messages.errorDatasetDuplicateUid({uid:u}));d[u]=!0,(r=e.cache[u])instanceof p.Target?(e.config.data.dirtyCheck&&!f.deepEquals(s,r.data)&&(a=r.render(s),r.data=s,a!==r.dom.el&&(r.isInDom&&(r.unbindEvents(),e.dom.parent.replaceChild(a,r.dom.el)),r.isShown||(a.style.display="none"),r.dom.el=a,r.isInDom&&r.bindEvents())),a=r.dom.el):((r=new p.Target).init(null,e,s),r.hide()),r.isInDom?(c=r.dom.el.nextElementSibling,n.push(u),l&&(l.lastElementChild&&l.appendChild(e.dom.document.createTextNode(" ")),e.insertDatasetFrag(l,r.dom.el,o),l=null)):((l=l||e.dom.document.createDocumentFragment()).lastElementChild&&l.appendChild(e.dom.document.createTextNode(" ")),l.appendChild(r.dom.el),r.isInDom=!0,r.unbindEvents(),r.bindEvents(),r.hide(),t.toShow.push(r),o.push(r)),t.show.push(r)}for(l&&((c=c||e.config.layout.siblingAfter)&&l.appendChild(e.dom.document.createTextNode(" ")),e.insertDatasetFrag(l,c,o)),h=0;s=t.startDataset[h];h++)u=s[e.config.data.uidKey],r=e.cache[u],t.show.indexOf(r)<0?(t.hide.push(r),t.toHide.push(r),t.toRemove.push(r)):i.push(u);f.isEqualArray(i,n)||(t.willSort=!0),e.callActions("afterDiffDatasets",arguments)},insertDatasetFrag:function(t,e,i){var n=e?f.arrayFromList(this.dom.parent.children).indexOf(e):this.targets.length;for(this.dom.parent.insertBefore(t,e);i.length;)this.targets.splice(n,0,i.shift()),n++},willSort:function(t,e){var i=!1;return i=!!(this.config.behavior.liveSort||"random"===t.order||t.attribute!==e.attribute||t.order!==e.order||t.collection!==e.collection||null===t.next&&e.next||t.next&&null===e.next)||!(!t.next||!e.next)&&this.willSort(t.next,e.next),this.callFilters("resultWillSort",i,arguments)},show:function(){return this.filter("all")},hide:function(){return this.filter("none")},isMixing:function(){return this.isBusy},filter:function(){var t=this.parseFilterArgs(arguments);return this.multimix({filter:t.command},t.animate,t.callback)},toggleOn:function(){var t,e=this,i=e.parseFilterArgs(arguments),n=i.command.selector;return e.isToggling=!0,e.toggleArray.indexOf(n)<0&&e.toggleArray.push(n),t=e.getToggleSelector(),e.multimix({filter:t},i.animate,i.callback)},toggleOff:function(){var t,e=this,i=e.parseFilterArgs(arguments),n=i.command.selector,o=e.toggleArray.indexOf(n);return e.isToggling=!0,-1<o&&e.toggleArray.splice(o,1),t=e.getToggleSelector(),e.multimix({filter:t},i.animate,i.callback)},sort:function(){var t=this.parseSortArgs(arguments);return this.multimix({sort:t.command},t.animate,t.callback)},changeLayout:function(){var t=this.parseChangeLayoutArgs(arguments);return this.multimix({changeLayout:t.command},t.animate,t.callback)},dataset:function(){var t=this,e=t.parseDatasetArgs(arguments),i=null,n=null,o=!1;return t.callActions("beforeDataset",arguments),t.isBusy?((n=new p.QueueItem).args=arguments,n.instruction=e,t.queueMix(n)):(e.callback&&(t.userCallback=e.callback),o=e.animate^t.config.animation.enable?e.animate:t.config.animation.enable,i=t.getDataOperation(e.command.dataset),t.goMix(o,i))},multimix:function(){var t=this,e=null,i=!1,n=null,o=t.parseMultimixArgs(arguments);return t.callActions("beforeMultimix",arguments),t.isBusy?((n=new p.QueueItem).args=arguments,n.instruction=o,n.triggerElement=t.lastClicked,n.isToggling=t.isToggling,t.queueMix(n)):(e=t.getOperation(o.command),t.config.controls.enable&&(o.command.filter&&!t.isToggling&&(t.toggleArray.length=0,t.buildToggleArray(e.command)),t.queue.length<1&&t.updateControls(e.command)),o.callback&&(t.userCallback=o.callback),i=o.animate^t.config.animation.enable?o.animate:t.config.animation.enable,t.callFilters("operationMultimix",e,arguments),t.goMix(i,e))},getOperation:function(t){var e=this,i=t.sort,n=t.filter,o=t.changeLayout,s=t.remove,r=t.insert,a=new p.Operation;return(a=e.callFilters("operationUnmappedGetOperation",a,arguments)).id=f.randomHex(),a.command=t,a.startState=e.state,a.triggerElement=e.lastClicked,e.isBusy?(e.config.debug.showWarnings&&console.warn(p.messages.warningGetOperationInstanceBusy()),null):(r&&e.insertTargets(r,a),s&&(a.toRemove=s.targets),a.startSort=a.newSort=a.startState.activeSort,a.startOrder=a.newOrder=e.targets,i&&(a.startSort=a.startState.activeSort,a.newSort=i,a.willSort=e.willSort(i,a.startState.activeSort),a.willSort&&e.sortOperation(a)),a.startFilter=a.startState.activeFilter,a.newFilter=n||f.extend(new p.CommandFilter,a.startFilter),"all"===a.newFilter.selector?a.newFilter.selector=e.config.selectors.target:"none"===a.newFilter.selector&&(a.newFilter.selector=""),e.filterOperation(a),a.startContainerClassName=a.startState.activeContainerClassName,o?(a.newContainerClassName=o.containerClassName,a.newContainerClassName!==a.startContainerClassName&&(a.willChangeLayout=!0)):a.newContainerClassName=a.startContainerClassName,e.config.animation.enable&&(e.getStartMixData(a),e.setInter(a),a.docState=f.getDocumentState(e.dom.document),e.getInterMixData(a),e.setFinal(a),e.getFinalMixData(a),e.parseEffects(),a.hasEffect=e.hasEffect(),e.getTweenData(a)),a.willSort&&(e.targets=a.newOrder),a.newState=e.buildState(a),e.callFilters("operationMappedGetOperation",a,arguments))},tween:function(t,e){var i=null,n=null,o=-1,s=-1;for(e=Math.min(e,1),e=Math.max(e,0),s=0;i=t.show[s];s++)n=t.showPosData[s],i.applyTween(n,e);for(s=0;i=t.hide[s];s++)i.isShown&&i.hide(),-1<(o=t.toHide.indexOf(i))&&(n=t.toHidePosData[o],i.isShown||i.show(),i.applyTween(n,e))},insert:function(){var t=this.parseInsertArgs(arguments);return this.multimix({insert:t.command},t.animate,t.callback)},insertBefore:function(){var t=this.parseInsertArgs(arguments);return this.insert(t.command.collection,"before",t.command.sibling,t.animate,t.callback)},insertAfter:function(){var t=this.parseInsertArgs(arguments);return this.insert(t.command.collection,"after",t.command.sibling,t.animate,t.callback)},prepend:function(){var t=this.parseInsertArgs(arguments);return this.insert(0,t.command.collection,t.animate,t.callback)},append:function(){var t=this.parseInsertArgs(arguments);return this.insert(this.state.totalTargets,t.command.collection,t.animate,t.callback)},remove:function(){var t=this.parseRemoveArgs(arguments);return this.multimix({remove:t.command},t.animate,t.callback)},getConfig:function(t){var e=null;return e=t?f.getProperty(this.config,t):this.config,this.callFilters("valueGetConfig",e,arguments)},configure:function(t){this.callActions("beforeConfigure",arguments),f.extend(this.config,t,!0,!0),this.callActions("afterConfigure",arguments)},getState:function(){var t;return t=new p.State,f.extend(t,this.state),f.freeze(t),this.callFilters("stateGetState",t,arguments)},forceRefresh:function(){this.indexTargets()},forceRender:function(){var t=this,e=null,i=null,n="";for(n in t.cache)(i=(e=t.cache[n]).render(e.data))!==e.dom.el&&(e.isInDom&&(e.unbindEvents(),t.dom.parent.replaceChild(i,e.dom.el)),e.isShown||(i.style.display="none"),e.dom.el=i,e.isInDom&&e.bindEvents());t.state=t.buildState(t.lastOperation)},destroy:function(t){var e=this,i=null,n=null,o=0;for(e.callActions("beforeDestroy",arguments),o=0;i=e.controls[o];o++)i.removeBinding(e);for(o=0;n=e.targets[o];o++)t&&n.show(),n.unbindEvents();e.dom.container.id.match(/^MixItUp/)&&e.dom.container.removeAttribute("id"),delete p.instances[e.id],e.callActions("afterDestroy",arguments)}}),p.IMoveData=function(){p.Base.call(this),this.callActions("beforeConstruct"),this.posIn=null,this.posOut=null,this.operation=null,this.callback=null,this.statusChange="",this.duration=-1,this.staggerIndex=-1,this.callActions("afterConstruct"),f.seal(this)},p.BaseStatic.call(p.IMoveData),p.IMoveData.prototype=Object.create(p.Base.prototype),p.IMoveData.prototype.constructor=p.IMoveData,p.TargetDom=function(){p.Base.call(this),this.callActions("beforeConstruct"),this.el=null,this.callActions("afterConstruct"),f.seal(this)},p.BaseStatic.call(p.TargetDom),p.TargetDom.prototype=Object.create(p.Base.prototype),p.TargetDom.prototype.constructor=p.TargetDom,p.Target=function(){p.Base.call(this),this.callActions("beforeConstruct"),this.id="",this.sortString="",this.mixer=null,this.callback=null,this.isShown=!1,this.isBound=!1,this.isExcluded=!1,this.isInDom=!1,this.handler=null,this.operation=null,this.data=null,this.dom=new p.TargetDom,this.callActions("afterConstruct"),f.seal(this)},p.BaseStatic.call(p.Target),p.Target.prototype=Object.create(p.Base.prototype),f.extend(p.Target.prototype,{constructor:p.Target,init:function(t,e,i){var n=this,o="";if(n.callActions("beforeInit",arguments),n.mixer=e,t=t||n.render(i),n.cacheDom(t),n.bindEvents(),"none"!==n.dom.el.style.display&&(n.isShown=!0),i&&e.config.data.uidKey){if(void 0===(o=i[e.config.data.uidKey])||o.toString().length<1)throw new TypeError(p.messages.errorDatasetInvalidUidKey({uidKey:e.config.data.uidKey}));n.id=o,n.data=i,e.cache[o]=n}n.callActions("afterInit",arguments)},render:function(t){var e,i=null,n=null,o=null;if(this.callActions("beforeRender",arguments),"function"!=typeof(i=this.callFilters("renderRender",this.mixer.config.render.target,arguments)))throw new TypeError(p.messages.errorDatasetRendererNotSet());return(e=i(t))&&"object"==typeof e&&f.isElement(e)?n=e:"string"==typeof e&&((o=document.createElement("div")).innerHTML=e,n=o.firstElementChild),this.callFilters("elRender",n,arguments)},cacheDom:function(t){this.callActions("beforeCacheDom",arguments),this.dom.el=t,this.callActions("afterCacheDom",arguments)},getSortString:function(t){var e=this.dom.el.getAttribute("data-"+t)||"";this.callActions("beforeGetSortString",arguments),e=isNaN(+e)?e.toLowerCase():+e,this.sortString=e,this.callActions("afterGetSortString",arguments)},show:function(){var t=this;t.callActions("beforeShow",arguments),t.isShown||(t.dom.el.style.display="",t.isShown=!0),t.callActions("afterShow",arguments)},hide:function(){var t=this;t.callActions("beforeHide",arguments),t.isShown&&(t.dom.el.style.display="none",t.isShown=!1),t.callActions("afterHide",arguments)},move:function(t){var e=this;e.callActions("beforeMove",arguments),e.isExcluded||e.mixer.targetsMoved++,e.applyStylesIn(t),requestAnimationFrame(function(){e.applyStylesOut(t)}),e.callActions("afterMove",arguments)},applyTween:function(t,e){var i=this,n="",o=null,s=t.posIn,r=[],a=new p.StyleData,l=-1;for(i.callActions("beforeApplyTween",arguments),a.x=s.x,a.y=s.y,0===e?i.hide():i.isShown||i.show(),l=0;n=p.features.TWEENABLE[l];l++)if(o=t.tweenData[n],"x"===n){if(!o)continue;a.x=s.x+o*e}else if("y"===n){if(!o)continue;a.y=s.y+o*e}else if(o instanceof p.TransformData){if(!o.value)continue;a[n].value=s[n].value+o.value*e,a[n].unit=o.unit,r.push(n+"("+a[n].value+o.unit+")")}else{if(!o)continue;a[n]=s[n]+o*e,i.dom.el.style[n]=a[n]}(a.x||a.y)&&r.unshift("translate("+a.x+"px, "+a.y+"px)"),r.length&&(i.dom.el.style[p.features.transformProp]=r.join(" ")),i.callActions("afterApplyTween",arguments)},applyStylesIn:function(t){var e=this,i=t.posIn,n=1!==e.mixer.effectsIn.opacity,o=[];e.callActions("beforeApplyStylesIn",arguments),o.push("translate("+i.x+"px, "+i.y+"px)"),e.mixer.config.animation.animateResizeTargets&&("show"!==t.statusChange&&(e.dom.el.style.width=i.width+"px",e.dom.el.style.height=i.height+"px"),e.dom.el.style.marginRight=i.marginRight+"px",e.dom.el.style.marginBottom=i.marginBottom+"px"),n&&(e.dom.el.style.opacity=i.opacity),"show"===t.statusChange&&(o=o.concat(e.mixer.transformIn)),e.dom.el.style[p.features.transformProp]=o.join(" "),e.callActions("afterApplyStylesIn",arguments)},applyStylesOut:function(t){var e=this,i=[],n=[],o=e.mixer.config.animation.animateResizeTargets,s=void 0!==e.mixer.effectsIn.opacity;if(e.callActions("beforeApplyStylesOut",arguments),i.push(e.writeTransitionRule(p.features.transformRule,t.staggerIndex)),"none"!==t.statusChange&&i.push(e.writeTransitionRule("opacity",t.staggerIndex,t.duration)),o&&(i.push(e.writeTransitionRule("width",t.staggerIndex,t.duration)),i.push(e.writeTransitionRule("height",t.staggerIndex,t.duration)),i.push(e.writeTransitionRule("margin",t.staggerIndex,t.duration))),!t.callback)return e.mixer.targetsImmovable++,void(e.mixer.targetsMoved===e.mixer.targetsImmovable&&e.mixer.cleanUp(t.operation));switch(e.operation=t.operation,e.callback=t.callback,e.isExcluded||e.mixer.targetsBound++,e.isBound=!0,e.applyTransition(i),o&&0<t.posOut.width&&0<t.posOut.height&&(e.dom.el.style.width=t.posOut.width+"px",e.dom.el.style.height=t.posOut.height+"px",e.dom.el.style.marginRight=t.posOut.marginRight+"px",e.dom.el.style.marginBottom=t.posOut.marginBottom+"px"),e.mixer.config.animation.nudge||"hide"!==t.statusChange||n.push("translate("+t.posOut.x+"px, "+t.posOut.y+"px)"),t.statusChange){case"hide":s&&(e.dom.el.style.opacity=e.mixer.effectsOut.opacity),n=n.concat(e.mixer.transformOut);break;case"show":s&&(e.dom.el.style.opacity=1)}(e.mixer.config.animation.nudge||!e.mixer.config.animation.nudge&&"hide"!==t.statusChange)&&n.push("translate("+t.posOut.x+"px, "+t.posOut.y+"px)"),e.dom.el.style[p.features.transformProp]=n.join(" "),e.callActions("afterApplyStylesOut",arguments)},writeTransitionRule:function(t,e,i){var n,o=this.getDelay(e);return n=t+" "+(0<i?i:this.mixer.config.animation.duration)+"ms "+o+"ms "+("opacity"===t?"linear":this.mixer.config.animation.easing),this.callFilters("ruleWriteTransitionRule",n,arguments)},getDelay:function(t){var e,i=this;return"function"==typeof i.mixer.config.animation.staggerSequence&&(t=i.mixer.config.animation.staggerSequence.call(i,t,i.state)),e=i.mixer.staggerDuration?t*i.mixer.staggerDuration:0,i.callFilters("delayGetDelay",e,arguments)},applyTransition:function(t){var e=t.join(", ");this.callActions("beforeApplyTransition",arguments),this.dom.el.style[p.features.transitionProp]=e,this.callActions("afterApplyTransition",arguments)},handleTransitionEnd:function(t){var e=this,i=t.propertyName,n=e.mixer.config.animation.animateResizeTargets;e.callActions("beforeHandleTransitionEnd",arguments),e.isBound&&t.target.matches(e.mixer.config.selectors.target)&&(-1<i.indexOf("transform")||-1<i.indexOf("opacity")||n&&-1<i.indexOf("height")||n&&-1<i.indexOf("width")||n&&-1<i.indexOf("margin"))&&(e.callback.call(e,e.operation),e.isBound=!1,e.callback=null,e.operation=null),e.callActions("afterHandleTransitionEnd",arguments)},eventBus:function(t){switch(this.callActions("beforeEventBus",arguments),t.type){case"webkitTransitionEnd":case"transitionend":this.handleTransitionEnd(t)}this.callActions("afterEventBus",arguments)},unbindEvents:function(){var t=this;t.callActions("beforeUnbindEvents",arguments),f.off(t.dom.el,"webkitTransitionEnd",t.handler),f.off(t.dom.el,"transitionend",t.handler),t.callActions("afterUnbindEvents",arguments)},bindEvents:function(){var t,e=this;e.callActions("beforeBindEvents",arguments),t="webkit"===p.features.transitionPrefix?"webkitTransitionEnd":"transitionend",e.handler=function(t){return e.eventBus(t)},f.on(e.dom.el,t,e.handler),e.callActions("afterBindEvents",arguments)},getPosData:function(t){var e=this,i={},n=null,o=new p.StyleData;return e.callActions("beforeGetPosData",arguments),o.x=e.dom.el.offsetLeft,o.y=e.dom.el.offsetTop,(e.mixer.config.animation.animateResizeTargets||t)&&(n=e.dom.el.getBoundingClientRect(),o.top=n.top,o.right=n.right,o.bottom=n.bottom,o.left=n.left,o.width=n.width,o.height=n.height),e.mixer.config.animation.animateResizeTargets&&(i=h.getComputedStyle(e.dom.el),o.marginBottom=parseFloat(i.marginBottom),o.marginRight=parseFloat(i.marginRight)),e.callFilters("posDataGetPosData",o,arguments)},cleanUp:function(){var t=this;t.callActions("beforeCleanUp",arguments),t.dom.el.style[p.features.transformProp]="",t.dom.el.style[p.features.transitionProp]="",t.dom.el.style.opacity="",t.mixer.config.animation.animateResizeTargets&&(t.dom.el.style.width="",t.dom.el.style.height="",t.dom.el.style.marginRight="",t.dom.el.style.marginBottom=""),t.callActions("afterCleanUp",arguments)}}),p.Collection=function(t){var e=null,i=-1;for(this.callActions("beforeConstruct"),i=0;e=t[i];i++)this[i]=e;this.length=t.length,this.callActions("afterConstruct"),f.freeze(this)},p.BaseStatic.call(p.Collection),p.Collection.prototype=Object.create(p.Base.prototype),f.extend(p.Collection.prototype,{constructor:p.Collection,mixitup:function(t){var e=null,i=Array.prototype.slice.call(arguments),n=[],o=-1;for(this.callActions("beforeMixitup"),i.shift(),o=0;e=this[o];o++)n.push(e[t].apply(e,i));return this.callFilters("promiseMixitup",f.all(n,p.libraries),arguments)}}),p.Operation=function(){p.Base.call(this),this.callActions("beforeConstruct"),this.id="",this.args=[],this.command=null,this.showPosData=[],this.toHidePosData=[],this.startState=null,this.newState=null,this.docState=null,this.willSort=!1,this.willChangeLayout=!1,this.hasEffect=!1,this.hasFailed=!1,this.triggerElement=null,this.show=[],this.hide=[],this.matching=[],this.toShow=[],this.toHide=[],this.toMove=[],this.toRemove=[],this.startOrder=[],this.newOrder=[],this.startSort=null,this.newSort=null,this.startFilter=null,this.newFilter=null,this.startDataset=null,this.newDataset=null,this.viewportDeltaX=0,this.viewportDeltaY=0,this.startX=0,this.startY=0,this.startHeight=0,this.startWidth=0,this.newX=0,this.newY=0,this.newHeight=0,this.newWidth=0,this.startContainerClassName="",this.startDisplay="",this.newContainerClassName="",this.newDisplay="",this.callActions("afterConstruct"),f.seal(this)},p.BaseStatic.call(p.Operation),p.Operation.prototype=Object.create(p.Base.prototype),p.Operation.prototype.constructor=p.Operation,p.State=function(){p.Base.call(this),this.callActions("beforeConstruct"),this.id="",this.activeFilter=null,this.activeSort=null,this.activeContainerClassName="",this.container=null,this.targets=[],this.hide=[],this.show=[],this.matching=[],this.totalTargets=-1,this.totalShow=-1,this.totalHide=-1,this.totalMatching=-1,this.hasFailed=!1,this.triggerElement=null,this.activeDataset=null,this.callActions("afterConstruct"),f.seal(this)},p.BaseStatic.call(p.State),p.State.prototype=Object.create(p.Base.prototype),p.State.prototype.constructor=p.State,p.UserInstruction=function(){p.Base.call(this),this.callActions("beforeConstruct"),this.command={},this.animate=!1,this.callback=null,this.callActions("afterConstruct"),f.seal(this)},p.BaseStatic.call(p.UserInstruction),p.UserInstruction.prototype=Object.create(p.Base.prototype),p.UserInstruction.prototype.constructor=p.UserInstruction,p.Messages=function(){p.Base.call(this),this.callActions("beforeConstruct"),this.ERROR_FACTORY_INVALID_CONTAINER="[MixItUp] An invalid selector or element reference was passed to the mixitup factory function",this.ERROR_FACTORY_CONTAINER_NOT_FOUND="[MixItUp] The provided selector yielded no container element",this.ERROR_CONFIG_INVALID_ANIMATION_EFFECTS="[MixItUp] Invalid value for `animation.effects`",this.ERROR_CONFIG_INVALID_CONTROLS_SCOPE="[MixItUp] Invalid value for `controls.scope`",this.ERROR_CONFIG_INVALID_PROPERTY='[MixitUp] Invalid configuration object property "${erroneous}"${suggestion}',this.ERROR_CONFIG_INVALID_PROPERTY_SUGGESTION='. Did you mean "${probableMatch}"?',this.ERROR_CONFIG_DATA_UID_KEY_NOT_SET="[MixItUp] To use the dataset API, a UID key must be specified using `data.uidKey`",this.ERROR_DATASET_INVALID_UID_KEY='[MixItUp] The specified UID key "${uidKey}" is not present on one or more dataset items',this.ERROR_DATASET_DUPLICATE_UID='[MixItUp] The UID "${uid}" was found on two or more dataset items. UIDs must be unique.',this.ERROR_INSERT_INVALID_ARGUMENTS="[MixItUp] Please provider either an index or a sibling and position to insert, not both",this.ERROR_INSERT_PREEXISTING_ELEMENT="[MixItUp] An element to be inserted already exists in the container",this.ERROR_FILTER_INVALID_ARGUMENTS="[MixItUp] Please provide either a selector or collection `.filter()`, not both",this.ERROR_DATASET_NOT_SET="[MixItUp] To use the dataset API with pre-rendered targets, a starting dataset must be set using `load.dataset`",this.ERROR_DATASET_PRERENDERED_MISMATCH="[MixItUp] `load.dataset` does not match pre-rendered targets",this.ERROR_DATASET_RENDERER_NOT_SET="[MixItUp] To insert an element via the dataset API, a target renderer function must be provided to `render.target`",this.ERROR_SORT_NON_EXISTENT_ELEMENT="[MixItUp] An element to be sorted does not already exist in the container",this.WARNING_FACTORY_PREEXISTING_INSTANCE="[MixItUp] WARNING: This element already has an active MixItUp instance. The provided configuration object will be ignored. If you wish to perform additional methods on this instance, please create a reference.",this.WARNING_INSERT_NO_ELEMENTS="[MixItUp] WARNING: No valid elements were passed to `.insert()`",this.WARNING_REMOVE_NO_ELEMENTS="[MixItUp] WARNING: No valid elements were passed to `.remove()`",this.WARNING_MULTIMIX_INSTANCE_QUEUE_FULL="[MixItUp] WARNING: An operation was requested but the MixItUp instance was busy. The operation was rejected because the queue is full or queuing is disabled.",this.WARNING_GET_OPERATION_INSTANCE_BUSY="[MixItUp] WARNING: Operations can be be created while the MixItUp instance is busy.",this.WARNING_NO_PROMISE_IMPLEMENTATION="[MixItUp] WARNING: No Promise implementations could be found. If you wish to use promises with MixItUp please install an ES6 Promise polyfill.",this.WARNING_INCONSISTENT_SORTING_ATTRIBUTES='[MixItUp] WARNING: The requested sorting data attribute "${attribute}" was not present on one or more target elements which may product unexpected sort output',this.callActions("afterConstruct"),this.compileTemplates(),f.seal(this)},p.BaseStatic.call(p.Messages),p.Messages.prototype=Object.create(p.Base.prototype),p.Messages.prototype.constructor=p.Messages,p.Messages.prototype.compileTemplates=function(){var t="",e="";for(t in this)"string"==typeof(e=this[t])&&(this[f.camelCase(t)]=f.template(e))},p.messages=new p.Messages,p.Facade=function(t){p.Base.call(this),this.callActions("beforeConstruct",arguments),this.configure=t.configure.bind(t),this.show=t.show.bind(t),this.hide=t.hide.bind(t),this.filter=t.filter.bind(t),this.toggleOn=t.toggleOn.bind(t),this.toggleOff=t.toggleOff.bind(t),this.sort=t.sort.bind(t),this.changeLayout=t.changeLayout.bind(t),this.multimix=t.multimix.bind(t),this.dataset=t.dataset.bind(t),this.tween=t.tween.bind(t),this.insert=t.insert.bind(t),this.insertBefore=t.insertBefore.bind(t),this.insertAfter=t.insertAfter.bind(t),this.prepend=t.prepend.bind(t),this.append=t.append.bind(t),this.remove=t.remove.bind(t),this.destroy=t.destroy.bind(t),this.forceRefresh=t.forceRefresh.bind(t),this.forceRender=t.forceRender.bind(t),this.isMixing=t.isMixing.bind(t),this.getOperation=t.getOperation.bind(t),this.getConfig=t.getConfig.bind(t),this.getState=t.getState.bind(t),this.callActions("afterConstruct",arguments),f.freeze(this),f.seal(this)},p.BaseStatic.call(p.Facade),p.Facade.prototype=Object.create(p.Base.prototype),p.Facade.prototype.constructor=p.Facade,"object"==typeof exports&&"object"==typeof module?module.exports=p:"function"==typeof define&&define.amd?define(function(){return p}):void 0!==h.mixitup&&"function"==typeof h.mixitup||(h.mixitup=p),p.BaseStatic.call(p.constructor),p.NAME="mixitup",p.CORE_VERSION="3.3.1"}(window),function(e){"undefined"!=typeof jQuery&&jQuery||"function"!=typeof define||!define.amd?"undefined"!=typeof jQuery&&jQuery||"object"!=typeof exports?e(jQuery,document,window,navigator):e(require("jquery"),document,window,navigator):define(["jquery"],function(t){return e(t,document,window,navigator)})}(function(l,c,d,t,u){"use strict";var e,i,n=0,o=(e=t.userAgent,i=/msie\s\d+/i,0<e.search(i)&&i.exec(e).toString().split(" ")[1]<9&&(l("html").addClass("lt-ie9"),!0));Function.prototype.bind||(Function.prototype.bind=function(n){var o=this,s=[].slice;if("function"!=typeof o)throw new TypeError;var r=s.call(arguments,1),a=function(){if(this instanceof a){var t=function(){};t.prototype=o.prototype;var e=new t,i=o.apply(e,r.concat(s.call(arguments)));return Object(i)===i?i:e}return o.apply(n,r.concat(s.call(arguments)))};return a}),Array.prototype.indexOf||(Array.prototype.indexOf=function(t,e){var i;if(null==this)throw new TypeError('"this" is null or not defined');var n=Object(this),o=n.length>>>0;if(0==o)return-1;var s=+e||0;if(Math.abs(s)===1/0&&(s=0),o<=s)return-1;for(i=Math.max(0<=s?s:o-Math.abs(s),0);i<o;){if(i in n&&n[i]===t)return i;i++}return-1});function s(t,e,i){this.VERSION="2.3.1",this.input=t,this.plugin_count=i,this.current_plugin=0,this.calc_count=0,this.update_tm=0,this.old_from=0,this.old_to=0,this.old_min_interval=null,this.raf_id=null,this.dragging=!1,this.force_redraw=!1,this.no_diapason=!1,this.has_tab_index=!0,this.is_key=!1,this.is_update=!1,this.is_start=!0,this.is_finish=!1,this.is_active=!1,this.is_resize=!1,this.is_click=!1,e=e||{},this.$cache={win:l(d),body:l(c.body),input:l(t),cont:null,rs:null,min:null,max:null,from:null,to:null,single:null,bar:null,line:null,s_single:null,s_from:null,s_to:null,shad_single:null,shad_from:null,shad_to:null,edge:null,grid:null,grid_labels:[]},this.coords={x_gap:0,x_pointer:0,w_rs:0,w_rs_old:0,w_handle:0,p_gap:0,p_gap_left:0,p_gap_right:0,p_step:0,p_pointer:0,p_handle:0,p_single_fake:0,p_single_real:0,p_from_fake:0,p_from_real:0,p_to_fake:0,p_to_real:0,p_bar_x:0,p_bar_w:0,grid_gap:0,big_num:0,big:[],big_w:[],big_p:[],big_x:[]},this.labels={w_min:0,w_max:0,w_from:0,w_to:0,w_single:0,p_min:0,p_max:0,p_from_fake:0,p_from_left:0,p_to_fake:0,p_to_left:0,p_single_fake:0,p_single_left:0};var n,o,s,r=this.$cache.input,a=r.prop("value");for(s in n={skin:"flat",type:"single",min:10,max:100,from:null,to:null,step:1,min_interval:0,max_interval:0,drag_interval:!1,values:[],p_values:[],from_fixed:!1,from_min:null,from_max:null,from_shadow:!1,to_fixed:!1,to_min:null,to_max:null,to_shadow:!1,prettify_enabled:!0,prettify_separator:" ",prettify:null,force_edges:!1,keyboard:!0,grid:!1,grid_margin:!0,grid_num:4,grid_snap:!1,hide_min_max:!1,hide_from_to:!1,prefix:"",postfix:"",max_postfix:"",decorate_both:!0,values_separator:" â ",input_values_separator:";",disable:!1,block:!1,extra_classes:"",scope:null,onStart:null,onChange:null,onFinish:null,onUpdate:null},"INPUT"!==r[0].nodeName&&console&&console.warn&&console.warn("Base element should be <input>!",r[0]),(o={skin:r.data("skin"),type:r.data("type"),min:r.data("min"),max:r.data("max"),from:r.data("from"),to:r.data("to"),step:r.data("step"),min_interval:r.data("minInterval"),max_interval:r.data("maxInterval"),drag_interval:r.data("dragInterval"),values:r.data("values"),from_fixed:r.data("fromFixed"),from_min:r.data("fromMin"),from_max:r.data("fromMax"),from_shadow:r.data("fromShadow"),to_fixed:r.data("toFixed"),to_min:r.data("toMin"),to_max:r.data("toMax"),to_shadow:r.data("toShadow"),prettify_enabled:r.data("prettifyEnabled"),prettify_separator:r.data("prettifySeparator"),force_edges:r.data("forceEdges"),keyboard:r.data("keyboard"),grid:r.data("grid"),grid_margin:r.data("gridMargin"),grid_num:r.data("gridNum"),grid_snap:r.data("gridSnap"),hide_min_max:r.data("hideMinMax"),hide_from_to:r.data("hideFromTo"),prefix:r.data("prefix"),postfix:r.data("postfix"),max_postfix:r.data("maxPostfix"),decorate_both:r.data("decorateBoth"),values_separator:r.data("valuesSeparator"),input_values_separator:r.data("inputValuesSeparator"),disable:r.data("disable"),block:r.data("block"),extra_classes:r.data("extraClasses")}).values=o.values&&o.values.split(","),o)o.hasOwnProperty(s)&&(o[s]!==u&&""!==o[s]||delete o[s]);a!==u&&""!==a&&((a=a.split(o.input_values_separator||e.input_values_separator||";"))[0]&&a[0]==+a[0]&&(a[0]=+a[0]),a[1]&&a[1]==+a[1]&&(a[1]=+a[1]),e&&e.values&&e.values.length?(n.from=a[0]&&e.values.indexOf(a[0]),n.to=a[1]&&e.values.indexOf(a[1])):(n.from=a[0]&&+a[0],n.to=a[1]&&+a[1])),l.extend(n,e),l.extend(n,o),this.options=n,this.update_check={},this.validate(),this.result={input:this.$cache.input,slider:null,min:this.options.min,max:this.options.max,from:this.options.from,from_percent:0,from_value:null,to:this.options.to,to_percent:0,to_value:null},this.init()}s.prototype={init:function(t){this.no_diapason=!1,this.coords.p_step=this.convertToPercent(this.options.step,!0),this.target="base",this.toggleInput(),this.append(),this.setMinMax(),t?(this.force_redraw=!0,this.calc(!0),this.callOnUpdate()):(this.force_redraw=!0,this.calc(!0),this.callOnStart()),this.updateScene()},append:function(){var t='<span class="irs irs--'+this.options.skin+" js-irs-"+this.plugin_count+" "+this.options.extra_classes+'"></span>';this.$cache.input.before(t),this.$cache.input.prop("readonly",!0),this.$cache.cont=this.$cache.input.prev(),this.result.slider=this.$cache.cont,this.$cache.cont.html('<span class="irs"><span class="irs-line" tabindex="0"></span><span class="irs-min">0</span><span class="irs-max">1</span><span class="irs-from">0</span><span class="irs-to">0</span><span class="irs-single">0</span></span><span class="irs-grid"></span>'),this.$cache.rs=this.$cache.cont.find(".irs"),this.$cache.min=this.$cache.cont.find(".irs-min"),this.$cache.max=this.$cache.cont.find(".irs-max"),this.$cache.from=this.$cache.cont.find(".irs-from"),this.$cache.to=this.$cache.cont.find(".irs-to"),this.$cache.single=this.$cache.cont.find(".irs-single"),this.$cache.line=this.$cache.cont.find(".irs-line"),this.$cache.grid=this.$cache.cont.find(".irs-grid"),"single"===this.options.type?(this.$cache.cont.append('<span class="irs-bar irs-bar--single"></span><span class="irs-shadow shadow-single"></span><span class="irs-handle single"><i></i><i></i><i></i></span>'),this.$cache.bar=this.$cache.cont.find(".irs-bar"),this.$cache.edge=this.$cache.cont.find(".irs-bar-edge"),this.$cache.s_single=this.$cache.cont.find(".single"),this.$cache.from[0].style.visibility="hidden",this.$cache.to[0].style.visibility="hidden",this.$cache.shad_single=this.$cache.cont.find(".shadow-single")):(this.$cache.cont.append('<span class="irs-bar"></span><span class="irs-shadow shadow-from"></span><span class="irs-shadow shadow-to"></span><span class="irs-handle from"><i></i><i></i><i></i></span><span class="irs-handle to"><i></i><i></i><i></i></span>'),this.$cache.bar=this.$cache.cont.find(".irs-bar"),this.$cache.s_from=this.$cache.cont.find(".from"),this.$cache.s_to=this.$cache.cont.find(".to"),this.$cache.shad_from=this.$cache.cont.find(".shadow-from"),this.$cache.shad_to=this.$cache.cont.find(".shadow-to"),this.setTopHandler()),this.options.hide_from_to&&(this.$cache.from[0].style.display="none",this.$cache.to[0].style.display="none",this.$cache.single[0].style.display="none"),this.appendGrid(),this.options.disable?(this.appendDisableMask(),this.$cache.input[0].disabled=!0):(this.$cache.input[0].disabled=!1,this.removeDisableMask(),this.bindEvents()),this.options.disable||(this.options.block?this.appendDisableMask():this.removeDisableMask()),this.options.drag_interval&&(this.$cache.bar[0].style.cursor="ew-resize")},setTopHandler:function(){var t=this.options.min,e=this.options.max,i=this.options.from,n=this.options.to;t<i&&n===e?this.$cache.s_from.addClass("type_last"):n<e&&this.$cache.s_to.addClass("type_last")},changeLevel:function(t){switch(t){case"single":this.coords.p_gap=this.toFixed(this.coords.p_pointer-this.coords.p_single_fake),this.$cache.s_single.addClass("state_hover");break;case"from":this.coords.p_gap=this.toFixed(this.coords.p_pointer-this.coords.p_from_fake),this.$cache.s_from.addClass("state_hover"),this.$cache.s_from.addClass("type_last"),this.$cache.s_to.removeClass("type_last");break;case"to":this.coords.p_gap=this.toFixed(this.coords.p_pointer-this.coords.p_to_fake),this.$cache.s_to.addClass("state_hover"),this.$cache.s_to.addClass("type_last"),this.$cache.s_from.removeClass("type_last");break;case"both":this.coords.p_gap_left=this.toFixed(this.coords.p_pointer-this.coords.p_from_fake),this.coords.p_gap_right=this.toFixed(this.coords.p_to_fake-this.coords.p_pointer),this.$cache.s_to.removeClass("type_last"),this.$cache.s_from.removeClass("type_last")}},appendDisableMask:function(){this.$cache.cont.append('<span class="irs-disable-mask"></span>'),this.$cache.cont.addClass("irs-disabled")},removeDisableMask:function(){this.$cache.cont.remove(".irs-disable-mask"),this.$cache.cont.removeClass("irs-disabled")},remove:function(){this.$cache.cont.remove(),this.$cache.cont=null,this.$cache.line.off("keydown.irs_"+this.plugin_count),this.$cache.body.off("touchmove.irs_"+this.plugin_count),this.$cache.body.off("mousemove.irs_"+this.plugin_count),this.$cache.win.off("touchend.irs_"+this.plugin_count),this.$cache.win.off("mouseup.irs_"+this.plugin_count),o&&(this.$cache.body.off("mouseup.irs_"+this.plugin_count),this.$cache.body.off("mouseleave.irs_"+this.plugin_count)),this.$cache.grid_labels=[],this.coords.big=[],this.coords.big_w=[],this.coords.big_p=[],this.coords.big_x=[],cancelAnimationFrame(this.raf_id)},bindEvents:function(){this.no_diapason||(this.$cache.body.on("touchmove.irs_"+this.plugin_count,this.pointerMove.bind(this)),this.$cache.body.on("mousemove.irs_"+this.plugin_count,this.pointerMove.bind(this)),this.$cache.win.on("touchend.irs_"+this.plugin_count,this.pointerUp.bind(this)),this.$cache.win.on("mouseup.irs_"+this.plugin_count,this.pointerUp.bind(this)),this.$cache.line.on("touchstart.irs_"+this.plugin_count,this.pointerClick.bind(this,"click")),this.$cache.line.on("mousedown.irs_"+this.plugin_count,this.pointerClick.bind(this,"click")),this.$cache.line.on("focus.irs_"+this.plugin_count,this.pointerFocus.bind(this)),this.options.drag_interval&&"double"===this.options.type?(this.$cache.bar.on("touchstart.irs_"+this.plugin_count,this.pointerDown.bind(this,"both")),this.$cache.bar.on("mousedown.irs_"+this.plugin_count,this.pointerDown.bind(this,"both"))):(this.$cache.bar.on("touchstart.irs_"+this.plugin_count,this.pointerClick.bind(this,"click")),this.$cache.bar.on("mousedown.irs_"+this.plugin_count,this.pointerClick.bind(this,"click"))),"single"===this.options.type?(this.$cache.single.on("touchstart.irs_"+this.plugin_count,this.pointerDown.bind(this,"single")),this.$cache.s_single.on("touchstart.irs_"+this.plugin_count,this.pointerDown.bind(this,"single")),this.$cache.shad_single.on("touchstart.irs_"+this.plugin_count,this.pointerClick.bind(this,"click")),this.$cache.single.on("mousedown.irs_"+this.plugin_count,this.pointerDown.bind(this,"single")),this.$cache.s_single.on("mousedown.irs_"+this.plugin_count,this.pointerDown.bind(this,"single")),this.$cache.edge.on("mousedown.irs_"+this.plugin_count,this.pointerClick.bind(this,"click")),this.$cache.shad_single.on("mousedown.irs_"+this.plugin_count,this.pointerClick.bind(this,"click"))):(this.$cache.single.on("touchstart.irs_"+this.plugin_count,this.pointerDown.bind(this,null)),this.$cache.single.on("mousedown.irs_"+this.plugin_count,this.pointerDown.bind(this,null)),this.$cache.from.on("touchstart.irs_"+this.plugin_count,this.pointerDown.bind(this,"from")),this.$cache.s_from.on("touchstart.irs_"+this.plugin_count,this.pointerDown.bind(this,"from")),this.$cache.to.on("touchstart.irs_"+this.plugin_count,this.pointerDown.bind(this,"to")),this.$cache.s_to.on("touchstart.irs_"+this.plugin_count,this.pointerDown.bind(this,"to")),this.$cache.shad_from.on("touchstart.irs_"+this.plugin_count,this.pointerClick.bind(this,"click")),this.$cache.shad_to.on("touchstart.irs_"+this.plugin_count,this.pointerClick.bind(this,"click")),this.$cache.from.on("mousedown.irs_"+this.plugin_count,this.pointerDown.bind(this,"from")),this.$cache.s_from.on("mousedown.irs_"+this.plugin_count,this.pointerDown.bind(this,"from")),this.$cache.to.on("mousedown.irs_"+this.plugin_count,this.pointerDown.bind(this,"to")),this.$cache.s_to.on("mousedown.irs_"+this.plugin_count,this.pointerDown.bind(this,"to")),this.$cache.shad_from.on("mousedown.irs_"+this.plugin_count,this.pointerClick.bind(this,"click")),this.$cache.shad_to.on("mousedown.irs_"+this.plugin_count,this.pointerClick.bind(this,"click"))),this.options.keyboard&&this.$cache.line.on("keydown.irs_"+this.plugin_count,this.key.bind(this,"keyboard")),o&&(this.$cache.body.on("mouseup.irs_"+this.plugin_count,this.pointerUp.bind(this)),this.$cache.body.on("mouseleave.irs_"+this.plugin_count,this.pointerUp.bind(this))))},pointerFocus:function(t){var e,i;this.target||(e=(i="single"===this.options.type?this.$cache.single:this.$cache.from).offset().left,e+=i.width()/2-1,this.pointerClick("single",{preventDefault:function(){},pageX:e}))},pointerMove:function(t){if(this.dragging){var e=t.pageX||t.originalEvent.touches&&t.originalEvent.touches[0].pageX;this.coords.x_pointer=e-this.coords.x_gap,this.calc()}},pointerUp:function(t){this.current_plugin===this.plugin_count&&this.is_active&&(this.is_active=!1,this.$cache.cont.find(".state_hover").removeClass("state_hover"),this.force_redraw=!0,o&&l("*").prop("unselectable",!1),this.updateScene(),this.restoreOriginalMinInterval(),(l.contains(this.$cache.cont[0],t.target)||this.dragging)&&this.callOnFinish(),this.dragging=!1)},pointerDown:function(t,e){e.preventDefault();var i=e.pageX||e.originalEvent.touches&&e.originalEvent.touches[0].pageX;2!==e.button&&("both"===t&&this.setTempMinInterval(),t=t||(this.target||"from"),this.current_plugin=this.plugin_count,this.target=t,this.is_active=!0,this.dragging=!0,this.coords.x_gap=this.$cache.rs.offset().left,this.coords.x_pointer=i-this.coords.x_gap,this.calcPointerPercent(),this.changeLevel(t),o&&l("*").prop("unselectable",!0),this.$cache.line.trigger("focus"),this.updateScene())},pointerClick:function(t,e){e.preventDefault();var i=e.pageX||e.originalEvent.touches&&e.originalEvent.touches[0].pageX;2!==e.button&&(this.current_plugin=this.plugin_count,this.target=t,this.is_click=!0,this.coords.x_gap=this.$cache.rs.offset().left,this.coords.x_pointer=+(i-this.coords.x_gap).toFixed(),this.force_redraw=!0,this.calc(),this.$cache.line.trigger("focus"))},key:function(t,e){if(!(this.current_plugin!==this.plugin_count||e.altKey||e.ctrlKey||e.shiftKey||e.metaKey)){switch(e.which){case 83:case 65:case 40:case 37:e.preventDefault(),this.moveByKey(!1);break;case 87:case 68:case 38:case 39:e.preventDefault(),this.moveByKey(!0)}return!0}},moveByKey:function(t){var e=this.coords.p_pointer,i=(this.options.max-this.options.min)/100;i=this.options.step/i,t?e+=i:e-=i,this.coords.x_pointer=this.toFixed(this.coords.w_rs/100*e),this.is_key=!0,this.calc()},setMinMax:function(){if(this.options){if(this.options.hide_min_max)return this.$cache.min[0].style.display="none",void(this.$cache.max[0].style.display="none");if(this.options.values.length)this.$cache.min.html(this.decorate(this.options.p_values[this.options.min])),this.$cache.max.html(this.decorate(this.options.p_values[this.options.max]));else{var t=this._prettify(this.options.min),e=this._prettify(this.options.max);this.result.min_pretty=t,this.result.max_pretty=e,this.$cache.min.html(this.decorate(t,this.options.min)),this.$cache.max.html(this.decorate(e,this.options.max))}this.labels.w_min=this.$cache.min.outerWidth(!1),this.labels.w_max=this.$cache.max.outerWidth(!1)}},setTempMinInterval:function(){var t=this.result.to-this.result.from;null===this.old_min_interval&&(this.old_min_interval=this.options.min_interval),this.options.min_interval=t},restoreOriginalMinInterval:function(){null!==this.old_min_interval&&(this.options.min_interval=this.old_min_interval,this.old_min_interval=null)},calc:function(t){if(this.options&&(this.calc_count++,10!==this.calc_count&&!t||(this.calc_count=0,this.coords.w_rs=this.$cache.rs.outerWidth(!1),this.calcHandlePercent()),this.coords.w_rs)){this.calcPointerPercent();var e=this.getHandleX();switch("both"===this.target&&(this.coords.p_gap=0,e=this.getHandleX()),"click"===this.target&&(this.coords.p_gap=this.coords.p_handle/2,e=this.getHandleX(),this.options.drag_interval?this.target="both_one":this.target=this.chooseHandle(e)),this.target){case"base":var i=(this.options.max-this.options.min)/100,n=(this.result.from-this.options.min)/i,o=(this.result.to-this.options.min)/i;this.coords.p_single_real=this.toFixed(n),this.coords.p_from_real=this.toFixed(n),this.coords.p_to_real=this.toFixed(o),this.coords.p_single_real=this.checkDiapason(this.coords.p_single_real,this.options.from_min,this.options.from_max),this.coords.p_from_real=this.checkDiapason(this.coords.p_from_real,this.options.from_min,this.options.from_max),this.coords.p_to_real=this.checkDiapason(this.coords.p_to_real,this.options.to_min,this.options.to_max),this.coords.p_single_fake=this.convertToFakePercent(this.coords.p_single_real),this.coords.p_from_fake=this.convertToFakePercent(this.coords.p_from_real),this.coords.p_to_fake=this.convertToFakePercent(this.coords.p_to_real),this.target=null;break;case"single":if(this.options.from_fixed)break;this.coords.p_single_real=this.convertToRealPercent(e),this.coords.p_single_real=this.calcWithStep(this.coords.p_single_real),this.coords.p_single_real=this.checkDiapason(this.coords.p_single_real,this.options.from_min,this.options.from_max),this.coords.p_single_fake=this.convertToFakePercent(this.coords.p_single_real);break;case"from":if(this.options.from_fixed)break;this.coords.p_from_real=this.convertToRealPercent(e),this.coords.p_from_real=this.calcWithStep(this.coords.p_from_real),this.coords.p_from_real>this.coords.p_to_real&&(this.coords.p_from_real=this.coords.p_to_real),this.coords.p_from_real=this.checkDiapason(this.coords.p_from_real,this.options.from_min,this.options.from_max),this.coords.p_from_real=this.checkMinInterval(this.coords.p_from_real,this.coords.p_to_real,"from"),this.coords.p_from_real=this.checkMaxInterval(this.coords.p_from_real,this.coords.p_to_real,"from"),this.coords.p_from_fake=this.convertToFakePercent(this.coords.p_from_real);break;case"to":if(this.options.to_fixed)break;this.coords.p_to_real=this.convertToRealPercent(e),this.coords.p_to_real=this.calcWithStep(this.coords.p_to_real),this.coords.p_to_real<this.coords.p_from_real&&(this.coords.p_to_real=this.coords.p_from_real),this.coords.p_to_real=this.checkDiapason(this.coords.p_to_real,this.options.to_min,this.options.to_max),this.coords.p_to_real=this.checkMinInterval(this.coords.p_to_real,this.coords.p_from_real,"to"),this.coords.p_to_real=this.checkMaxInterval(this.coords.p_to_real,this.coords.p_from_real,"to"),this.coords.p_to_fake=this.convertToFakePercent(this.coords.p_to_real);break;case"both":if(this.options.from_fixed||this.options.to_fixed)break;e=this.toFixed(e+.001*this.coords.p_handle),this.coords.p_from_real=this.convertToRealPercent(e)-this.coords.p_gap_left,this.coords.p_from_real=this.calcWithStep(this.coords.p_from_real),this.coords.p_from_real=this.checkDiapason(this.coords.p_from_real,this.options.from_min,this.options.from_max),this.coords.p_from_real=this.checkMinInterval(this.coords.p_from_real,this.coords.p_to_real,"from"),this.coords.p_from_fake=this.convertToFakePercent(this.coords.p_from_real),this.coords.p_to_real=this.convertToRealPercent(e)+this.coords.p_gap_right,this.coords.p_to_real=this.calcWithStep(this.coords.p_to_real),this.coords.p_to_real=this.checkDiapason(this.coords.p_to_real,this.options.to_min,this.options.to_max),this.coords.p_to_real=this.checkMinInterval(this.coords.p_to_real,this.coords.p_from_real,"to"),this.coords.p_to_fake=this.convertToFakePercent(this.coords.p_to_real);break;case"both_one":if(this.options.from_fixed||this.options.to_fixed)break;var s=this.convertToRealPercent(e),r=this.result.from_percent,a=this.result.to_percent-r,l=a/2,c=s-l,d=s+l;c<0&&(d=(c=0)+a),100<d&&(c=(d=100)-a),this.coords.p_from_real=this.calcWithStep(c),this.coords.p_from_real=this.checkDiapason(this.coords.p_from_real,this.options.from_min,this.options.from_max),this.coords.p_from_fake=this.convertToFakePercent(this.coords.p_from_real),this.coords.p_to_real=this.calcWithStep(d),this.coords.p_to_real=this.checkDiapason(this.coords.p_to_real,this.options.to_min,this.options.to_max),this.coords.p_to_fake=this.convertToFakePercent(this.coords.p_to_real)}"single"===this.options.type?(this.coords.p_bar_x=this.coords.p_handle/2,this.coords.p_bar_w=this.coords.p_single_fake,this.result.from_percent=this.coords.p_single_real,this.result.from=this.convertToValue(this.coords.p_single_real),this.result.from_pretty=this._prettify(this.result.from),this.options.values.length&&(this.result.from_value=this.options.values[this.result.from])):(this.coords.p_bar_x=this.toFixed(this.coords.p_from_fake+this.coords.p_handle/2),this.coords.p_bar_w=this.toFixed(this.coords.p_to_fake-this.coords.p_from_fake),this.result.from_percent=this.coords.p_from_real,this.result.from=this.convertToValue(this.coords.p_from_real),this.result.from_pretty=this._prettify(this.result.from),this.result.to_percent=this.coords.p_to_real,this.result.to=this.convertToValue(this.coords.p_to_real),this.result.to_pretty=this._prettify(this.result.to),this.options.values.length&&(this.result.from_value=this.options.values[this.result.from],this.result.to_value=this.options.values[this.result.to])),this.calcMinMax(),this.calcLabels()}},calcPointerPercent:function(){this.coords.w_rs?(this.coords.x_pointer<0||isNaN(this.coords.x_pointer)?this.coords.x_pointer=0:this.coords.x_pointer>this.coords.w_rs&&(this.coords.x_pointer=this.coords.w_rs),this.coords.p_pointer=this.toFixed(this.coords.x_pointer/this.coords.w_rs*100)):this.coords.p_pointer=0},convertToRealPercent:function(t){return t/(100-this.coords.p_handle)*100},convertToFakePercent:function(t){return t/100*(100-this.coords.p_handle)},getHandleX:function(){var t=100-this.coords.p_handle,e=this.toFixed(this.coords.p_pointer-this.coords.p_gap);return e<0?e=0:t<e&&(e=t),e},calcHandlePercent:function(){"single"===this.options.type?this.coords.w_handle=this.$cache.s_single.outerWidth(!1):this.coords.w_handle=this.$cache.s_from.outerWidth(!1),this.coords.p_handle=this.toFixed(this.coords.w_handle/this.coords.w_rs*100)},chooseHandle:function(t){return"single"===this.options.type?"single":this.coords.p_from_real+(this.coords.p_to_real-this.coords.p_from_real)/2<=t?this.options.to_fixed?"from":"to":this.options.from_fixed?"to":"from"},calcMinMax:function(){this.coords.w_rs&&(this.labels.p_min=this.labels.w_min/this.coords.w_rs*100,this.labels.p_max=this.labels.w_max/this.coords.w_rs*100)},calcLabels:function(){this.coords.w_rs&&!this.options.hide_from_to&&("single"===this.options.type?(this.labels.w_single=this.$cache.single.outerWidth(!1),this.labels.p_single_fake=this.labels.w_single/this.coords.w_rs*100,this.labels.p_single_left=this.coords.p_single_fake+this.coords.p_handle/2-this.labels.p_single_fake/2):(this.labels.w_from=this.$cache.from.outerWidth(!1),this.labels.p_from_fake=this.labels.w_from/this.coords.w_rs*100,this.labels.p_from_left=this.coords.p_from_fake+this.coords.p_handle/2-this.labels.p_from_fake/2,this.labels.p_from_left=this.toFixed(this.labels.p_from_left),this.labels.p_from_left=this.checkEdges(this.labels.p_from_left,this.labels.p_from_fake),this.labels.w_to=this.$cache.to.outerWidth(!1),this.labels.p_to_fake=this.labels.w_to/this.coords.w_rs*100,this.labels.p_to_left=this.coords.p_to_fake+this.coords.p_handle/2-this.labels.p_to_fake/2,this.labels.p_to_left=this.toFixed(this.labels.p_to_left),this.labels.p_to_left=this.checkEdges(this.labels.p_to_left,this.labels.p_to_fake),this.labels.w_single=this.$cache.single.outerWidth(!1),this.labels.p_single_fake=this.labels.w_single/this.coords.w_rs*100,this.labels.p_single_left=(this.labels.p_from_left+this.labels.p_to_left+this.labels.p_to_fake)/2-this.labels.p_single_fake/2,this.labels.p_single_left=this.toFixed(this.labels.p_single_left)),this.labels.p_single_left=this.checkEdges(this.labels.p_single_left,this.labels.p_single_fake))},updateScene:function(){this.raf_id&&(cancelAnimationFrame(this.raf_id),this.raf_id=null),clearTimeout(this.update_tm),this.update_tm=null,this.options&&(this.drawHandles(),this.is_active?this.raf_id=requestAnimationFrame(this.updateScene.bind(this)):this.update_tm=setTimeout(this.updateScene.bind(this),300))},drawHandles:function(){this.coords.w_rs=this.$cache.rs.outerWidth(!1),this.coords.w_rs&&(this.coords.w_rs!==this.coords.w_rs_old&&(this.target="base",this.is_resize=!0),this.coords.w_rs===this.coords.w_rs_old&&!this.force_redraw||(this.setMinMax(),this.calc(!0),this.drawLabels(),this.options.grid&&(this.calcGridMargin(),this.calcGridLabels()),this.force_redraw=!0,this.coords.w_rs_old=this.coords.w_rs,this.drawShadow()),this.coords.w_rs&&(this.dragging||this.force_redraw||this.is_key)&&((this.old_from!==this.result.from||this.old_to!==this.result.to||this.force_redraw||this.is_key)&&(this.drawLabels(),this.$cache.bar[0].style.left=this.coords.p_bar_x+"%",this.$cache.bar[0].style.width=this.coords.p_bar_w+"%","single"===this.options.type?(this.$cache.bar[0].style.left=0,this.$cache.bar[0].style.width=this.coords.p_bar_w+this.coords.p_bar_x+"%",this.$cache.s_single[0].style.left=this.coords.p_single_fake+"%"):(this.$cache.s_from[0].style.left=this.coords.p_from_fake+"%",this.$cache.s_to[0].style.left=this.coords.p_to_fake+"%",this.old_from===this.result.from&&!this.force_redraw||(this.$cache.from[0].style.left=this.labels.p_from_left+"%"),this.old_to===this.result.to&&!this.force_redraw||(this.$cache.to[0].style.left=this.labels.p_to_left+"%")),this.$cache.single[0].style.left=this.labels.p_single_left+"%",this.writeToInput(),this.old_from===this.result.from&&this.old_to===this.result.to||this.is_start||(this.$cache.input.trigger("change"),this.$cache.input.trigger("input")),this.old_from=this.result.from,this.old_to=this.result.to,this.is_resize||this.is_update||this.is_start||this.is_finish||this.callOnChange(),(this.is_key||this.is_click)&&(this.is_key=!1,this.is_click=!1,this.callOnFinish()),this.is_update=!1,this.is_resize=!1,this.is_finish=!1),this.is_start=!1,this.is_key=!1,this.is_click=!1,this.force_redraw=!1))},drawLabels:function(){if(this.options){var t,e,i,n,o,s=this.options.values.length,r=this.options.p_values;if(!this.options.hide_from_to)if("single"===this.options.type)t=s?this.decorate(r[this.result.from]):(n=this._prettify(this.result.from),this.decorate(n,this.result.from)),this.$cache.single.html(t),this.calcLabels(),this.labels.p_single_left<this.labels.p_min+1?this.$cache.min[0].style.visibility="hidden":this.$cache.min[0].style.visibility="visible",this.labels.p_single_left+this.labels.p_single_fake>100-this.labels.p_max-1?this.$cache.max[0].style.visibility="hidden":this.$cache.max[0].style.visibility="visible";else{i=s?(this.options.decorate_both?(t=this.decorate(r[this.result.from]),t+=this.options.values_separator,t+=this.decorate(r[this.result.to])):t=this.decorate(r[this.result.from]+this.options.values_separator+r[this.result.to]),e=this.decorate(r[this.result.from]),this.decorate(r[this.result.to])):(n=this._prettify(this.result.from),o=this._prettify(this.result.to),this.options.decorate_both?(t=this.decorate(n,this.result.from),t+=this.options.values_separator,t+=this.decorate(o,this.result.to)):t=this.decorate(n+this.options.values_separator+o,this.result.to),e=this.decorate(n,this.result.from),this.decorate(o,this.result.to)),this.$cache.single.html(t),this.$cache.from.html(e),this.$cache.to.html(i),this.calcLabels();var a=Math.min(this.labels.p_single_left,this.labels.p_from_left),l=this.labels.p_single_left+this.labels.p_single_fake,c=this.labels.p_to_left+this.labels.p_to_fake,d=Math.max(l,c);this.labels.p_from_left+this.labels.p_from_fake>=this.labels.p_to_left?(this.$cache.from[0].style.visibility="hidden",this.$cache.to[0].style.visibility="hidden",this.$cache.single[0].style.visibility="visible",d=this.result.from===this.result.to?("from"===this.target?this.$cache.from[0].style.visibility="visible":"to"===this.target?this.$cache.to[0].style.visibility="visible":this.target||(this.$cache.from[0].style.visibility="visible"),this.$cache.single[0].style.visibility="hidden",c):(this.$cache.from[0].style.visibility="hidden",this.$cache.to[0].style.visibility="hidden",this.$cache.single[0].style.visibility="visible",Math.max(l,c))):(this.$cache.from[0].style.visibility="visible",this.$cache.to[0].style.visibility="visible",this.$cache.single[0].style.visibility="hidden"),a<this.labels.p_min+1?this.$cache.min[0].style.visibility="hidden":this.$cache.min[0].style.visibility="visible",d>100-this.labels.p_max-1?this.$cache.max[0].style.visibility="hidden":this.$cache.max[0].style.visibility="visible"}}},drawShadow:function(){var t,e,i,n,o=this.options,s=this.$cache,r="number"==typeof o.from_min&&!isNaN(o.from_min),a="number"==typeof o.from_max&&!isNaN(o.from_max),l="number"==typeof o.to_min&&!isNaN(o.to_min),c="number"==typeof o.to_max&&!isNaN(o.to_max);"single"===o.type?o.from_shadow&&(r||a)?(t=this.convertToPercent(r?o.from_min:o.min),e=this.convertToPercent(a?o.from_max:o.max)-t,t=this.toFixed(t-this.coords.p_handle/100*t),e=this.toFixed(e-this.coords.p_handle/100*e),t+=this.coords.p_handle/2,s.shad_single[0].style.display="block",s.shad_single[0].style.left=t+"%",s.shad_single[0].style.width=e+"%"):s.shad_single[0].style.display="none":(o.from_shadow&&(r||a)?(t=this.convertToPercent(r?o.from_min:o.min),e=this.convertToPercent(a?o.from_max:o.max)-t,t=this.toFixed(t-this.coords.p_handle/100*t),e=this.toFixed(e-this.coords.p_handle/100*e),t+=this.coords.p_handle/2,s.shad_from[0].style.display="block",s.shad_from[0].style.left=t+"%",s.shad_from[0].style.width=e+"%"):s.shad_from[0].style.display="none",o.to_shadow&&(l||c)?(i=this.convertToPercent(l?o.to_min:o.min),n=this.convertToPercent(c?o.to_max:o.max)-i,i=this.toFixed(i-this.coords.p_handle/100*i),n=this.toFixed(n-this.coords.p_handle/100*n),i+=this.coords.p_handle/2,s.shad_to[0].style.display="block",s.shad_to[0].style.left=i+"%",s.shad_to[0].style.width=n+"%"):s.shad_to[0].style.display="none")},writeToInput:function(){"single"===this.options.type?(this.options.values.length?this.$cache.input.prop("value",this.result.from_value):this.$cache.input.prop("value",this.result.from),this.$cache.input.data("from",this.result.from)):(this.options.values.length?this.$cache.input.prop("value",this.result.from_value+this.options.input_values_separator+this.result.to_value):this.$cache.input.prop("value",this.result.from+this.options.input_values_separator+this.result.to),this.$cache.input.data("from",this.result.from),this.$cache.input.data("to",this.result.to))},callOnStart:function(){this.writeToInput(),this.options.onStart&&"function"==typeof this.options.onStart&&(this.options.scope?this.options.onStart.call(this.options.scope,this.result):this.options.onStart(this.result))},callOnChange:function(){this.writeToInput(),this.options.onChange&&"function"==typeof this.options.onChange&&(this.options.scope?this.options.onChange.call(this.options.scope,this.result):this.options.onChange(this.result))},callOnFinish:function(){this.writeToInput(),this.options.onFinish&&"function"==typeof this.options.onFinish&&(this.options.scope?this.options.onFinish.call(this.options.scope,this.result):this.options.onFinish(this.result))},callOnUpdate:function(){this.writeToInput(),this.options.onUpdate&&"function"==typeof this.options.onUpdate&&(this.options.scope?this.options.onUpdate.call(this.options.scope,this.result):this.options.onUpdate(this.result))},toggleInput:function(){this.$cache.input.toggleClass("irs-hidden-input"),this.has_tab_index?this.$cache.input.prop("tabindex",-1):this.$cache.input.removeProp("tabindex"),this.has_tab_index=!this.has_tab_index},convertToPercent:function(t,e){var i,n=this.options.max-this.options.min,o=n/100;return n?(i=(e?t:t-this.options.min)/o,this.toFixed(i)):(this.no_diapason=!0,0)},convertToValue:function(t){var e,i,n=this.options.min,o=this.options.max,s=n.toString().split(".")[1],r=o.toString().split(".")[1],a=0,l=0;if(0===t)return this.options.min;if(100===t)return this.options.max;s&&(a=e=s.length),r&&(a=i=r.length),e&&i&&(a=i<=e?e:i),n<0&&(n=+(n+(l=Math.abs(n))).toFixed(a),o=+(o+l).toFixed(a));var c,d=(o-n)/100*t+n,u=this.options.step.toString().split(".")[1];return d=u?+d.toFixed(u.length):(d/=this.options.step,+(d*=this.options.step).toFixed(0)),l&&(d-=l),(c=u?+d.toFixed(u.length):this.toFixed(d))<this.options.min?c=this.options.min:c>this.options.max&&(c=this.options.max),c},calcWithStep:function(t){var e=Math.round(t/this.coords.p_step)*this.coords.p_step;return 100<e&&(e=100),100===t&&(e=100),this.toFixed(e)},checkMinInterval:function(t,e,i){var n,o,s=this.options;return s.min_interval?(n=this.convertToValue(t),o=this.convertToValue(e),"from"===i?o-n<s.min_interval&&(n=o-s.min_interval):n-o<s.min_interval&&(n=o+s.min_interval),this.convertToPercent(n)):t},checkMaxInterval:function(t,e,i){var n,o,s=this.options;return s.max_interval?(n=this.convertToValue(t),o=this.convertToValue(e),"from"===i?o-n>s.max_interval&&(n=o-s.max_interval):n-o>s.max_interval&&(n=o+s.max_interval),this.convertToPercent(n)):t},checkDiapason:function(t,e,i){var n=this.convertToValue(t),o=this.options;return"number"!=typeof e&&(e=o.min),"number"!=typeof i&&(i=o.max),n<e&&(n=e),i<n&&(n=i),this.convertToPercent(n)},toFixed:function(t){return+(t=t.toFixed(20))},_prettify:function(t){return this.options.prettify_enabled?this.options.prettify&&"function"==typeof this.options.prettify?this.options.prettify(t):this.prettify(t):t},prettify:function(t){return t.toString().replace(/(\d{1,3}(?=(?:\d\d\d)+(?!\d)))/g,"$1"+this.options.prettify_separator)},checkEdges:function(t,e){return this.options.force_edges&&(t<0?t=0:100-e<t&&(t=100-e)),this.toFixed(t)},validate:function(){var t,e,i=this.options,n=this.result,o=i.values,s=o.length;if("string"==typeof i.min&&(i.min=+i.min),"string"==typeof i.max&&(i.max=+i.max),"string"==typeof i.from&&(i.from=+i.from),"string"==typeof i.to&&(i.to=+i.to),"string"==typeof i.step&&(i.step=+i.step),"string"==typeof i.from_min&&(i.from_min=+i.from_min),"string"==typeof i.from_max&&(i.from_max=+i.from_max),"string"==typeof i.to_min&&(i.to_min=+i.to_min),"string"==typeof i.to_max&&(i.to_max=+i.to_max),"string"==typeof i.grid_num&&(i.grid_num=+i.grid_num),i.max<i.min&&(i.max=i.min),s)for(i.p_values=[],i.min=0,i.max=s-1,i.step=1,i.grid_num=i.max,i.grid_snap=!0,e=0;e<s;e++)t=+o[e],t=isNaN(t)?o[e]:(o[e]=t,this._prettify(t)),i.p_values.push(t);"number"==typeof i.from&&!isNaN(i.from)||(i.from=i.min),"number"==typeof i.to&&!isNaN(i.to)||(i.to=i.max),"single"===i.type?(i.from<i.min&&(i.from=i.min),i.from>i.max&&(i.from=i.max)):(i.from<i.min&&(i.from=i.min),i.from>i.max&&(i.from=i.max),i.to<i.min&&(i.to=i.min),i.to>i.max&&(i.to=i.max),this.update_check.from&&(this.update_check.from!==i.from&&i.from>i.to&&(i.from=i.to),this.update_check.to!==i.to&&i.to<i.from&&(i.to=i.from)),i.from>i.to&&(i.from=i.to),i.to<i.from&&(i.to=i.from)),("number"!=typeof i.step||isNaN(i.step)||!i.step||i.step<0)&&(i.step=1),"number"==typeof i.from_min&&i.from<i.from_min&&(i.from=i.from_min),"number"==typeof i.from_max&&i.from>i.from_max&&(i.from=i.from_max),"number"==typeof i.to_min&&i.to<i.to_min&&(i.to=i.to_min),"number"==typeof i.to_max&&i.from>i.to_max&&(i.to=i.to_max),n&&(n.min!==i.min&&(n.min=i.min),n.max!==i.max&&(n.max=i.max),(n.from<n.min||n.from>n.max)&&(n.from=i.from),(n.to<n.min||n.to>n.max)&&(n.to=i.to)),("number"!=typeof i.min_interval||isNaN(i.min_interval)||!i.min_interval||i.min_interval<0)&&(i.min_interval=0),("number"!=typeof i.max_interval||isNaN(i.max_interval)||!i.max_interval||i.max_interval<0)&&(i.max_interval=0),i.min_interval&&i.min_interval>i.max-i.min&&(i.min_interval=i.max-i.min),i.max_interval&&i.max_interval>i.max-i.min&&(i.max_interval=i.max-i.min)},decorate:function(t,e){var i="",n=this.options;return n.prefix&&(i+=n.prefix),i+=t,n.max_postfix&&(n.values.length&&t===n.p_values[n.max]||e===n.max)&&(i+=n.max_postfix,n.postfix&&(i+=" ")),n.postfix&&(i+=n.postfix),i},updateFrom:function(){this.result.from=this.options.from,this.result.from_percent=this.convertToPercent(this.result.from),this.result.from_pretty=this._prettify(this.result.from),this.options.values&&(this.result.from_value=this.options.values[this.result.from])},updateTo:function(){this.result.to=this.options.to,this.result.to_percent=this.convertToPercent(this.result.to),this.result.to_pretty=this._prettify(this.result.to),this.options.values&&(this.result.to_value=this.options.values[this.result.to])},updateResult:function(){this.result.min=this.options.min,this.result.max=this.options.max,this.updateFrom(),this.updateTo()},appendGrid:function(){if(this.options.grid){var t,e,i,n,o,s,r=this.options,a=r.max-r.min,l=r.grid_num,c=0,d=4,u="";for(this.calcGridMargin(),r.grid_snap&&(l=a/r.step),50<l&&(l=50),i=this.toFixed(100/l),4<l&&(d=3),7<l&&(d=2),14<l&&(d=1),28<l&&(d=0),t=0;t<l+1;t++){for(n=d,100<(c=this.toFixed(i*t))&&(c=100),o=((this.coords.big[t]=c)-i*(t-1))/(n+1),e=1;e<=n&&0!==c;e++)u+='<span class="irs-grid-pol small" style="left: '+this.toFixed(c-o*e)+'%"></span>';u+='<span class="irs-grid-pol" style="left: '+c+'%"></span>',s=this.convertToValue(c),u+='<span class="irs-grid-text js-grid-text-'+t+'" style="left: '+c+'%">'+(s=r.values.length?r.p_values[s]:this._prettify(s))+"</span>"}this.coords.big_num=Math.ceil(l+1),this.$cache.cont.addClass("irs-with-grid"),this.$cache.grid.html(u),this.cacheGridLabels()}},cacheGridLabels:function(){var t,e,i=this.coords.big_num;for(e=0;e<i;e++)t=this.$cache.grid.find(".js-grid-text-"+e),this.$cache.grid_labels.push(t);this.calcGridLabels()},calcGridLabels:function(){var t,e,i=[],n=[],o=this.coords.big_num;for(t=0;t<o;t++)this.coords.big_w[t]=this.$cache.grid_labels[t].outerWidth(!1),this.coords.big_p[t]=this.toFixed(this.coords.big_w[t]/this.coords.w_rs*100),this.coords.big_x[t]=this.toFixed(this.coords.big_p[t]/2),i[t]=this.toFixed(this.coords.big[t]-this.coords.big_x[t]),n[t]=this.toFixed(i[t]+this.coords.big_p[t]);for(this.options.force_edges&&(i[0]<-this.coords.grid_gap&&(i[0]=-this.coords.grid_gap,n[0]=this.toFixed(i[0]+this.coords.big_p[0]),this.coords.big_x[0]=this.coords.grid_gap),n[o-1]>100+this.coords.grid_gap&&(n[o-1]=100+this.coords.grid_gap,i[o-1]=this.toFixed(n[o-1]-this.coords.big_p[o-1]),this.coords.big_x[o-1]=this.toFixed(this.coords.big_p[o-1]-this.coords.grid_gap))),this.calcGridCollision(2,i,n),this.calcGridCollision(4,i,n),t=0;t<o;t++)e=this.$cache.grid_labels[t][0],this.coords.big_x[t]!==Number.POSITIVE_INFINITY&&(e.style.marginLeft=-this.coords.big_x[t]+"%")},calcGridCollision:function(t,e,i){var n,o,s,r=this.coords.big_num;for(n=0;n<r&&!(r<=(o=n+t/2));n+=t)s=this.$cache.grid_labels[o][0],i[n]<=e[o]?s.style.visibility="visible":s.style.visibility="hidden"},calcGridMargin:function(){this.options.grid_margin&&(this.coords.w_rs=this.$cache.rs.outerWidth(!1),this.coords.w_rs&&("single"===this.options.type?this.coords.w_handle=this.$cache.s_single.outerWidth(!1):this.coords.w_handle=this.$cache.s_from.outerWidth(!1),this.coords.p_handle=this.toFixed(this.coords.w_handle/this.coords.w_rs*100),this.coords.grid_gap=this.toFixed(this.coords.p_handle/2-.1),this.$cache.grid[0].style.width=this.toFixed(100-this.coords.p_handle)+"%",this.$cache.grid[0].style.left=this.coords.grid_gap+"%"))},update:function(t){this.input&&(this.is_update=!0,this.options.from=this.result.from,this.options.to=this.result.to,this.update_check.from=this.result.from,this.update_check.to=this.result.to,this.options=l.extend(this.options,t),this.validate(),this.updateResult(t),this.toggleInput(),this.remove(),this.init(!0))},reset:function(){this.input&&(this.updateResult(),this.update())},destroy:function(){this.input&&(this.toggleInput(),this.$cache.input.prop("readonly",!1),l.data(this.input,"ionRangeSlider",null),this.remove(),this.input=null,this.options=null)}},l.fn.ionRangeSlider=function(t){return this.each(function(){l.data(this,"ionRangeSlider")||l.data(this,"ionRangeSlider",new s(this,t,n++))})},function(){for(var s=0,t=["ms","moz","webkit","o"],e=0;e<t.length&&!d.requestAnimationFrame;++e)d.requestAnimationFrame=d[t[e]+"RequestAnimationFrame"],d.cancelAnimationFrame=d[t[e]+"CancelAnimationFrame"]||d[t[e]+"CancelRequestAnimationFrame"];d.requestAnimationFrame||(d.requestAnimationFrame=function(t,e){var i=(new Date).getTime(),n=Math.max(0,16-(i-s)),o=d.setTimeout(function(){t(i+n)},n);return s=i+n,o}),d.cancelAnimationFrame||(d.cancelAnimationFrame=function(t){clearTimeout(t)})}()}),function(l,u,g,m){"use strict";if(l.console=l.console||{info:function(t){}},g)if(g.fn.fancybox)console.info("fancyBox already initialized");else{var t,e,i,n,o={closeExisting:!1,loop:!1,gutter:50,keyboard:!0,preventCaptionOverlap:!0,arrows:!0,infobar:!0,smallBtn:"auto",toolbar:"auto",buttons:["zoom","slideShow","thumbs","close"],idleTime:3,protect:!1,modal:!1,image:{preload:!1},ajax:{settings:{data:{fancybox:!0}}},iframe:{tpl:'<iframe id="fancybox-frame{rnd}" name="fancybox-frame{rnd}" class="fancybox-iframe" allowfullscreen="allowfullscreen" allow="autoplay; fullscreen" src=""></iframe>',preload:!0,css:{},attr:{scrolling:"auto"}},video:{tpl:'<video class="fancybox-video" controls controlsList="nodownload" poster="{{poster}}"><source src="{{src}}" type="{{format}}" />Sorry, your browser doesn\'t support embedded videos, <a href="{{src}}">download</a> and watch with your favorite video player!</video>',format:"",autoStart:!0},defaultType:"image",animationEffect:"zoom",animationDuration:366,zoomOpacity:"auto",transitionEffect:"fade",transitionDuration:366,slideClass:"",baseClass:"",baseTpl:'<div class="fancybox-container" role="dialog" tabindex="-1"><div class="fancybox-bg"></div><div class="fancybox-inner"><div class="fancybox-infobar"><span data-fancybox-index></span>&nbsp;/&nbsp;<span data-fancybox-count></span></div><div class="fancybox-toolbar">{{buttons}}</div><div class="fancybox-navigation">{{arrows}}</div><div class="fancybox-stage"></div><div class="fancybox-caption"><div class="fancybox-caption__body"></div></div></div></div>',spinnerTpl:'<div class="fancybox-loading"></div>',errorTpl:'<div class="fancybox-error"><p>{{ERROR}}</p></div>',btnTpl:{download:'<a download data-fancybox-download class="fancybox-button fancybox-button--download" title="{{DOWNLOAD}}" href="javascript:;"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M18.62 17.09V19H5.38v-1.91zm-2.97-6.96L17 11.45l-5 4.87-5-4.87 1.36-1.32 2.68 2.64V5h1.92v7.77z"/></svg></a>',zoom:'<button data-fancybox-zoom class="fancybox-button fancybox-button--zoom" title="{{ZOOM}}"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M18.7 17.3l-3-3a5.9 5.9 0 0 0-.6-7.6 5.9 5.9 0 0 0-8.4 0 5.9 5.9 0 0 0 0 8.4 5.9 5.9 0 0 0 7.7.7l3 3a1 1 0 0 0 1.3 0c.4-.5.4-1 0-1.5zM8.1 13.8a4 4 0 0 1 0-5.7 4 4 0 0 1 5.7 0 4 4 0 0 1 0 5.7 4 4 0 0 1-5.7 0z"/></svg></button>',close:'<button data-fancybox-close class="fancybox-button fancybox-button--close" title="{{CLOSE}}"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M12 10.6L6.6 5.2 5.2 6.6l5.4 5.4-5.4 5.4 1.4 1.4 5.4-5.4 5.4 5.4 1.4-1.4-5.4-5.4 5.4-5.4-1.4-1.4-5.4 5.4z"/></svg></button>',arrowLeft:'<button data-fancybox-prev class="fancybox-button fancybox-button--arrow_left" title="{{PREV}}"><div><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M11.28 15.7l-1.34 1.37L5 12l4.94-5.07 1.34 1.38-2.68 2.72H19v1.94H8.6z"/></svg></div></button>',arrowRight:'<button data-fancybox-next class="fancybox-button fancybox-button--arrow_right" title="{{NEXT}}"><div><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M15.4 12.97l-2.68 2.72 1.34 1.38L19 12l-4.94-5.07-1.34 1.38 2.68 2.72H5v1.94z"/></svg></div></button>',smallBtn:'<button type="button" data-fancybox-close class="fancybox-button fancybox-close-small" title="{{CLOSE}}"><svg xmlns="http://www.w3.org/2000/svg" version="1" viewBox="0 0 24 24"><path d="M13 12l5-5-1-1-5 5-5-5-1 1 5 5-5 5 1 1 5-5 5 5 1-1z"/></svg></button>'},parentEl:"body",hideScrollbar:!0,autoFocus:!0,backFocus:!0,trapFocus:!0,fullScreen:{autoStart:!1},touch:{vertical:!0,momentum:!0},hash:null,media:{},slideShow:{autoStart:!1,speed:3e3},thumbs:{autoStart:!1,hideOnClose:!0,parentEl:".fancybox-container",axis:"y"},wheel:"auto",onInit:g.noop,beforeLoad:g.noop,afterLoad:g.noop,beforeShow:g.noop,afterShow:g.noop,beforeClose:g.noop,afterClose:g.noop,onActivate:g.noop,onDeactivate:g.noop,clickContent:function(t,e){return"image"===t.type&&"zoom"},clickSlide:"close",clickOutside:"close",dblclickContent:!1,dblclickSlide:!1,dblclickOutside:!1,mobile:{preventCaptionOverlap:!1,idleTime:!1,clickContent:function(t,e){return"image"===t.type&&"toggleControls"},clickSlide:function(t,e){return"image"===t.type?"toggleControls":"close"},dblclickContent:function(t,e){return"image"===t.type&&"zoom"},dblclickSlide:function(t,e){return"image"===t.type&&"zoom"}},lang:"en",i18n:{en:{CLOSE:"Close",NEXT:"Next",PREV:"Previous",ERROR:"The requested content cannot be loaded. <br/> Please try again later.",PLAY_START:"Start slideshow",PLAY_STOP:"Pause slideshow",FULL_SCREEN:"Full screen",THUMBS:"Thumbnails",DOWNLOAD:"Download",SHARE:"Share",ZOOM:"Zoom"},de:{CLOSE:"Schlie&szlig;en",NEXT:"Weiter",PREV:"Zur&uuml;ck",ERROR:"Die angeforderten Daten konnten nicht geladen werden. <br/> Bitte versuchen Sie es sp&auml;ter nochmal.",PLAY_START:"Diaschau starten",PLAY_STOP:"Diaschau beenden",FULL_SCREEN:"Vollbild",THUMBS:"Vorschaubilder",DOWNLOAD:"Herunterladen",SHARE:"Teilen",ZOOM:"Vergr&ouml;&szlig;ern"}}},s=g(l),r=g(u),a=0,h=l.requestAnimationFrame||l.webkitRequestAnimationFrame||l.mozRequestAnimationFrame||l.oRequestAnimationFrame||function(t){return l.setTimeout(t,1e3/60)},c=l.cancelAnimationFrame||l.webkitCancelAnimationFrame||l.mozCancelAnimationFrame||l.oCancelAnimationFrame||function(t){l.clearTimeout(t)},d=function(){var t,e=u.createElement("fakeelement"),i={transition:"transitionend",OTransition:"oTransitionEnd",MozTransition:"transitionend",WebkitTransition:"webkitTransitionEnd"};for(t in i)if(e.style[t]!==m)return i[t];return"transitionend"}(),p=function(t){return t&&t.length&&t[0].offsetHeight},f=function(t,e){var i=g.extend(!0,{},t,e);return g.each(e,function(t,e){g.isArray(e)&&(i[t]=e)}),i},y=function(t,e,i){var n=this;n.opts=f({index:i},g.fancybox.defaults),g.isPlainObject(e)&&(n.opts=f(n.opts,e)),g.fancybox.isMobile&&(n.opts=f(n.opts,n.opts.mobile)),n.id=n.opts.id||++a,n.currIndex=parseInt(n.opts.index,10)||0,n.prevIndex=null,n.prevPos=null,n.currPos=0,n.firstRun=!0,n.group=[],n.slides={},n.addContent(t),n.group.length&&n.init()};g.extend(y.prototype,{init:function(){var e,i,n=this,o=n.group[n.currIndex].opts;o.closeExisting&&g.fancybox.close(!0),g("body").addClass("fancybox-active"),!g.fancybox.getInstance()&&!1!==o.hideScrollbar&&!g.fancybox.isMobile&&u.body.scrollHeight>l.innerHeight&&(g("head").append('<style id="fancybox-style-noscroll" type="text/css">.compensate-for-scrollbar{margin-right:'+(l.innerWidth-u.documentElement.clientWidth)+"px;}</style>"),g("body").addClass("compensate-for-scrollbar")),i="",g.each(o.buttons,function(t,e){i+=o.btnTpl[e]||""}),e=g(n.translate(n,o.baseTpl.replace("{{buttons}}",i).replace("{{arrows}}",o.btnTpl.arrowLeft+o.btnTpl.arrowRight))).attr("id","fancybox-container-"+n.id).addClass(o.baseClass).data("FancyBox",n).appendTo(o.parentEl),n.$refs={container:e},["bg","inner","infobar","toolbar","stage","caption","navigation"].forEach(function(t){n.$refs[t]=e.find(".fancybox-"+t)}),n.trigger("onInit"),n.activate(),n.jumpTo(n.currIndex)},translate:function(t,e){var i=t.opts.i18n[t.opts.lang]||t.opts.i18n.en;return e.replace(/\{\{(\w+)\}\}/g,function(t,e){return i[e]===m?t:i[e]})},addContent:function(t){var e,c=this,i=g.makeArray(t);g.each(i,function(t,e){var i,n,o,s,r,a={},l={};g.isPlainObject(e)?l=(a=e).opts||e:"object"===g.type(e)&&g(e).length?(l=(i=g(e)).data()||{},(l=g.extend(!0,{},l,l.options)).$orig=i,a.src=c.opts.src||l.src||i.attr("href"),a.type||a.src||(a.type="inline",a.src=e)):a={type:"html",src:e+""},a.opts=g.extend(!0,{},c.opts,l),g.isArray(l.buttons)&&(a.opts.buttons=l.buttons),g.fancybox.isMobile&&a.opts.mobile&&(a.opts=f(a.opts,a.opts.mobile)),n=a.type||a.opts.type,s=a.src||"",!n&&s&&((o=s.match(/\.(mp4|mov|ogv|webm)((\?|#).*)?$/i))?(n="video",a.opts.video.format||(a.opts.video.format="video/"+("ogv"===o[1]?"ogg":o[1]))):s.match(/(^data:image\/[a-z0-9+\/=]*,)|(\.(jp(e|g|eg)|gif|png|bmp|webp|svg|ico)((\?|#).*)?$)/i)?n="image":s.match(/\.(pdf)((\?|#).*)?$/i)?(n="iframe",a=g.extend(!0,a,{contentType:"pdf",opts:{iframe:{preload:!1}}})):"#"===s.charAt(0)&&(n="inline")),n?a.type=n:c.trigger("objectNeedsType",a),a.contentType||(a.contentType=-1<g.inArray(a.type,["html","inline","ajax"])?"html":a.type),a.index=c.group.length,"auto"==a.opts.smallBtn&&(a.opts.smallBtn=-1<g.inArray(a.type,["html","inline","ajax"])),"auto"===a.opts.toolbar&&(a.opts.toolbar=!a.opts.smallBtn),a.$thumb=a.opts.$thumb||null,a.opts.$trigger&&a.index===c.opts.index&&(a.$thumb=a.opts.$trigger.find("img:first"),a.$thumb.length&&(a.opts.$orig=a.opts.$trigger)),a.$thumb&&a.$thumb.length||!a.opts.$orig||(a.$thumb=a.opts.$orig.find("img:first")),a.$thumb&&!a.$thumb.length&&(a.$thumb=null),a.thumb=a.opts.thumb||(a.$thumb?a.$thumb[0].src:null),"function"===g.type(a.opts.caption)&&(a.opts.caption=a.opts.caption.apply(e,[c,a])),"function"===g.type(c.opts.caption)&&(a.opts.caption=c.opts.caption.apply(e,[c,a])),a.opts.caption instanceof g||(a.opts.caption=a.opts.caption===m?"":a.opts.caption+""),"ajax"===a.type&&1<(r=s.split(/\s+/,2)).length&&(a.src=r.shift(),a.opts.filter=r.shift()),a.opts.modal&&(a.opts=g.extend(!0,a.opts,{trapFocus:!0,infobar:0,toolbar:0,smallBtn:0,keyboard:0,slideShow:0,fullScreen:0,thumbs:0,touch:0,clickContent:!1,clickSlide:!1,clickOutside:!1,dblclickContent:!1,dblclickSlide:!1,dblclickOutside:!1})),c.group.push(a)}),Object.keys(c.slides).length&&(c.updateControls(),(e=c.Thumbs)&&e.isActive&&(e.create(),e.focus()))},addEvents:function(){var n=this;n.removeEvents(),n.$refs.container.on("click.fb-close","[data-fancybox-close]",function(t){t.stopPropagation(),t.preventDefault(),n.close(t)}).on("touchstart.fb-prev click.fb-prev","[data-fancybox-prev]",function(t){t.stopPropagation(),t.preventDefault(),n.previous()}).on("touchstart.fb-next click.fb-next","[data-fancybox-next]",function(t){t.stopPropagation(),t.preventDefault(),n.next()}).on("click.fb","[data-fancybox-zoom]",function(t){n[n.isScaledDown()?"scaleToActual":"scaleToFit"]()}),s.on("orientationchange.fb resize.fb",function(t){t&&t.originalEvent&&"resize"===t.originalEvent.type?(n.requestId&&c(n.requestId),n.requestId=h(function(){n.update(t)})):(n.current&&"iframe"===n.current.type&&n.$refs.stage.hide(),setTimeout(function(){n.$refs.stage.show(),n.update(t)},g.fancybox.isMobile?600:250))}),r.on("keydown.fb",function(t){var e=(g.fancybox?g.fancybox.getInstance():null).current,i=t.keyCode||t.which;if(9!=i){if(!(!e.opts.keyboard||t.ctrlKey||t.altKey||t.shiftKey||g(t.target).is("input,textarea,video,audio,select")))return 8===i||27===i?(t.preventDefault(),void n.close(t)):37===i||38===i?(t.preventDefault(),void n.previous()):39===i||40===i?(t.preventDefault(),void n.next()):void n.trigger("afterKeydown",t,i)}else e.opts.trapFocus&&n.focus(t)}),n.group[n.currIndex].opts.idleTime&&(n.idleSecondsCounter=0,r.on("mousemove.fb-idle mouseleave.fb-idle mousedown.fb-idle touchstart.fb-idle touchmove.fb-idle scroll.fb-idle keydown.fb-idle",function(t){n.idleSecondsCounter=0,n.isIdle&&n.showControls(),n.isIdle=!1}),n.idleInterval=l.setInterval(function(){n.idleSecondsCounter++,n.idleSecondsCounter>=n.group[n.currIndex].opts.idleTime&&!n.isDragging&&(n.isIdle=!0,n.idleSecondsCounter=0,n.hideControls())},1e3))},removeEvents:function(){s.off("orientationchange.fb resize.fb"),r.off("keydown.fb .fb-idle"),this.$refs.container.off(".fb-close .fb-prev .fb-next"),this.idleInterval&&(l.clearInterval(this.idleInterval),this.idleInterval=null)},previous:function(t){return this.jumpTo(this.currPos-1,t)},next:function(t){return this.jumpTo(this.currPos+1,t)},jumpTo:function(t,n){var e,i,o,s,r,a,l,c,d,u=this,h=u.group.length;if(!(u.isDragging||u.isClosing||u.isAnimating&&u.firstRun)){if(t=parseInt(t,10),!(o=u.current?u.current.opts.loop:u.opts.loop)&&(t<0||h<=t))return!1;if(e=u.firstRun=!Object.keys(u.slides).length,r=u.current,u.prevIndex=u.currIndex,u.prevPos=u.currPos,s=u.createSlide(t),1<h&&((o||s.index<h-1)&&u.createSlide(t+1),(o||0<s.index)&&u.createSlide(t-1)),u.current=s,u.currIndex=s.index,u.currPos=s.pos,u.trigger("beforeShow",e),u.updateControls(),s.forcedDuration=m,g.isNumeric(n)?s.forcedDuration=n:n=s.opts[e?"animationDuration":"transitionDuration"],n=parseInt(n,10),i=u.isMoved(s),s.$slide.addClass("fancybox-slide--current"),e)return s.opts.animationEffect&&n&&u.$refs.container.css("transition-duration",n+"ms"),u.$refs.container.addClass("fancybox-is-open").trigger("focus"),u.loadSlide(s),void u.preload("image");a=g.fancybox.getTranslate(r.$slide),l=g.fancybox.getTranslate(u.$refs.stage),g.each(u.slides,function(t,e){g.fancybox.stop(e.$slide,!0)}),r.pos!==s.pos&&(r.isComplete=!1),r.$slide.removeClass("fancybox-slide--complete fancybox-slide--current"),i?(d=a.left-(r.pos*a.width+r.pos*r.opts.gutter),g.each(u.slides,function(t,e){e.$slide.removeClass("fancybox-animated").removeClass(function(t,e){return(e.match(/(^|\s)fancybox-fx-\S+/g)||[]).join(" ")});var i=e.pos*a.width+e.pos*e.opts.gutter;g.fancybox.setTranslate(e.$slide,{top:0,left:i-l.left+d}),e.pos!==s.pos&&e.$slide.addClass("fancybox-slide--"+(e.pos>s.pos?"next":"previous")),p(e.$slide),g.fancybox.animate(e.$slide,{top:0,left:(e.pos-s.pos)*a.width+(e.pos-s.pos)*e.opts.gutter},n,function(){e.$slide.css({transform:"",opacity:""}).removeClass("fancybox-slide--next fancybox-slide--previous"),e.pos===u.currPos&&u.complete()})})):n&&s.opts.transitionEffect&&(c="fancybox-animated fancybox-fx-"+s.opts.transitionEffect,r.$slide.addClass("fancybox-slide--"+(r.pos>s.pos?"next":"previous")),g.fancybox.animate(r.$slide,c,n,function(){r.$slide.removeClass(c).removeClass("fancybox-slide--next fancybox-slide--previous")},!1)),s.isLoaded?u.revealContent(s):u.loadSlide(s),u.preload("image")}},createSlide:function(t){var e,i,n=this;return i=(i=t%n.group.length)<0?n.group.length+i:i,!n.slides[t]&&n.group[i]&&(e=g('<div class="fancybox-slide"></div>').appendTo(n.$refs.stage),n.slides[t]=g.extend(!0,{},n.group[i],{pos:t,$slide:e,isLoaded:!1}),n.updateSlide(n.slides[t])),n.slides[t]},scaleToActual:function(t,e,i){var n,o,s,r,a,l=this,c=l.current,d=c.$content,u=g.fancybox.getTranslate(c.$slide).width,h=g.fancybox.getTranslate(c.$slide).height,p=c.width,f=c.height;l.isAnimating||l.isMoved()||!d||"image"!=c.type||!c.isLoaded||c.hasError||(l.isAnimating=!0,g.fancybox.stop(d),t=t===m?.5*u:t,e=e===m?.5*h:e,(n=g.fancybox.getTranslate(d)).top-=g.fancybox.getTranslate(c.$slide).top,n.left-=g.fancybox.getTranslate(c.$slide).left,r=p/n.width,a=f/n.height,o=.5*u-.5*p,s=.5*h-.5*f,u<p&&(0<(o=n.left*r-(t*r-t))&&(o=0),o<u-p&&(o=u-p)),h<f&&(0<(s=n.top*a-(e*a-e))&&(s=0),s<h-f&&(s=h-f)),l.updateCursor(p,f),g.fancybox.animate(d,{top:s,left:o,scaleX:r,scaleY:a},i||366,function(){l.isAnimating=!1}),l.SlideShow&&l.SlideShow.isActive&&l.SlideShow.stop())},scaleToFit:function(t){var e,i=this,n=i.current,o=n.$content;i.isAnimating||i.isMoved()||!o||"image"!=n.type||!n.isLoaded||n.hasError||(i.isAnimating=!0,g.fancybox.stop(o),e=i.getFitPos(n),i.updateCursor(e.width,e.height),g.fancybox.animate(o,{top:e.top,left:e.left,scaleX:e.width/o.width(),scaleY:e.height/o.height()},t||366,function(){i.isAnimating=!1}))},getFitPos:function(t){var e,i,n,o,s=t.$content,r=t.$slide,a=t.width||t.opts.width,l=t.height||t.opts.height,c={};return!!(t.isLoaded&&s&&s.length)&&(e=g.fancybox.getTranslate(this.$refs.stage).width,i=g.fancybox.getTranslate(this.$refs.stage).height,e-=parseFloat(r.css("paddingLeft"))+parseFloat(r.css("paddingRight"))+parseFloat(s.css("marginLeft"))+parseFloat(s.css("marginRight")),i-=parseFloat(r.css("paddingTop"))+parseFloat(r.css("paddingBottom"))+parseFloat(s.css("marginTop"))+parseFloat(s.css("marginBottom")),a&&l||(a=e,l=i),e-.5<(a*=n=Math.min(1,e/a,i/l))&&(a=e),i-.5<(l*=n)&&(l=i),"image"===t.type?(c.top=Math.floor(.5*(i-l))+parseFloat(r.css("paddingTop")),c.left=Math.floor(.5*(e-a))+parseFloat(r.css("paddingLeft"))):"video"===t.contentType&&(a/(o=t.opts.width&&t.opts.height?a/l:t.opts.ratio||16/9)<l?l=a/o:l*o<a&&(a=l*o)),c.width=a,c.height=l,c)},update:function(i){var n=this;g.each(n.slides,function(t,e){n.updateSlide(e,i)})},updateSlide:function(t,e){var i=this,n=t&&t.$content,o=t.width||t.opts.width,s=t.height||t.opts.height,r=t.$slide;i.adjustCaption(t),n&&(o||s||"video"===t.contentType)&&!t.hasError&&(g.fancybox.stop(n),g.fancybox.setTranslate(n,i.getFitPos(t)),t.pos===i.currPos&&(i.isAnimating=!1,i.updateCursor())),i.adjustLayout(t),r.length&&(r.trigger("refresh"),t.pos===i.currPos&&i.$refs.toolbar.add(i.$refs.navigation.find(".fancybox-button--arrow_right")).toggleClass("compensate-for-scrollbar",r.get(0).scrollHeight>r.get(0).clientHeight)),i.trigger("onUpdate",t,e)},centerSlide:function(t){var e=this,i=e.current,n=i.$slide;!e.isClosing&&i&&(n.siblings().css({transform:"",opacity:""}),n.parent().children().removeClass("fancybox-slide--previous fancybox-slide--next"),g.fancybox.animate(n,{top:0,left:0,opacity:1},t===m?0:t,function(){n.css({transform:"",opacity:""}),i.isComplete||e.complete()},!1))},isMoved:function(t){var e,i,n=t||this.current;return!!n&&(i=g.fancybox.getTranslate(this.$refs.stage),e=g.fancybox.getTranslate(n.$slide),!n.$slide.hasClass("fancybox-animated")&&(.5<Math.abs(e.top-i.top)||.5<Math.abs(e.left-i.left)))},updateCursor:function(t,e){var i,n,o=this,s=o.current,r=o.$refs.container;s&&!o.isClosing&&o.Guestures&&(r.removeClass("fancybox-is-zoomable fancybox-can-zoomIn fancybox-can-zoomOut fancybox-can-swipe fancybox-can-pan"),n=!!(i=o.canPan(t,e))||o.isZoomable(),r.toggleClass("fancybox-is-zoomable",n),g("[data-fancybox-zoom]").prop("disabled",!n),i?r.addClass("fancybox-can-pan"):n&&("zoom"===s.opts.clickContent||g.isFunction(s.opts.clickContent)&&"zoom"==s.opts.clickContent(s))?r.addClass("fancybox-can-zoomIn"):s.opts.touch&&(s.opts.touch.vertical||1<o.group.length)&&"video"!==s.contentType&&r.addClass("fancybox-can-swipe"))},isZoomable:function(){var t,e=this.current;if(e&&!this.isClosing&&"image"===e.type&&!e.hasError){if(!e.isLoaded)return!0;if((t=this.getFitPos(e))&&(e.width>t.width||e.height>t.height))return!0}return!1},isScaledDown:function(t,e){var i=!1,n=this.current,o=n.$content;return t!==m&&e!==m?i=t<n.width&&e<n.height:o&&(i=(i=g.fancybox.getTranslate(o)).width<n.width&&i.height<n.height),i},canPan:function(t,e){var i=this.current,n=null,o=!1;return"image"===i.type&&(i.isComplete||t&&e)&&!i.hasError&&(o=this.getFitPos(i),t!==m&&e!==m?n={width:t,height:e}:i.isComplete&&(n=g.fancybox.getTranslate(i.$content)),n&&o&&(o=1.5<Math.abs(n.width-o.width)||1.5<Math.abs(n.height-o.height))),o},loadSlide:function(i){var t,e,n,o=this;if(!i.isLoading&&!i.isLoaded){if(!(i.isLoading=!0)===o.trigger("beforeLoad",i))return i.isLoading=!1;switch(t=i.type,(e=i.$slide).off("refresh").trigger("onReset").addClass(i.opts.slideClass),t){case"image":o.setImage(i);break;case"iframe":o.setIframe(i);break;case"html":o.setContent(i,i.src||i.content);break;case"video":o.setContent(i,i.opts.video.tpl.replace(/\{\{src\}\}/gi,i.src).replace("{{format}}",i.opts.videoFormat||i.opts.video.format||"").replace("{{poster}}",i.thumb||""));break;case"inline":g(i.src).length?o.setContent(i,g(i.src)):o.setError(i);break;case"ajax":o.showLoading(i),n=g.ajax(g.extend({},i.opts.ajax.settings,{url:i.src,success:function(t,e){"success"===e&&o.setContent(i,t)},error:function(t,e){t&&"abort"!==e&&o.setError(i)}})),e.one("onReset",function(){n.abort()});break;default:o.setError(i)}return!0}},setImage:function(e){var t,i=this;setTimeout(function(){var t=e.$image;i.isClosing||!e.isLoading||t&&t.length&&t[0].complete||e.hasError||i.showLoading(e)},50),i.checkSrcset(e),e.$content=g('<div class="fancybox-content"></div>').addClass("fancybox-is-hidden").appendTo(e.$slide.addClass("fancybox-slide--image")),!1!==e.opts.preload&&e.opts.width&&e.opts.height&&e.thumb&&(e.width=e.opts.width,e.height=e.opts.height,(t=u.createElement("img")).onerror=function(){g(this).remove(),e.$ghost=null},t.onload=function(){i.afterLoad(e)},e.$ghost=g(t).addClass("fancybox-image").appendTo(e.$content).attr("src",e.thumb)),i.setBigImage(e)},checkSrcset:function(t){var e,i,n,o,s=t.opts.srcset||t.opts.image.srcset;if(s){n=l.devicePixelRatio||1,o=l.innerWidth*n,(i=s.split(",").map(function(t){var n={};return t.trim().split(/\s+/).forEach(function(t,e){var i=parseInt(t.substring(0,t.length-1),10);if(0===e)return n.url=t;i&&(n.value=i,n.postfix=t[t.length-1])}),n})).sort(function(t,e){return t.value-e.value});for(var r=0;r<i.length;r++){var a=i[r];if("w"===a.postfix&&a.value>=o||"x"===a.postfix&&a.value>=n){e=a;break}}!e&&i.length&&(e=i[i.length-1]),e&&(t.src=e.url,t.width&&t.height&&"w"==e.postfix&&(t.height=t.width/t.height*e.value,t.width=e.value),t.opts.srcset=s)}},setBigImage:function(e){var i=this,t=u.createElement("img"),n=g(t);e.$image=n.one("error",function(){i.setError(e)}).one("load",function(){var t;e.$ghost||(i.resolveImageSlideSize(e,this.naturalWidth,this.naturalHeight),i.afterLoad(e)),i.isClosing||(e.opts.srcset&&((t=e.opts.sizes)&&"auto"!==t||(t=(1<e.width/e.height&&1<s.width()/s.height()?"100":Math.round(e.width/e.height*100))+"vw"),n.attr("sizes",t).attr("srcset",e.opts.srcset)),e.$ghost&&setTimeout(function(){e.$ghost&&!i.isClosing&&e.$ghost.hide()},Math.min(300,Math.max(1e3,e.height/1600))),i.hideLoading(e))}).addClass("fancybox-image").attr("src",e.src).appendTo(e.$content),(t.complete||"complete"==t.readyState)&&n.naturalWidth&&n.naturalHeight?n.trigger("load"):t.error&&n.trigger("error")},resolveImageSlideSize:function(t,e,i){var n=parseInt(t.opts.width,10),o=parseInt(t.opts.height,10);t.width=e,t.height=i,0<n&&(t.width=n,t.height=Math.floor(n*i/e)),0<o&&(t.width=Math.floor(o*e/i),t.height=o)},setIframe:function(o){var s,e=this,r=o.opts.iframe,a=o.$slide;o.$content=g('<div class="fancybox-content'+(r.preload?" fancybox-is-hidden":"")+'"></div>').css(r.css).appendTo(a),a.addClass("fancybox-slide--"+o.contentType),o.$iframe=s=g(r.tpl.replace(/\{rnd\}/g,(new Date).getTime())).attr(r.attr).appendTo(o.$content),r.preload?(e.showLoading(o),s.on("load.fb error.fb",function(t){this.isReady=1,o.$slide.trigger("refresh"),e.afterLoad(o)}),a.on("refresh.fb",function(){var t,e=o.$content,i=r.css.width,n=r.css.height;if(1===s[0].isReady){try{t=s.contents().find("body")}catch(t){}t&&t.length&&t.children().length&&(a.css("overflow","visible"),e.css({width:"100%","max-width":"100%",height:"9999px"}),i===m&&(i=Math.ceil(Math.max(t[0].clientWidth,t.outerWidth(!0)))),e.css("width",i||"").css("max-width",""),n===m&&(n=Math.ceil(Math.max(t[0].clientHeight,t.outerHeight(!0)))),e.css("height",n||""),a.css("overflow","auto")),e.removeClass("fancybox-is-hidden")}})):e.afterLoad(o),s.attr("src",o.src),a.one("onReset",function(){try{g(this).find("iframe").hide().unbind().attr("src","//about:blank")}catch(t){}g(this).off("refresh.fb").empty(),o.isLoaded=!1,o.isRevealed=!1})},setContent:function(t,e){var i;this.isClosing||(this.hideLoading(t),t.$content&&g.fancybox.stop(t.$content),t.$slide.empty(),(i=e)&&i.hasOwnProperty&&i instanceof g&&e.parent().length?((e.hasClass("fancybox-content")||e.parent().hasClass("fancybox-content"))&&e.parents(".fancybox-slide").trigger("onReset"),t.$placeholder=g("<div>").hide().insertAfter(e),e.css("display","inline-block")):t.hasError||("string"===g.type(e)&&(e=g("<div>").append(g.trim(e)).contents()),t.opts.filter&&(e=g("<div>").html(e).find(t.opts.filter))),t.$slide.one("onReset",function(){g(this).find("video,audio").trigger("pause"),t.$placeholder&&(t.$placeholder.after(e.removeClass("fancybox-content").hide()).remove(),t.$placeholder=null),t.$smallBtn&&(t.$smallBtn.remove(),t.$smallBtn=null),t.hasError||(g(this).empty(),t.isLoaded=!1,t.isRevealed=!1)}),g(e).appendTo(t.$slide),g(e).is("video,audio")&&(g(e).addClass("fancybox-video"),g(e).wrap("<div></div>"),t.contentType="video",t.opts.width=t.opts.width||g(e).attr("width"),t.opts.height=t.opts.height||g(e).attr("height")),t.$content=t.$slide.children().filter("div,form,main,video,audio,article,.fancybox-content").first(),t.$content.siblings().hide(),t.$content.length||(t.$content=t.$slide.wrapInner("<div></div>").children().first()),t.$content.addClass("fancybox-content"),t.$slide.addClass("fancybox-slide--"+t.contentType),this.afterLoad(t))},setError:function(t){t.hasError=!0,t.$slide.trigger("onReset").removeClass("fancybox-slide--"+t.contentType).addClass("fancybox-slide--error"),t.contentType="html",this.setContent(t,this.translate(t,t.opts.errorTpl)),t.pos===this.currPos&&(this.isAnimating=!1)},showLoading:function(t){(t=t||this.current)&&!t.$spinner&&(t.$spinner=g(this.translate(this,this.opts.spinnerTpl)).appendTo(t.$slide).hide().fadeIn("fast"))},hideLoading:function(t){(t=t||this.current)&&t.$spinner&&(t.$spinner.stop().remove(),delete t.$spinner)},afterLoad:function(t){this.isClosing||(t.isLoading=!1,t.isLoaded=!0,this.trigger("afterLoad",t),this.hideLoading(t),!t.opts.smallBtn||t.$smallBtn&&t.$smallBtn.length||(t.$smallBtn=g(this.translate(t,t.opts.btnTpl.smallBtn)).appendTo(t.$content)),t.opts.protect&&t.$content&&!t.hasError&&(t.$content.on("contextmenu.fb",function(t){return 2==t.button&&t.preventDefault(),!0}),"image"===t.type&&g('<div class="fancybox-spaceball"></div>').appendTo(t.$content)),this.adjustCaption(t),this.adjustLayout(t),t.pos===this.currPos&&this.updateCursor(),this.revealContent(t))},adjustCaption:function(t){var e,i=t||this.current,n=i.opts.caption,o=i.opts.preventCaptionOverlap,s=this.$refs.caption,r=!1;s.toggleClass("fancybox-caption--separate",o),o&&n&&n.length&&(i.pos!==this.currPos?((e=s.clone().appendTo(s.parent())).children().eq(0).empty().html(n),r=e.outerHeight(!0),e.empty().remove()):this.$caption&&(r=this.$caption.outerHeight(!0)),i.$slide.css("padding-bottom",r||""))},adjustLayout:function(t){var e,i,n,o,s=t||this.current;s.isLoaded&&!0!==s.opts.disableLayoutFix&&(s.$content.css("margin-bottom",""),s.$content.outerHeight()>s.$slide.height()+.5&&(n=s.$slide[0].style["padding-bottom"],o=s.$slide.css("padding-bottom"),0<parseFloat(o)&&(e=s.$slide[0].scrollHeight,s.$slide.css("padding-bottom",0),Math.abs(e-s.$slide[0].scrollHeight)<1&&(i=o),s.$slide.css("padding-bottom",n))),s.$content.css("margin-bottom",i))},revealContent:function(t){var e,i,n,o,s=this,r=t.$slide,a=!1,l=!1,c=s.isMoved(t),d=t.isRevealed;return t.isRevealed=!0,e=t.opts[s.firstRun?"animationEffect":"transitionEffect"],n=t.opts[s.firstRun?"animationDuration":"transitionDuration"],n=parseInt(t.forcedDuration===m?n:t.forcedDuration,10),!c&&t.pos===s.currPos&&n||(e=!1),"zoom"===e&&(t.pos===s.currPos&&n&&"image"===t.type&&!t.hasError&&(l=s.getThumbPos(t))?a=s.getFitPos(t):e="fade"),"zoom"===e?(s.isAnimating=!0,a.scaleX=a.width/l.width,a.scaleY=a.height/l.height,"auto"==(o=t.opts.zoomOpacity)&&(o=.1<Math.abs(t.width/t.height-l.width/l.height)),o&&(l.opacity=.1,a.opacity=1),g.fancybox.setTranslate(t.$content.removeClass("fancybox-is-hidden"),l),p(t.$content),void g.fancybox.animate(t.$content,a,n,function(){s.isAnimating=!1,s.complete()})):(s.updateSlide(t),e?(g.fancybox.stop(r),i="fancybox-slide--"+(t.pos>=s.prevPos?"next":"previous")+" fancybox-animated fancybox-fx-"+e,r.addClass(i).removeClass("fancybox-slide--current"),t.$content.removeClass("fancybox-is-hidden"),p(r),"image"!==t.type&&t.$content.hide().show(0),void g.fancybox.animate(r,"fancybox-slide--current",n,function(){r.removeClass(i).css({transform:"",opacity:""}),t.pos===s.currPos&&s.complete()},!0)):(t.$content.removeClass("fancybox-is-hidden"),d||!c||"image"!==t.type||t.hasError||t.$content.hide().fadeIn("fast"),void(t.pos===s.currPos&&s.complete())))},getThumbPos:function(t){var e,i,n,o,s,r,a,l,c,d=t.$thumb;return!!(d&&(a=d[0])&&a.ownerDocument===u&&(g(".fancybox-container").css("pointer-events","none"),l={x:a.getBoundingClientRect().left+a.offsetWidth/2,y:a.getBoundingClientRect().top+a.offsetHeight/2},c=u.elementFromPoint(l.x,l.y)===a,g(".fancybox-container").css("pointer-events",""),c))&&(i=g.fancybox.getTranslate(d),n=parseFloat(d.css("border-top-width")||0),o=parseFloat(d.css("border-right-width")||0),s=parseFloat(d.css("border-bottom-width")||0),r=parseFloat(d.css("border-left-width")||0),e={top:i.top+n,left:i.left+r,width:i.width-o-r,height:i.height-n-s,scaleX:1,scaleY:1},0<i.width&&0<i.height&&e)},complete:function(){var t,i=this,e=i.current,n={};!i.isMoved()&&e.isLoaded&&(e.isComplete||(e.isComplete=!0,e.$slide.siblings().trigger("onReset"),i.preload("inline"),p(e.$slide),e.$slide.addClass("fancybox-slide--complete"),g.each(i.slides,function(t,e){e.pos>=i.currPos-1&&e.pos<=i.currPos+1?n[e.pos]=e:e&&(g.fancybox.stop(e.$slide),e.$slide.off().remove())}),i.slides=n),i.isAnimating=!1,i.updateCursor(),i.trigger("afterShow"),e.opts.video.autoStart&&e.$slide.find("video,audio").filter(":visible:first").trigger("play").one("ended",function(){Document.exitFullscreen?Document.exitFullscreen():this.webkitExitFullscreen&&this.webkitExitFullscreen(),i.next()}),e.opts.autoFocus&&"html"===e.contentType&&((t=e.$content.find("input[autofocus]:enabled:visible:first")).length?t.trigger("focus"):i.focus(null,!0)),e.$slide.scrollTop(0).scrollLeft(0))},preload:function(t){var e,i;this.group.length<2||(i=this.slides[this.currPos+1],(e=this.slides[this.currPos-1])&&e.type===t&&this.loadSlide(e),i&&i.type===t&&this.loadSlide(i))},focus:function(t,e){var i,n,o=["a[href]","area[href]",'input:not([disabled]):not([type="hidden"]):not([aria-hidden])',"select:not([disabled]):not([aria-hidden])","textarea:not([disabled]):not([aria-hidden])","button:not([disabled]):not([aria-hidden])","iframe","object","embed","video","audio","[contenteditable]",'[tabindex]:not([tabindex^="-"])'].join(",");this.isClosing||((i=(i=!t&&this.current&&this.current.isComplete?this.current.$slide.find("*:visible"+(e?":not(.fancybox-close-small)":"")):this.$refs.container.find("*:visible")).filter(o).filter(function(){return"hidden"!==g(this).css("visibility")&&!g(this).hasClass("disabled")})).length?(n=i.index(u.activeElement),t&&t.shiftKey?(n<0||0==n)&&(t.preventDefault(),i.eq(i.length-1).trigger("focus")):(n<0||n==i.length-1)&&(t&&t.preventDefault(),i.eq(0).trigger("focus"))):this.$refs.container.trigger("focus"))},activate:function(){var e=this;g(".fancybox-container").each(function(){var t=g(this).data("FancyBox");t&&t.id!==e.id&&!t.isClosing&&(t.trigger("onDeactivate"),t.removeEvents(),t.isVisible=!1)}),e.isVisible=!0,(e.current||e.isIdle)&&(e.update(),e.updateControls()),e.trigger("onActivate"),e.addEvents()},close:function(t,e){function i(){d.cleanUp(t)}var n,o,s,r,a,l,c,d=this,u=d.current;return!d.isClosing&&(!(d.isClosing=!0)===d.trigger("beforeClose",t)?(d.isClosing=!1,h(function(){d.update()}),!1):(d.removeEvents(),s=u.$content,n=u.opts.animationEffect,o=g.isNumeric(e)?e:n?u.opts.animationDuration:0,u.$slide.removeClass("fancybox-slide--complete fancybox-slide--next fancybox-slide--previous fancybox-animated"),!0!==t?g.fancybox.stop(u.$slide):n=!1,u.$slide.siblings().trigger("onReset").remove(),o&&d.$refs.container.removeClass("fancybox-is-open").addClass("fancybox-is-closing").css("transition-duration",o+"ms"),d.hideLoading(u),d.hideControls(!0),d.updateCursor(),"zoom"!==n||s&&o&&"image"===u.type&&!d.isMoved()&&!u.hasError&&(c=d.getThumbPos(u))||(n="fade"),"zoom"===n?(g.fancybox.stop(s),l={top:(r=g.fancybox.getTranslate(s)).top,left:r.left,scaleX:r.width/c.width,scaleY:r.height/c.height,width:c.width,height:c.height},"auto"==(a=u.opts.zoomOpacity)&&(a=.1<Math.abs(u.width/u.height-c.width/c.height)),a&&(c.opacity=0),g.fancybox.setTranslate(s,l),p(s),g.fancybox.animate(s,c,o,i)):n&&o?g.fancybox.animate(u.$slide.addClass("fancybox-slide--previous").removeClass("fancybox-slide--current"),"fancybox-animated fancybox-fx-"+n,o,i):!0===t?setTimeout(i,o):i(),!0))},cleanUp:function(t){var e,i,n,o=this.current.opts.$orig;this.current.$slide.trigger("onReset"),this.$refs.container.empty().remove(),this.trigger("afterClose",t),this.current.opts.backFocus&&(o&&o.length&&o.is(":visible")||(o=this.$trigger),o&&o.length&&(i=l.scrollX,n=l.scrollY,o.trigger("focus"),g("html, body").scrollTop(n).scrollLeft(i))),this.current=null,(e=g.fancybox.getInstance())?e.activate():(g("body").removeClass("fancybox-active compensate-for-scrollbar"),g("#fancybox-style-noscroll").remove())},trigger:function(t,e){var i,n=Array.prototype.slice.call(arguments,1),o=e&&e.opts?e:this.current;if(o?n.unshift(o):o=this,n.unshift(this),g.isFunction(o.opts[t])&&(i=o.opts[t].apply(o,n)),!1===i)return i;"afterClose"!==t&&this.$refs?this.$refs.container.trigger(t+".fb",n):r.trigger(t+".fb",n)},updateControls:function(){var t=this,e=t.current,i=e.index,n=t.$refs.container,o=t.$refs.caption,s=e.opts.caption;e.$slide.trigger("refresh"),s&&s.length?(t.$caption=o).children().eq(0).html(s):t.$caption=null,t.hasHiddenControls||t.isIdle||t.showControls(),n.find("[data-fancybox-count]").html(t.group.length),n.find("[data-fancybox-index]").html(i+1),n.find("[data-fancybox-prev]").prop("disabled",!e.opts.loop&&i<=0),n.find("[data-fancybox-next]").prop("disabled",!e.opts.loop&&i>=t.group.length-1),"image"===e.type?n.find("[data-fancybox-zoom]").show().end().find("[data-fancybox-download]").attr("href",e.opts.image.src||e.src).show():e.opts.toolbar&&n.find("[data-fancybox-download],[data-fancybox-zoom]").hide(),g(u.activeElement).is(":hidden,[disabled]")&&t.$refs.container.trigger("focus")},hideControls:function(t){var e=["infobar","toolbar","nav"];!t&&this.current.opts.preventCaptionOverlap||e.push("caption"),this.$refs.container.removeClass(e.map(function(t){return"fancybox-show-"+t}).join(" ")),this.hasHiddenControls=!0},showControls:function(){var t=this.current?this.current.opts:this.opts,e=this.$refs.container;this.hasHiddenControls=!1,this.idleSecondsCounter=0,e.toggleClass("fancybox-show-toolbar",!(!t.toolbar||!t.buttons)).toggleClass("fancybox-show-infobar",!!(t.infobar&&1<this.group.length)).toggleClass("fancybox-show-caption",!!this.$caption).toggleClass("fancybox-show-nav",!!(t.arrows&&1<this.group.length)).toggleClass("fancybox-is-modal",!!t.modal)},toggleControls:function(){this.hasHiddenControls?this.showControls():this.hideControls()}}),g.fancybox={version:"3.5.7",defaults:o,getInstance:function(t){var e=g('.fancybox-container:not(".fancybox-is-closing"):last').data("FancyBox"),i=Array.prototype.slice.call(arguments,1);return e instanceof y&&("string"===g.type(t)?e[t].apply(e,i):"function"===g.type(t)&&t.apply(e,i),e)},open:function(t,e,i){return new y(t,e,i)},close:function(t){var e=this.getInstance();e&&(e.close(),!0===t&&this.close(t))},destroy:function(){this.close(!0),r.add("body").off("click.fb-start","**")},isMobile:/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent),use3d:(t=u.createElement("div"),l.getComputedStyle&&l.getComputedStyle(t)&&l.getComputedStyle(t).getPropertyValue("transform")&&!(u.documentMode&&u.documentMode<11)),getTranslate:function(t){var e;return!(!t||!t.length)&&{top:(e=t[0].getBoundingClientRect()).top||0,left:e.left||0,width:e.width,height:e.height,opacity:parseFloat(t.css("opacity"))}},setTranslate:function(t,e){var i="",n={};if(t&&e)return e.left===m&&e.top===m||(i=(e.left===m?t.position().left:e.left)+"px, "+(e.top===m?t.position().top:e.top)+"px",i=this.use3d?"translate3d("+i+", 0px)":"translate("+i+")"),e.scaleX!==m&&e.scaleY!==m?i+=" scale("+e.scaleX+", "+e.scaleY+")":e.scaleX!==m&&(i+=" scaleX("+e.scaleX+")"),i.length&&(n.transform=i),e.opacity!==m&&(n.opacity=e.opacity),e.width!==m&&(n.width=e.width),e.height!==m&&(n.height=e.height),t.css(n)},animate:function(e,i,n,o,s){var r,a=this;g.isFunction(n)&&(o=n,n=null),a.stop(e),r=a.getTranslate(e),e.on(d,function(t){t&&t.originalEvent&&(!e.is(t.originalEvent.target)||"z-index"==t.originalEvent.propertyName)||(a.stop(e),g.isNumeric(n)&&e.css("transition-duration",""),g.isPlainObject(i)?i.scaleX!==m&&i.scaleY!==m&&a.setTranslate(e,{top:i.top,left:i.left,width:r.width*i.scaleX,height:r.height*i.scaleY,scaleX:1,scaleY:1}):!0!==s&&e.removeClass(i),g.isFunction(o)&&o(t))}),g.isNumeric(n)&&e.css("transition-duration",n+"ms"),g.isPlainObject(i)?(i.scaleX!==m&&i.scaleY!==m&&(delete i.width,delete i.height,e.parent().hasClass("fancybox-slide--image")&&e.parent().addClass("fancybox-is-scaling")),g.fancybox.setTranslate(e,i)):e.addClass(i),e.data("timer",setTimeout(function(){e.trigger(d)},n+33))},stop:function(t,e){t&&t.length&&(clearTimeout(t.data("timer")),e&&t.trigger(d),t.off(d).css("transition-duration",""),t.parent().removeClass("fancybox-is-scaling"))}},g.fn.fancybox=function(t){var e;return(e=(t=t||{}).selector||!1)?g("body").off("click.fb-start",e).on("click.fb-start",e,{options:t},v):this.off("click.fb-start").on("click.fb-start",{items:this,options:t},v),this},r.on("click.fb-start","[data-fancybox]",v),r.on("click.fb-start","[data-fancybox-trigger]",function(t){g('[data-fancybox="'+g(this).attr("data-fancybox-trigger")+'"]').eq(g(this).attr("data-fancybox-index")||0).trigger("click.fb-start",{$trigger:g(this)})}),e=".fancybox-button",i="fancybox-focus",n=null,r.on("mousedown mouseup focus blur",e,function(t){switch(t.type){case"mousedown":n=g(this);break;case"mouseup":n=null;break;case"focusin":g(e).removeClass(i),g(this).is(n)||g(this).is("[disabled]")||g(this).addClass(i);break;case"focusout":g(e).removeClass(i)}})}function v(t,e){var i,n,o,s=[],r=0;t&&t.isDefaultPrevented()||(t.preventDefault(),e=e||{},t&&t.data&&(e=f(t.data.options,e)),i=e.$target||g(t.currentTarget).trigger("blur"),(o=g.fancybox.getInstance())&&o.$trigger&&o.$trigger.is(i)||(s=e.selector?g(e.selector):(n=i.attr("data-fancybox")||"")?(s=t.data?t.data.items:[]).length?s.filter('[data-fancybox="'+n+'"]'):g('[data-fancybox="'+n+'"]'):[i],(r=g(s).index(i))<0&&(r=0),(o=g.fancybox.open(s,e,r)).$trigger=i))}}(window,document,jQuery),function(p){"use strict";function f(i,t,e){if(i)return e=e||"","object"===p.type(e)&&(e=p.param(e,!0)),p.each(t,function(t,e){i=i.replace("$"+t,e||"")}),e.length&&(i+=(0<i.indexOf("?")?"&":"?")+e),i}var n={youtube:{matcher:/(youtube\.com|youtu\.be|youtube\-nocookie\.com)\/(watch\?(.*&)?v=|v\/|u\/|embed\/?)?(videoseries\?list=(.*)|[\w-]{11}|\?listType=(.*)&list=(.*))(.*)/i,params:{autoplay:1,autohide:1,fs:1,rel:0,hd:1,wmode:"transparent",enablejsapi:1,html5:1},paramPlace:8,type:"iframe",url:"https://www.youtube-nocookie.com/embed/$4",thumb:"https://img.youtube.com/vi/$4/hqdefault.jpg"},vimeo:{matcher:/^.+vimeo.com\/(.*\/)?([\d]+)(.*)?/,params:{autoplay:1,hd:1,show_title:1,show_byline:1,show_portrait:0,fullscreen:1},paramPlace:3,type:"iframe",url:"//player.vimeo.com/video/$2"},instagram:{matcher:/(instagr\.am|instagram\.com)\/p\/([a-zA-Z0-9_\-]+)\/?/i,type:"image",url:"//$1/p/$2/media/?size=l"},gmap_place:{matcher:/(maps\.)?google\.([a-z]{2,3}(\.[a-z]{2})?)\/(((maps\/(place\/(.*)\/)?\@(.*),(\d+.?\d+?)z))|(\?ll=))(.*)?/i,type:"iframe",url:function(t){return"//maps.google."+t[2]+"/?ll="+(t[9]?t[9]+"&z="+Math.floor(t[10])+(t[12]?t[12].replace(/^\//,"&"):""):t[12]+"").replace(/\?/,"&")+"&output="+(t[12]&&0<t[12].indexOf("layer=c")?"svembed":"embed")}},gmap_search:{matcher:/(maps\.)?google\.([a-z]{2,3}(\.[a-z]{2})?)\/(maps\/search\/)(.*)/i,type:"iframe",url:function(t){return"//maps.google."+t[2]+"/maps?q="+t[5].replace("query=","q=").replace("api=1","")+"&output=embed"}}};p(document).on("objectNeedsType.fb",function(t,e,o){var i,s,r,a,l,c,d,u=o.src||"",h=!1;i=p.extend(!0,{},n,o.opts.media),p.each(i,function(t,e){if(r=u.match(e.matcher)){if(h=e.type,d=t,c={},e.paramPlace&&r[e.paramPlace]){"?"==(l=r[e.paramPlace])[0]&&(l=l.substring(1)),l=l.split("&");for(var i=0;i<l.length;++i){var n=l[i].split("=",2);2==n.length&&(c[n[0]]=decodeURIComponent(n[1].replace(/\+/g," ")))}}return a=p.extend(!0,{},e.params,o.opts[t],c),u="function"===p.type(e.url)?e.url.call(this,r,a,o):f(e.url,r,a),s="function"===p.type(e.thumb)?e.thumb.call(this,r,a,o):f(e.thumb,r),"youtube"===t?u=u.replace(/&t=((\d+)m)?(\d+)s/,function(t,e,i,n){return"&start="+((i?60*parseInt(i,10):0)+parseInt(n,10))}):"vimeo"===t&&(u=u.replace("&%23","#")),!1}}),h?(o.opts.thumb||o.opts.$thumb&&o.opts.$thumb.length||(o.opts.thumb=s),"iframe"===h&&(o.opts=p.extend(!0,o.opts,{iframe:{preload:!1,attr:{scrolling:"no"}}})),p.extend(o,{type:h,src:u,origSrc:o.src,contentSource:d,contentType:"image"===h?"image":"gmap_place"==d||"gmap_search"==d?"map":"video"})):u&&(o.type=o.opts.defaultType)});var o={youtube:{src:"https://www.youtube.com/iframe_api",class:"YT",loading:!1,loaded:!1},vimeo:{src:"https://player.vimeo.com/api/player.js",class:"Vimeo",loading:!1,loaded:!1},load:function(t){var e,i=this;this[t].loaded?setTimeout(function(){i.done(t)}):this[t].loading||(this[t].loading=!0,(e=document.createElement("script")).type="text/javascript",e.src=this[t].src,"youtube"===t?window.onYouTubeIframeAPIReady=function(){i[t].loaded=!0,i.done(t)}:e.onload=function(){i[t].loaded=!0,i.done(t)},document.body.appendChild(e))},done:function(t){var e,i;"youtube"===t&&delete window.onYouTubeIframeAPIReady,(e=p.fancybox.getInstance())&&(i=e.current.$content.find("iframe"),"youtube"===t&&void 0!==YT&&YT?new YT.Player(i.attr("id"),{events:{onStateChange:function(t){0==t.data&&e.next()}}}):"vimeo"===t&&void 0!==Vimeo&&Vimeo&&new Vimeo.Player(i).on("ended",function(){e.next()}))}};p(document).on({"afterShow.fb":function(t,e,i){1<e.group.length&&("youtube"===i.contentSource||"vimeo"===i.contentSource)&&o.load(i.contentSource)}})}(jQuery),function(g,l,m){"use strict";function d(t){var e=[];for(var i in t=(t=t.originalEvent||t||g.e).touches&&t.touches.length?t.touches:t.changedTouches&&t.changedTouches.length?t.changedTouches:[t])t[i].pageX?e.push({x:t[i].pageX,y:t[i].pageY}):t[i].clientX&&e.push({x:t[i].clientX,y:t[i].clientY});return e}function y(t,e,i){return e&&t?"x"===i?t.x-e.x:"y"===i?t.y-e.y:Math.sqrt(Math.pow(t.x-e.x,2)+Math.pow(t.y-e.y,2)):0}function c(t){if(t.is('a,area,button,[role="button"],input,label,select,summary,textarea,video,audio,iframe')||m.isFunction(t.get(0).onclick)||t.data("selectable"))return 1;for(var e=0,i=t[0].attributes,n=i.length;e<n;e++)if("data-fancybox-"===i[e].nodeName.substr(0,14))return 1}function u(t){for(var e,i,n,o,s,r=!1;e=t.get(0),0,i=g.getComputedStyle(e)["overflow-y"],n=g.getComputedStyle(e)["overflow-x"],o=("scroll"===i||"auto"===i)&&e.scrollHeight>e.clientHeight,s=("scroll"===n||"auto"===n)&&e.scrollWidth>e.clientWidth,!(r=o||s)&&(t=t.parent()).length&&!t.hasClass("fancybox-stage")&&!t.is("body"););return r}function i(t){this.instance=t,this.$bg=t.$refs.bg,this.$stage=t.$refs.stage,this.$container=t.$refs.container,this.destroy(),this.$container.on("touchstart.fb.touch mousedown.fb.touch",m.proxy(this,"ontouchstart"))}var v=g.requestAnimationFrame||g.webkitRequestAnimationFrame||g.mozRequestAnimationFrame||g.oRequestAnimationFrame||function(t){return g.setTimeout(t,1e3/60)},b=g.cancelAnimationFrame||g.webkitCancelAnimationFrame||g.mozCancelAnimationFrame||g.oCancelAnimationFrame||function(t){g.clearTimeout(t)};i.prototype.destroy=function(){this.$container.off(".fb.touch"),m(l).off(".fb.touch"),this.requestId&&(b(this.requestId),this.requestId=null),this.tapped&&(clearTimeout(this.tapped),this.tapped=null)},i.prototype.ontouchstart=function(t){var e=this,i=m(t.target),n=e.instance,o=n.current,s=o.$slide,r=o.$content,a="touchstart"==t.type;if(a&&e.$container.off("mousedown.fb.touch"),(!t.originalEvent||2!=t.originalEvent.button)&&s.length&&i.length&&!c(i)&&!c(i.parent())&&(i.is("img")||!(t.originalEvent.clientX>i[0].clientWidth+i.offset().left))){if(!o||n.isAnimating||o.$slide.hasClass("fancybox-animated"))return t.stopPropagation(),void t.preventDefault();e.realPoints=e.startPoints=d(t),e.startPoints.length&&(o.touch&&t.stopPropagation(),e.startEvent=t,e.canTap=!0,e.$target=i,e.$content=r,e.opts=o.opts.touch,e.isPanning=!1,e.isSwiping=!1,e.isZooming=!1,e.isScrolling=!1,e.canPan=n.canPan(),e.startTime=(new Date).getTime(),e.distanceX=e.distanceY=e.distance=0,e.canvasWidth=Math.round(s[0].clientWidth),e.canvasHeight=Math.round(s[0].clientHeight),e.contentLastPos=null,e.contentStartPos=m.fancybox.getTranslate(e.$content)||{top:0,left:0},e.sliderStartPos=m.fancybox.getTranslate(s),e.stagePos=m.fancybox.getTranslate(n.$refs.stage),e.sliderStartPos.top-=e.stagePos.top,e.sliderStartPos.left-=e.stagePos.left,e.contentStartPos.top-=e.stagePos.top,e.contentStartPos.left-=e.stagePos.left,m(l).off(".fb.touch").on(a?"touchend.fb.touch touchcancel.fb.touch":"mouseup.fb.touch mouseleave.fb.touch",m.proxy(e,"ontouchend")).on(a?"touchmove.fb.touch":"mousemove.fb.touch",m.proxy(e,"ontouchmove")),m.fancybox.isMobile&&l.addEventListener("scroll",e.onscroll,!0),((e.opts||e.canPan)&&(i.is(e.$stage)||e.$stage.find(i).length)||(i.is(".fancybox-image")&&t.preventDefault(),m.fancybox.isMobile&&i.parents(".fancybox-caption").length))&&(e.isScrollable=u(i)||u(i.parent()),m.fancybox.isMobile&&e.isScrollable||t.preventDefault(),1!==e.startPoints.length&&!o.hasError||(e.canPan?(m.fancybox.stop(e.$content),e.isPanning=!0):e.isSwiping=!0,e.$container.addClass("fancybox-is-grabbing")),2===e.startPoints.length&&"image"===o.type&&(o.isLoaded||o.$ghost)&&(e.canTap=!1,e.isSwiping=!1,e.isPanning=!1,e.isZooming=!0,m.fancybox.stop(e.$content),e.centerPointStartX=.5*(e.startPoints[0].x+e.startPoints[1].x)-m(g).scrollLeft(),e.centerPointStartY=.5*(e.startPoints[0].y+e.startPoints[1].y)-m(g).scrollTop(),e.percentageOfImageAtPinchPointX=(e.centerPointStartX-e.contentStartPos.left)/e.contentStartPos.width,e.percentageOfImageAtPinchPointY=(e.centerPointStartY-e.contentStartPos.top)/e.contentStartPos.height,e.startDistanceBetweenFingers=y(e.startPoints[0],e.startPoints[1]))))}},i.prototype.onscroll=function(t){this.isScrolling=!0,l.removeEventListener("scroll",this.onscroll,!0)},i.prototype.ontouchmove=function(t){var e=this;void 0===t.originalEvent.buttons||0!==t.originalEvent.buttons?e.isScrolling?e.canTap=!1:(e.newPoints=d(t),(e.opts||e.canPan)&&e.newPoints.length&&e.newPoints.length&&(e.isSwiping&&!0===e.isSwiping||t.preventDefault(),e.distanceX=y(e.newPoints[0],e.startPoints[0],"x"),e.distanceY=y(e.newPoints[0],e.startPoints[0],"y"),e.distance=y(e.newPoints[0],e.startPoints[0]),0<e.distance&&(e.isSwiping?e.onSwipe(t):e.isPanning?e.onPan():e.isZooming&&e.onZoom()))):e.ontouchend(t)},i.prototype.onSwipe=function(t){var e,o=this,s=o.instance,i=o.isSwiping,n=o.sliderStartPos.left||0;if(!0!==i)"x"==i&&(0<o.distanceX&&(o.instance.group.length<2||0===o.instance.current.index&&!o.instance.current.opts.loop)?n+=Math.pow(o.distanceX,.8):o.distanceX<0&&(o.instance.group.length<2||o.instance.current.index===o.instance.group.length-1&&!o.instance.current.opts.loop)?n-=Math.pow(-o.distanceX,.8):n+=o.distanceX),o.sliderLastPos={top:"x"==i?0:o.sliderStartPos.top+o.distanceY,left:n},o.requestId&&(b(o.requestId),o.requestId=null),o.requestId=v(function(){o.sliderLastPos&&(m.each(o.instance.slides,function(t,e){var i=e.pos-o.instance.currPos;m.fancybox.setTranslate(e.$slide,{top:o.sliderLastPos.top,left:o.sliderLastPos.left+i*o.canvasWidth+i*e.opts.gutter})}),o.$container.addClass("fancybox-is-sliding"))});else if(10<Math.abs(o.distance)){if(o.canTap=!1,s.group.length<2&&o.opts.vertical?o.isSwiping="y":s.isDragging||!1===o.opts.vertical||"auto"===o.opts.vertical&&800<m(g).width()?o.isSwiping="x":(e=Math.abs(180*Math.atan2(o.distanceY,o.distanceX)/Math.PI),o.isSwiping=45<e&&e<135?"y":"x"),"y"===o.isSwiping&&m.fancybox.isMobile&&o.isScrollable)return void(o.isScrolling=!0);s.isDragging=o.isSwiping,o.startPoints=o.newPoints,m.each(s.slides,function(t,e){var i,n;m.fancybox.stop(e.$slide),i=m.fancybox.getTranslate(e.$slide),n=m.fancybox.getTranslate(s.$refs.stage),e.$slide.css({transform:"",opacity:"","transition-duration":""}).removeClass("fancybox-animated").removeClass(function(t,e){return(e.match(/(^|\s)fancybox-fx-\S+/g)||[]).join(" ")}),e.pos===s.current.pos&&(o.sliderStartPos.top=i.top-n.top,o.sliderStartPos.left=i.left-n.left),m.fancybox.setTranslate(e.$slide,{top:i.top-n.top,left:i.left-n.left})}),s.SlideShow&&s.SlideShow.isActive&&s.SlideShow.stop()}},i.prototype.onPan=function(){var t=this;y(t.newPoints[0],t.realPoints[0])<(m.fancybox.isMobile?10:5)?t.startPoints=t.newPoints:(t.canTap=!1,t.contentLastPos=t.limitMovement(),t.requestId&&b(t.requestId),t.requestId=v(function(){m.fancybox.setTranslate(t.$content,t.contentLastPos)}))},i.prototype.limitMovement=function(){var t,e,i,n,o,s,r=this.canvasWidth,a=this.canvasHeight,l=this.distanceX,c=this.distanceY,d=this.contentStartPos,u=d.left,h=d.top,p=d.width,f=d.height;return o=r<p?u+l:u,s=h+c,t=Math.max(0,.5*r-.5*p),e=Math.max(0,.5*a-.5*f),i=Math.min(r-p,.5*r-.5*p),n=Math.min(a-f,.5*a-.5*f),0<l&&t<o&&(o=t-1+Math.pow(-t+u+l,.8)||0),l<0&&o<i&&(o=i+1-Math.pow(i-u-l,.8)||0),0<c&&e<s&&(s=e-1+Math.pow(-e+h+c,.8)||0),c<0&&s<n&&(s=n+1-Math.pow(n-h-c,.8)||0),{top:s,left:o}},i.prototype.limitPosition=function(t,e,i,n){var o=this.canvasWidth,s=this.canvasHeight;return t=o<i?(t=0<t?0:t)<o-i?o-i:t:Math.max(0,o/2-i/2),{top:e=s<n?(e=0<e?0:e)<s-n?s-n:e:Math.max(0,s/2-n/2),left:t}},i.prototype.onZoom=function(){var t=this,e=t.contentStartPos,i=e.width,n=e.height,o=e.left,s=e.top,r=y(t.newPoints[0],t.newPoints[1])/t.startDistanceBetweenFingers,a=Math.floor(i*r),l=Math.floor(n*r),c=(i-a)*t.percentageOfImageAtPinchPointX,d=(n-l)*t.percentageOfImageAtPinchPointY,u=(t.newPoints[0].x+t.newPoints[1].x)/2-m(g).scrollLeft(),h=(t.newPoints[0].y+t.newPoints[1].y)/2-m(g).scrollTop(),p=u-t.centerPointStartX,f={top:s+(d+(h-t.centerPointStartY)),left:o+(c+p),scaleX:r,scaleY:r};t.canTap=!1,t.newWidth=a,t.newHeight=l,t.contentLastPos=f,t.requestId&&b(t.requestId),t.requestId=v(function(){m.fancybox.setTranslate(t.$content,t.contentLastPos)})},i.prototype.ontouchend=function(t){var e=this,i=e.isSwiping,n=e.isPanning,o=e.isZooming,s=e.isScrolling;if(e.endPoints=d(t),e.dMs=Math.max((new Date).getTime()-e.startTime,1),e.$container.removeClass("fancybox-is-grabbing"),m(l).off(".fb.touch"),l.removeEventListener("scroll",e.onscroll,!0),e.requestId&&(b(e.requestId),e.requestId=null),e.isSwiping=!1,e.isPanning=!1,e.isZooming=!1,e.isScrolling=!1,e.instance.isDragging=!1,e.canTap)return e.onTap(t);e.speed=100,e.velocityX=e.distanceX/e.dMs*.5,e.velocityY=e.distanceY/e.dMs*.5,n?e.endPanning():o?e.endZooming():e.endSwiping(i,s)},i.prototype.endSwiping=function(t,e){var i=this,n=!1,o=i.instance.group.length,s=Math.abs(i.distanceX),r="x"==t&&1<o&&(130<i.dMs&&10<s||50<s);i.sliderLastPos=null,"y"==t&&!e&&50<Math.abs(i.distanceY)?(m.fancybox.animate(i.instance.current.$slide,{top:i.sliderStartPos.top+i.distanceY+150*i.velocityY,opacity:0},200),n=i.instance.close(!0,250)):r&&0<i.distanceX?n=i.instance.previous(300):r&&i.distanceX<0&&(n=i.instance.next(300)),!1!==n||"x"!=t&&"y"!=t||i.instance.centerSlide(200),i.$container.removeClass("fancybox-is-sliding")},i.prototype.endPanning=function(){var t,e,i,n=this;n.contentLastPos&&(e=!1===n.opts.momentum||350<n.dMs?(t=n.contentLastPos.left,n.contentLastPos.top):(t=n.contentLastPos.left+500*n.velocityX,n.contentLastPos.top+500*n.velocityY),(i=n.limitPosition(t,e,n.contentStartPos.width,n.contentStartPos.height)).width=n.contentStartPos.width,i.height=n.contentStartPos.height,m.fancybox.animate(n.$content,i,366))},i.prototype.endZooming=function(){var t,e,i,n,o=this,s=o.instance.current,r=o.newWidth,a=o.newHeight;o.contentLastPos&&(t=o.contentLastPos.left,n={top:e=o.contentLastPos.top,left:t,width:r,height:a,scaleX:1,scaleY:1},m.fancybox.setTranslate(o.$content,n),r<o.canvasWidth&&a<o.canvasHeight?o.instance.scaleToFit(150):r>s.width||a>s.height?o.instance.scaleToActual(o.centerPointStartX,o.centerPointStartY,150):(i=o.limitPosition(t,e,r,a),m.fancybox.animate(o.$content,i,150)))},i.prototype.onTap=function(i){function t(t){var e=r.opts[t];if(m.isFunction(e)&&(e=e.apply(s,[r,i])),e)switch(e){case"close":s.close(n.startEvent);break;case"toggleControls":s.toggleControls();break;case"next":s.next();break;case"nextOrClose":1<s.group.length?s.next():s.close(n.startEvent);break;case"zoom":"image"==r.type&&(r.isLoaded||r.$ghost)&&(s.canPan()?s.scaleToFit():s.isScaledDown()?s.scaleToActual(l,c):s.group.length<2&&s.close(n.startEvent))}}var e,n=this,o=m(i.target),s=n.instance,r=s.current,a=i&&d(i)||n.startPoints,l=a[0]?a[0].x-m(g).scrollLeft()-n.stagePos.left:0,c=a[0]?a[0].y-m(g).scrollTop()-n.stagePos.top:0;if((!i.originalEvent||2!=i.originalEvent.button)&&(o.is("img")||!(l>o[0].clientWidth+o.offset().left))){if(o.is(".fancybox-bg,.fancybox-inner,.fancybox-outer,.fancybox-container"))e="Outside";else if(o.is(".fancybox-slide"))e="Slide";else{if(!s.current.$content||!s.current.$content.find(o).addBack().filter(o).length)return;e="Content"}if(n.tapped){if(clearTimeout(n.tapped),n.tapped=null,50<Math.abs(l-n.tapX)||50<Math.abs(c-n.tapY))return this;t("dblclick"+e)}else n.tapX=l,n.tapY=c,r.opts["dblclick"+e]&&r.opts["dblclick"+e]!==r.opts["click"+e]?n.tapped=setTimeout(function(){n.tapped=null,s.isAnimating||t("click"+e)},500):t("click"+e);return this}},m(l).on("onActivate.fb",function(t,e){e&&!e.Guestures&&(e.Guestures=new i(e))}).on("beforeClose.fb",function(t,e){e&&e.Guestures&&e.Guestures.destroy()})}(window,document,jQuery),function(r,a){"use strict";a.extend(!0,a.fancybox.defaults,{btnTpl:{slideShow:'<button data-fancybox-play class="fancybox-button fancybox-button--play" title="{{PLAY_START}}"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M6.5 5.4v13.2l11-6.6z"/></svg><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M8.33 5.75h2.2v12.5h-2.2V5.75zm5.15 0h2.2v12.5h-2.2V5.75z"/></svg></button>'},slideShow:{autoStart:!1,speed:3e3,progress:!0}});function i(t){this.instance=t,this.init()}a.extend(i.prototype,{timer:null,isActive:!1,$button:null,init:function(){var t=this,e=t.instance,i=e.group[e.currIndex].opts.slideShow;t.$button=e.$refs.toolbar.find("[data-fancybox-play]").on("click",function(){t.toggle()}),e.group.length<2||!i?t.$button.hide():i.progress&&(t.$progress=a('<div class="fancybox-progress"></div>').appendTo(e.$refs.inner))},set:function(t){var e=this.instance,i=e.current;i&&(!0===t||i.opts.loop||e.currIndex<e.group.length-1)?this.isActive&&"video"!==i.contentType&&(this.$progress&&a.fancybox.animate(this.$progress.show(),{scaleX:1},i.opts.slideShow.speed),this.timer=setTimeout(function(){e.current.opts.loop||e.current.index!=e.group.length-1?e.next():e.jumpTo(0)},i.opts.slideShow.speed)):(this.stop(),e.idleSecondsCounter=0,e.showControls())},clear:function(){clearTimeout(this.timer),this.timer=null,this.$progress&&this.$progress.removeAttr("style").hide()},start:function(){var t=this.instance.current;t&&(this.$button.attr("title",(t.opts.i18n[t.opts.lang]||t.opts.i18n.en).PLAY_STOP).removeClass("fancybox-button--play").addClass("fancybox-button--pause"),this.isActive=!0,t.isComplete&&this.set(!0),this.instance.trigger("onSlideShowChange",!0))},stop:function(){var t=this.instance.current;this.clear(),this.$button.attr("title",(t.opts.i18n[t.opts.lang]||t.opts.i18n.en).PLAY_START).removeClass("fancybox-button--pause").addClass("fancybox-button--play"),this.isActive=!1,this.instance.trigger("onSlideShowChange",!1),this.$progress&&this.$progress.removeAttr("style").hide()},toggle:function(){this.isActive?this.stop():this.start()}}),a(r).on({"onInit.fb":function(t,e){e&&!e.SlideShow&&(e.SlideShow=new i(e))},"beforeShow.fb":function(t,e,i,n){var o=e&&e.SlideShow;n?o&&i.opts.slideShow.autoStart&&o.start():o&&o.isActive&&o.clear()},"afterShow.fb":function(t,e,i){var n=e&&e.SlideShow;n&&n.isActive&&n.set()},"afterKeydown.fb":function(t,e,i,n,o){var s=e&&e.SlideShow;!s||!i.opts.slideShow||80!==o&&32!==o||a(r.activeElement).is("button,a,input")||(n.preventDefault(),s.toggle())},"beforeClose.fb onDeactivate.fb":function(t,e){var i=e&&e.SlideShow;i&&i.stop()}}),a(r).on("visibilitychange",function(){var t=a.fancybox.getInstance(),e=t&&t.SlideShow;e&&e.isActive&&(r.hidden?e.clear():e.set())})}(document,jQuery),function(s,i){"use strict";var n=function(){for(var t=[["requestFullscreen","exitFullscreen","fullscreenElement","fullscreenEnabled","fullscreenchange","fullscreenerror"],["webkitRequestFullscreen","webkitExitFullscreen","webkitFullscreenElement","webkitFullscreenEnabled","webkitfullscreenchange","webkitfullscreenerror"],["webkitRequestFullScreen","webkitCancelFullScreen","webkitCurrentFullScreenElement","webkitCancelFullScreen","webkitfullscreenchange","webkitfullscreenerror"],["mozRequestFullScreen","mozCancelFullScreen","mozFullScreenElement","mozFullScreenEnabled","mozfullscreenchange","mozfullscreenerror"],["msRequestFullscreen","msExitFullscreen","msFullscreenElement","msFullscreenEnabled","MSFullscreenChange","MSFullscreenError"]],e={},i=0;i<t.length;i++){var n=t[i];if(n&&n[1]in s){for(var o=0;o<n.length;o++)e[t[0][o]]=n[o];return e}}return!1}();if(n){var o={request:function(t){(t=t||s.documentElement)[n.requestFullscreen](t.ALLOW_KEYBOARD_INPUT)},exit:function(){s[n.exitFullscreen]()},toggle:function(t){t=t||s.documentElement,this.isFullscreen()?this.exit():this.request(t)},isFullscreen:function(){return Boolean(s[n.fullscreenElement])},enabled:function(){return Boolean(s[n.fullscreenEnabled])}};i.extend(!0,i.fancybox.defaults,{btnTpl:{fullScreen:'<button data-fancybox-fullscreen class="fancybox-button fancybox-button--fsenter" title="{{FULL_SCREEN}}"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M7 14H5v5h5v-2H7v-3zm-2-4h2V7h3V5H5v5zm12 7h-3v2h5v-5h-2v3zM14 5v2h3v3h2V5h-5z"/></svg><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M5 16h3v3h2v-5H5zm3-8H5v2h5V5H8zm6 11h2v-3h3v-2h-5zm2-11V5h-2v5h5V8z"/></svg></button>'},fullScreen:{autoStart:!1}}),i(s).on(n.fullscreenchange,function(){var t=o.isFullscreen(),e=i.fancybox.getInstance();e&&(e.current&&"image"===e.current.type&&e.isAnimating&&(e.isAnimating=!1,e.update(!0,!0,0),e.isComplete||e.complete()),e.trigger("onFullscreenChange",t),e.$refs.container.toggleClass("fancybox-is-fullscreen",t),e.$refs.toolbar.find("[data-fancybox-fullscreen]").toggleClass("fancybox-button--fsenter",!t).toggleClass("fancybox-button--fsexit",t))})}i(s).on({"onInit.fb":function(t,e){n?e&&e.group[e.currIndex].opts.fullScreen?(e.$refs.container.on("click.fb-fullscreen","[data-fancybox-fullscreen]",function(t){t.stopPropagation(),t.preventDefault(),o.toggle()}),e.opts.fullScreen&&!0===e.opts.fullScreen.autoStart&&o.request(),e.FullScreen=o):e&&e.$refs.toolbar.find("[data-fancybox-fullscreen]").hide():e.$refs.toolbar.find("[data-fancybox-fullscreen]").remove()},"afterKeydown.fb":function(t,e,i,n,o){e&&e.FullScreen&&70===o&&(n.preventDefault(),e.FullScreen.toggle())},"beforeClose.fb":function(t,e){e&&e.FullScreen&&e.$refs.container.hasClass("fancybox-is-fullscreen")&&o.exit()}})}(document,jQuery),function(t,s){"use strict";var r="fancybox-thumbs",a=r+"-active";s.fancybox.defaults=s.extend(!0,{btnTpl:{thumbs:'<button data-fancybox-thumbs class="fancybox-button fancybox-button--thumbs" title="{{THUMBS}}"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M14.59 14.59h3.76v3.76h-3.76v-3.76zm-4.47 0h3.76v3.76h-3.76v-3.76zm-4.47 0h3.76v3.76H5.65v-3.76zm8.94-4.47h3.76v3.76h-3.76v-3.76zm-4.47 0h3.76v3.76h-3.76v-3.76zm-4.47 0h3.76v3.76H5.65v-3.76zm8.94-4.47h3.76v3.76h-3.76V5.65zm-4.47 0h3.76v3.76h-3.76V5.65zm-4.47 0h3.76v3.76H5.65V5.65z"/></svg></button>'},thumbs:{autoStart:!1,hideOnClose:!0,parentEl:".fancybox-container",axis:"y"}},s.fancybox.defaults);function n(t){this.init(t)}s.extend(n.prototype,{$button:null,$grid:null,$list:null,isVisible:!1,isActive:!1,init:function(t){var e=this,i=t.group,n=0;e.instance=t,e.opts=i[t.currIndex].opts.thumbs,(t.Thumbs=e).$button=t.$refs.toolbar.find("[data-fancybox-thumbs]");for(var o=0,s=i.length;o<s&&(i[o].thumb&&n++,!(1<n));o++);1<n&&e.opts?(e.$button.removeAttr("style").on("click",function(){e.toggle()}),e.isActive=!0):e.$button.hide()},create:function(){var i,t=this,e=t.instance,n=t.opts.parentEl,o=[];t.$grid||(t.$grid=s('<div class="'+r+" "+r+"-"+t.opts.axis+'"></div>').appendTo(e.$refs.container.find(n).addBack().filter(n)),t.$grid.on("click","a",function(){e.jumpTo(s(this).attr("data-index"))})),t.$list||(t.$list=s('<div class="'+r+'__list">').appendTo(t.$grid)),s.each(e.group,function(t,e){(i=e.thumb)||"image"!==e.type||(i=e.src),o.push('<a href="javascript:;" tabindex="0" data-index="'+t+'"'+(i&&i.length?' style="background-image:url('+i+')"':'class="fancybox-thumbs-missing"')+"></a>")}),t.$list[0].innerHTML=o.join(""),"x"===t.opts.axis&&t.$list.width(parseInt(t.$grid.css("padding-right"),10)+e.group.length*t.$list.children().eq(0).outerWidth(!0))},focus:function(t){var e,i,n=this.$list,o=this.$grid;this.instance.current&&(i=(e=n.children().removeClass(a).filter('[data-index="'+this.instance.current.index+'"]').addClass(a)).position(),"y"===this.opts.axis&&(i.top<0||i.top>n.height()-e.outerHeight())?n.stop().animate({scrollTop:n.scrollTop()+i.top},t):"x"===this.opts.axis&&(i.left<o.scrollLeft()||i.left>o.scrollLeft()+(o.width()-e.outerWidth()))&&n.parent().stop().animate({scrollLeft:i.left},t))},update:function(){this.instance.$refs.container.toggleClass("fancybox-show-thumbs",this.isVisible),this.isVisible?(this.$grid||this.create(),this.instance.trigger("onThumbsShow"),this.focus(0)):this.$grid&&this.instance.trigger("onThumbsHide"),this.instance.update()},hide:function(){this.isVisible=!1,this.update()},show:function(){this.isVisible=!0,this.update()},toggle:function(){this.isVisible=!this.isVisible,this.update()}}),s(t).on({"onInit.fb":function(t,e){var i;e&&!e.Thumbs&&(i=new n(e)).isActive&&!0===i.opts.autoStart&&i.show()},"beforeShow.fb":function(t,e,i,n){var o=e&&e.Thumbs;o&&o.isVisible&&o.focus(n?0:250)},"afterKeydown.fb":function(t,e,i,n,o){var s=e&&e.Thumbs;s&&s.isActive&&71===o&&(n.preventDefault(),s.toggle())},"beforeClose.fb":function(t,e){var i=e&&e.Thumbs;i&&i.isVisible&&!1!==i.opts.hideOnClose&&i.$grid.hide()}})}(document,jQuery),function(t,s){"use strict";s.extend(!0,s.fancybox.defaults,{btnTpl:{share:'<button data-fancybox-share class="fancybox-button fancybox-button--share" title="{{SHARE}}"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M2.55 19c1.4-8.4 9.1-9.8 11.9-9.8V5l7 7-7 6.3v-3.5c-2.8 0-10.5 2.1-11.9 4.2z"/></svg></button>'},share:{url:function(t,e){return!t.currentHash&&"inline"!==e.type&&"html"!==e.type&&(e.origSrc||e.src)||window.location},tpl:'<div class="fancybox-share"><h1>{{SHARE}}</h1><p><a class="fancybox-share__button fancybox-share__button--fb" href="https://www.facebook.com/sharer/sharer.php?u={{url}}"><svg viewBox="0 0 512 512" xmlns="http://www.w3.org/2000/svg"><path d="m287 456v-299c0-21 6-35 35-35h38v-63c-7-1-29-3-55-3-54 0-91 33-91 94v306m143-254h-205v72h196" /></svg><span>Facebook</span></a><a class="fancybox-share__button fancybox-share__button--tw" href="https://twitter.com/intent/tweet?url={{url}}&text={{descr}}"><svg viewBox="0 0 512 512" xmlns="http://www.w3.org/2000/svg"><path d="m456 133c-14 7-31 11-47 13 17-10 30-27 37-46-15 10-34 16-52 20-61-62-157-7-141 75-68-3-129-35-169-85-22 37-11 86 26 109-13 0-26-4-37-9 0 39 28 72 65 80-12 3-25 4-37 2 10 33 41 57 77 57-42 30-77 38-122 34 170 111 378-32 359-208 16-11 30-25 41-42z" /></svg><span>Twitter</span></a><a class="fancybox-share__button fancybox-share__button--pt" href="https://www.pinterest.com/pin/create/button/?url={{url}}&description={{descr}}&media={{media}}"><svg viewBox="0 0 512 512" xmlns="http://www.w3.org/2000/svg"><path d="m265 56c-109 0-164 78-164 144 0 39 15 74 47 87 5 2 10 0 12-5l4-19c2-6 1-8-3-13-9-11-15-25-15-45 0-58 43-110 113-110 62 0 96 38 96 88 0 67-30 122-73 122-24 0-42-19-36-44 6-29 20-60 20-81 0-19-10-35-31-35-25 0-44 26-44 60 0 21 7 36 7 36l-30 125c-8 37-1 83 0 87 0 3 4 4 5 2 2-3 32-39 42-75l16-64c8 16 31 29 56 29 74 0 124-67 124-157 0-69-58-132-146-132z" fill="#fff"/></svg><span>Pinterest</span></a></p><p><input class="fancybox-share__input" type="text" value="{{url_raw}}" onclick="select()" /></p></div>'}}),s(t).on("click","[data-fancybox-share]",function(){var t,e,i,n=s.fancybox.getInstance(),o=n.current||null;o&&("function"===s.type(o.opts.share.url)&&(t=o.opts.share.url.apply(o,[n,o])),e=o.opts.share.tpl.replace(/\{\{media\}\}/g,"image"===o.type?encodeURIComponent(o.src):"").replace(/\{\{url\}\}/g,encodeURIComponent(t)).replace(/\{\{url_raw\}\}/g,(i={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;","/":"&#x2F;","`":"&#x60;","=":"&#x3D;"},String(t).replace(/[&<>"'`=\/]/g,function(t){return i[t]}))).replace(/\{\{descr\}\}/g,n.$caption?encodeURIComponent(n.$caption.text()):""),s.fancybox.open({src:n.translate(n,e),type:"html",opts:{touch:!1,animationEffect:!1,afterLoad:function(t,e){n.$refs.container.one("beforeClose.fb",function(){t.close(null,0)}),e.$content.find(".fancybox-share__button").click(function(){return window.open(this.href,"Share","width=550, height=450"),!1})},mobile:{autoFocus:!1}}}))})}(document,jQuery),function(s,r,o){"use strict";function a(){var t=s.location.hash.substr(1),e=t.split("-"),i=1<e.length&&/^\+?\d+$/.test(e[e.length-1])&&parseInt(e.pop(-1),10)||1;return{hash:t,index:i<1?1:i,gallery:e.join("-")}}function e(t){""!==t.gallery&&o("[data-fancybox='"+o.escapeSelector(t.gallery)+"']").eq(t.index-1).focus().trigger("click.fb-start")}function l(t){var e,i;return!!t&&(""!==(i=(e=t.current?t.current.opts:t.opts).hash||(e.$orig?e.$orig.data("fancybox")||e.$orig.data("fancybox-trigger"):""))&&i)}o.escapeSelector||(o.escapeSelector=function(t){return(t+"").replace(/([\0-\x1f\x7f]|^-?\d)|^-$|[^\x80-\uFFFF\w-]/g,function(t,e){return e?"\0"===t?"ï¿½":t.slice(0,-1)+"\\"+t.charCodeAt(t.length-1).toString(16)+" ":"\\"+t})}),o(function(){!1!==o.fancybox.defaults.hash&&(o(r).on({"onInit.fb":function(t,e){var i,n;!1!==e.group[e.currIndex].opts.hash&&(i=a(),(n=l(e))&&i.gallery&&n==i.gallery&&(e.currIndex=i.index-1))},"beforeShow.fb":function(t,e,i,n){var o;i&&!1!==i.opts.hash&&(o=l(e))&&(e.currentHash=o+(1<e.group.length?"-"+(i.index+1):""),s.location.hash!=="#"+e.currentHash&&(n&&!e.origHash&&(e.origHash=s.location.hash),e.hashTimer&&clearTimeout(e.hashTimer),e.hashTimer=setTimeout(function(){"replaceState"in s.history?(s.history[n?"pushState":"replaceState"]({},r.title,s.location.pathname+s.location.search+"#"+e.currentHash),n&&(e.hasCreatedHistory=!0)):s.location.hash=e.currentHash,e.hashTimer=null},300)))},"beforeClose.fb":function(t,e,i){i&&!1!==i.opts.hash&&(clearTimeout(e.hashTimer),e.currentHash&&e.hasCreatedHistory?s.history.back():e.currentHash&&("replaceState"in s.history?s.history.replaceState({},r.title,s.location.pathname+s.location.search+(e.origHash||"")):s.location.hash=e.origHash),e.currentHash=null)}}),o(s).on("hashchange.fb",function(){var t=a(),n=null;o.each(o(".fancybox-container").get().reverse(),function(t,e){var i=o(e).data("FancyBox");if(i&&i.currentHash)return n=i,!1}),n?n.currentHash===t.gallery+"-"+t.index||1===t.index&&n.currentHash==t.gallery||(n.currentHash=null,n.close()):""!==t.gallery&&e(t)}),setTimeout(function(){o.fancybox.getInstance()||e(a())},50))})}(window,document,jQuery),function(t,e){"use strict";var o=(new Date).getTime();e(t).on({"onInit.fb":function(t,n,e){n.$refs.stage.on("mousewheel DOMMouseScroll wheel MozMousePixelScroll",function(t){var e=n.current,i=(new Date).getTime();n.group.length<2||!1===e.opts.wheel||"auto"===e.opts.wheel&&"image"!==e.type||(t.preventDefault(),t.stopPropagation(),e.$slide.hasClass("fancybox-animated")||(t=t.originalEvent||t,i-o<250||(o=i,n[(-t.deltaY||-t.deltaX||t.wheelDelta||-t.detail)<0?"next":"previous"]())))})}})}(document,jQuery);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
