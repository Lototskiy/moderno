!function(t,e){"use strict";"object"==typeof module&&"object"==typeof module.exports?module.exports=t.document?e(t,!0):function(t){if(!t.document)throw new Error("jQuery requires a window with a document");return e(t)}:e(t)}("undefined"!=typeof window?window:this,function(S,t){"use strict";function g(t){return null!=t&&t===t.window}var e=[],T=S.document,i=Object.getPrototypeOf,a=e.slice,m=e.concat,l=e.push,o=e.indexOf,n={},r=n.toString,y=n.hasOwnProperty,s=y.toString,c=s.call(Object),v={},b=function(t){return"function"==typeof t&&"number"!=typeof t.nodeType},u={type:!0,src:!0,nonce:!0,noModule:!0};function w(t,e,n){var i,o,r=(n=n||T).createElement("script");if(r.text=t,e)for(i in u)(o=e[i]||e.getAttribute&&e.getAttribute(i))&&r.setAttribute(i,o);n.head.appendChild(r).parentNode.removeChild(r)}function x(t){return null==t?t+"":"object"==typeof t||"function"==typeof t?n[r.call(t)]||"object":typeof t}var d="3.4.1",k=function(t,e){return new k.fn.init(t,e)},p=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;function f(t){var e=!!t&&"length"in t&&t.length,n=x(t);return!b(t)&&!g(t)&&("array"===n||0===e||"number"==typeof e&&0<e&&e-1 in t)}k.fn=k.prototype={jquery:d,constructor:k,length:0,toArray:function(){return a.call(this)},get:function(t){return null==t?a.call(this):t<0?this[t+this.length]:this[t]},pushStack:function(t){var e=k.merge(this.constructor(),t);return e.prevObject=this,e},each:function(t){return k.each(this,t)},map:function(n){return this.pushStack(k.map(this,function(t,e){return n.call(t,e,t)}))},slice:function(){return this.pushStack(a.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(t){var e=this.length,n=+t+(t<0?e:0);return this.pushStack(0<=n&&n<e?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:l,sort:e.sort,splice:e.splice},k.extend=k.fn.extend=function(){var t,e,n,i,o,r,s=arguments[0]||{},a=1,l=arguments.length,c=!1;for("boolean"==typeof s&&(c=s,s=arguments[a]||{},a++),"object"==typeof s||b(s)||(s={}),a===l&&(s=this,a--);a<l;a++)if(null!=(t=arguments[a]))for(e in t)i=t[e],"__proto__"!==e&&s!==i&&(c&&i&&(k.isPlainObject(i)||(o=Array.isArray(i)))?(n=s[e],r=o&&!Array.isArray(n)?[]:o||k.isPlainObject(n)?n:{},o=!1,s[e]=k.extend(c,r,i)):void 0!==i&&(s[e]=i));return s},k.extend({expando:"jQuery"+(d+Math.random()).replace(/\D/g,""),isReady:!0,error:function(t){throw new Error(t)},noop:function(){},isPlainObject:function(t){var e,n;return!(!t||"[object Object]"!==r.call(t))&&(!(e=i(t))||"function"==typeof(n=y.call(e,"constructor")&&e.constructor)&&s.call(n)===c)},isEmptyObject:function(t){var e;for(e in t)return!1;return!0},globalEval:function(t,e){w(t,{nonce:e&&e.nonce})},each:function(t,e){var n,i=0;if(f(t))for(n=t.length;i<n&&!1!==e.call(t[i],i,t[i]);i++);else for(i in t)if(!1===e.call(t[i],i,t[i]))break;return t},trim:function(t){return null==t?"":(t+"").replace(p,"")},makeArray:function(t,e){var n=e||[];return null!=t&&(f(Object(t))?k.merge(n,"string"==typeof t?[t]:t):l.call(n,t)),n},inArray:function(t,e,n){return null==e?-1:o.call(e,t,n)},merge:function(t,e){for(var n=+e.length,i=0,o=t.length;i<n;i++)t[o++]=e[i];return t.length=o,t},grep:function(t,e,n){for(var i=[],o=0,r=t.length,s=!n;o<r;o++)!e(t[o],o)!=s&&i.push(t[o]);return i},map:function(t,e,n){var i,o,r=0,s=[];if(f(t))for(i=t.length;r<i;r++)null!=(o=e(t[r],r,n))&&s.push(o);else for(r in t)null!=(o=e(t[r],r,n))&&s.push(o);return m.apply([],s)},guid:1,support:v}),"function"==typeof Symbol&&(k.fn[Symbol.iterator]=e[Symbol.iterator]),k.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(t,e){n["[object "+e+"]"]=e.toLowerCase()});var h=function(n){function d(t,e,n){var i="0x"+e-65536;return i!=i||n?e:i<0?String.fromCharCode(65536+i):String.fromCharCode(i>>10|55296,1023&i|56320)}function o(){C()}var t,f,w,r,s,h,p,g,x,l,c,C,S,a,T,m,u,y,v,k="sizzle"+ +new Date,b=n.document,A=0,i=0,E=lt(),D=lt(),O=lt(),I=lt(),N=function(t,e){return t===e&&(c=!0),0},P={}.hasOwnProperty,e=[],R=e.pop,$=e.push,M=e.push,j=e.slice,F=function(t,e){for(var n=0,i=t.length;n<i;n++)if(t[n]===e)return n;return-1},L="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",B="[\\x20\\t\\r\\n\\f]",H="(?:\\\\.|[\\w-]|[^\0-\\xa0])+",q="\\["+B+"*("+H+")(?:"+B+"*([*^$|!~]?=)"+B+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+H+"))|)"+B+"*\\]",z=":("+H+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+q+")*)|.*)\\)|)",W=new RegExp(B+"+","g"),_=new RegExp("^"+B+"+|((?:^|[^\\\\])(?:\\\\.)*)"+B+"+$","g"),U=new RegExp("^"+B+"*,"+B+"*"),G=new RegExp("^"+B+"*([>+~]|"+B+")"+B+"*"),X=new RegExp(B+"|>"),V=new RegExp(z),Y=new RegExp("^"+H+"$"),K={ID:new RegExp("^#("+H+")"),CLASS:new RegExp("^\\.("+H+")"),TAG:new RegExp("^("+H+"|[*])"),ATTR:new RegExp("^"+q),PSEUDO:new RegExp("^"+z),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+B+"*(even|odd|(([+-]|)(\\d*)n|)"+B+"*(?:([+-]|)"+B+"*(\\d+)|))"+B+"*\\)|)","i"),bool:new RegExp("^(?:"+L+")$","i"),needsContext:new RegExp("^"+B+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+B+"*((?:-\\d)?\\d*)"+B+"*\\)|)(?=[^-]|$)","i")},Q=/HTML$/i,Z=/^(?:input|select|textarea|button)$/i,J=/^h\d$/i,tt=/^[^{]+\{\s*\[native \w/,et=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,nt=/[+~]/,it=new RegExp("\\\\([\\da-f]{1,6}"+B+"?|("+B+")|.)","ig"),ot=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,rt=function(t,e){return e?"\0"===t?"ï¿½":t.slice(0,-1)+"\\"+t.charCodeAt(t.length-1).toString(16)+" ":"\\"+t},st=wt(function(t){return!0===t.disabled&&"fieldset"===t.nodeName.toLowerCase()},{dir:"parentNode",next:"legend"});try{M.apply(e=j.call(b.childNodes),b.childNodes),e[b.childNodes.length].nodeType}catch(t){M={apply:e.length?function(t,e){$.apply(t,j.call(e))}:function(t,e){for(var n=t.length,i=0;t[n++]=e[i++];);t.length=n-1}}}function at(e,t,n,i){var o,r,s,a,l,c,u,d=t&&t.ownerDocument,p=t?t.nodeType:9;if(n=n||[],"string"!=typeof e||!e||1!==p&&9!==p&&11!==p)return n;if(!i&&((t?t.ownerDocument||t:b)!==S&&C(t),t=t||S,T)){if(11!==p&&(l=et.exec(e)))if(o=l[1]){if(9===p){if(!(s=t.getElementById(o)))return n;if(s.id===o)return n.push(s),n}else if(d&&(s=d.getElementById(o))&&v(t,s)&&s.id===o)return n.push(s),n}else{if(l[2])return M.apply(n,t.getElementsByTagName(e)),n;if((o=l[3])&&f.getElementsByClassName&&t.getElementsByClassName)return M.apply(n,t.getElementsByClassName(o)),n}if(f.qsa&&!I[e+" "]&&(!m||!m.test(e))&&(1!==p||"object"!==t.nodeName.toLowerCase())){if(u=e,d=t,1===p&&X.test(e)){for((a=t.getAttribute("id"))?a=a.replace(ot,rt):t.setAttribute("id",a=k),r=(c=h(e)).length;r--;)c[r]="#"+a+" "+bt(c[r]);u=c.join(","),d=nt.test(e)&&yt(t.parentNode)||t}try{return M.apply(n,d.querySelectorAll(u)),n}catch(t){I(e,!0)}finally{a===k&&t.removeAttribute("id")}}}return g(e.replace(_,"$1"),t,n,i)}function lt(){var i=[];return function t(e,n){return i.push(e+" ")>w.cacheLength&&delete t[i.shift()],t[e+" "]=n}}function ct(t){return t[k]=!0,t}function ut(t){var e=S.createElement("fieldset");try{return!!t(e)}catch(t){return!1}finally{e.parentNode&&e.parentNode.removeChild(e),e=null}}function dt(t,e){for(var n=t.split("|"),i=n.length;i--;)w.attrHandle[n[i]]=e}function pt(t,e){var n=e&&t,i=n&&1===t.nodeType&&1===e.nodeType&&t.sourceIndex-e.sourceIndex;if(i)return i;if(n)for(;n=n.nextSibling;)if(n===e)return-1;return t?1:-1}function ft(e){return function(t){return"input"===t.nodeName.toLowerCase()&&t.type===e}}function ht(n){return function(t){var e=t.nodeName.toLowerCase();return("input"===e||"button"===e)&&t.type===n}}function gt(e){return function(t){return"form"in t?t.parentNode&&!1===t.disabled?"label"in t?"label"in t.parentNode?t.parentNode.disabled===e:t.disabled===e:t.isDisabled===e||t.isDisabled!==!e&&st(t)===e:t.disabled===e:"label"in t&&t.disabled===e}}function mt(s){return ct(function(r){return r=+r,ct(function(t,e){for(var n,i=s([],t.length,r),o=i.length;o--;)t[n=i[o]]&&(t[n]=!(e[n]=t[n]))})})}function yt(t){return t&&void 0!==t.getElementsByTagName&&t}for(t in f=at.support={},s=at.isXML=function(t){var e=t.namespaceURI,n=(t.ownerDocument||t).documentElement;return!Q.test(e||n&&n.nodeName||"HTML")},C=at.setDocument=function(t){var e,n,i=t?t.ownerDocument||t:b;return i!==S&&9===i.nodeType&&i.documentElement&&(a=(S=i).documentElement,T=!s(S),b!==S&&(n=S.defaultView)&&n.top!==n&&(n.addEventListener?n.addEventListener("unload",o,!1):n.attachEvent&&n.attachEvent("onunload",o)),f.attributes=ut(function(t){return t.className="i",!t.getAttribute("className")}),f.getElementsByTagName=ut(function(t){return t.appendChild(S.createComment("")),!t.getElementsByTagName("*").length}),f.getElementsByClassName=tt.test(S.getElementsByClassName),f.getById=ut(function(t){return a.appendChild(t).id=k,!S.getElementsByName||!S.getElementsByName(k).length}),f.getById?(w.filter.ID=function(t){var e=t.replace(it,d);return function(t){return t.getAttribute("id")===e}},w.find.ID=function(t,e){if(void 0!==e.getElementById&&T){var n=e.getElementById(t);return n?[n]:[]}}):(w.filter.ID=function(t){var n=t.replace(it,d);return function(t){var e=void 0!==t.getAttributeNode&&t.getAttributeNode("id");return e&&e.value===n}},w.find.ID=function(t,e){if(void 0!==e.getElementById&&T){var n,i,o,r=e.getElementById(t);if(r){if((n=r.getAttributeNode("id"))&&n.value===t)return[r];for(o=e.getElementsByName(t),i=0;r=o[i++];)if((n=r.getAttributeNode("id"))&&n.value===t)return[r]}return[]}}),w.find.TAG=f.getElementsByTagName?function(t,e){return void 0!==e.getElementsByTagName?e.getElementsByTagName(t):f.qsa?e.querySelectorAll(t):void 0}:function(t,e){var n,i=[],o=0,r=e.getElementsByTagName(t);if("*"!==t)return r;for(;n=r[o++];)1===n.nodeType&&i.push(n);return i},w.find.CLASS=f.getElementsByClassName&&function(t,e){if(void 0!==e.getElementsByClassName&&T)return e.getElementsByClassName(t)},u=[],m=[],(f.qsa=tt.test(S.querySelectorAll))&&(ut(function(t){a.appendChild(t).innerHTML="<a id='"+k+"'></a><select id='"+k+"-\r\\' msallowcapture=''><option selected=''></option></select>",t.querySelectorAll("[msallowcapture^='']").length&&m.push("[*^$]="+B+"*(?:''|\"\")"),t.querySelectorAll("[selected]").length||m.push("\\["+B+"*(?:value|"+L+")"),t.querySelectorAll("[id~="+k+"-]").length||m.push("~="),t.querySelectorAll(":checked").length||m.push(":checked"),t.querySelectorAll("a#"+k+"+*").length||m.push(".#.+[+~]")}),ut(function(t){t.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var e=S.createElement("input");e.setAttribute("type","hidden"),t.appendChild(e).setAttribute("name","D"),t.querySelectorAll("[name=d]").length&&m.push("name"+B+"*[*^$|!~]?="),2!==t.querySelectorAll(":enabled").length&&m.push(":enabled",":disabled"),a.appendChild(t).disabled=!0,2!==t.querySelectorAll(":disabled").length&&m.push(":enabled",":disabled"),t.querySelectorAll("*,:x"),m.push(",.*:")})),(f.matchesSelector=tt.test(y=a.matches||a.webkitMatchesSelector||a.mozMatchesSelector||a.oMatchesSelector||a.msMatchesSelector))&&ut(function(t){f.disconnectedMatch=y.call(t,"*"),y.call(t,"[s!='']:x"),u.push("!=",z)}),m=m.length&&new RegExp(m.join("|")),u=u.length&&new RegExp(u.join("|")),e=tt.test(a.compareDocumentPosition),v=e||tt.test(a.contains)?function(t,e){var n=9===t.nodeType?t.documentElement:t,i=e&&e.parentNode;return t===i||!(!i||1!==i.nodeType||!(n.contains?n.contains(i):t.compareDocumentPosition&&16&t.compareDocumentPosition(i)))}:function(t,e){if(e)for(;e=e.parentNode;)if(e===t)return!0;return!1},N=e?function(t,e){if(t===e)return c=!0,0;var n=!t.compareDocumentPosition-!e.compareDocumentPosition;return n||(1&(n=(t.ownerDocument||t)===(e.ownerDocument||e)?t.compareDocumentPosition(e):1)||!f.sortDetached&&e.compareDocumentPosition(t)===n?t===S||t.ownerDocument===b&&v(b,t)?-1:e===S||e.ownerDocument===b&&v(b,e)?1:l?F(l,t)-F(l,e):0:4&n?-1:1)}:function(t,e){if(t===e)return c=!0,0;var n,i=0,o=t.parentNode,r=e.parentNode,s=[t],a=[e];if(!o||!r)return t===S?-1:e===S?1:o?-1:r?1:l?F(l,t)-F(l,e):0;if(o===r)return pt(t,e);for(n=t;n=n.parentNode;)s.unshift(n);for(n=e;n=n.parentNode;)a.unshift(n);for(;s[i]===a[i];)i++;return i?pt(s[i],a[i]):s[i]===b?-1:a[i]===b?1:0}),S},at.matches=function(t,e){return at(t,null,null,e)},at.matchesSelector=function(t,e){if((t.ownerDocument||t)!==S&&C(t),f.matchesSelector&&T&&!I[e+" "]&&(!u||!u.test(e))&&(!m||!m.test(e)))try{var n=y.call(t,e);if(n||f.disconnectedMatch||t.document&&11!==t.document.nodeType)return n}catch(t){I(e,!0)}return 0<at(e,S,null,[t]).length},at.contains=function(t,e){return(t.ownerDocument||t)!==S&&C(t),v(t,e)},at.attr=function(t,e){(t.ownerDocument||t)!==S&&C(t);var n=w.attrHandle[e.toLowerCase()],i=n&&P.call(w.attrHandle,e.toLowerCase())?n(t,e,!T):void 0;return void 0!==i?i:f.attributes||!T?t.getAttribute(e):(i=t.getAttributeNode(e))&&i.specified?i.value:null},at.escape=function(t){return(t+"").replace(ot,rt)},at.error=function(t){throw new Error("Syntax error, unrecognized expression: "+t)},at.uniqueSort=function(t){var e,n=[],i=0,o=0;if(c=!f.detectDuplicates,l=!f.sortStable&&t.slice(0),t.sort(N),c){for(;e=t[o++];)e===t[o]&&(i=n.push(o));for(;i--;)t.splice(n[i],1)}return l=null,t},r=at.getText=function(t){var e,n="",i=0,o=t.nodeType;if(o){if(1===o||9===o||11===o){if("string"==typeof t.textContent)return t.textContent;for(t=t.firstChild;t;t=t.nextSibling)n+=r(t)}else if(3===o||4===o)return t.nodeValue}else for(;e=t[i++];)n+=r(e);return n},(w=at.selectors={cacheLength:50,createPseudo:ct,match:K,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(t){return t[1]=t[1].replace(it,d),t[3]=(t[3]||t[4]||t[5]||"").replace(it,d),"~="===t[2]&&(t[3]=" "+t[3]+" "),t.slice(0,4)},CHILD:function(t){return t[1]=t[1].toLowerCase(),"nth"===t[1].slice(0,3)?(t[3]||at.error(t[0]),t[4]=+(t[4]?t[5]+(t[6]||1):2*("even"===t[3]||"odd"===t[3])),t[5]=+(t[7]+t[8]||"odd"===t[3])):t[3]&&at.error(t[0]),t},PSEUDO:function(t){var e,n=!t[6]&&t[2];return K.CHILD.test(t[0])?null:(t[3]?t[2]=t[4]||t[5]||"":n&&V.test(n)&&(e=h(n,!0))&&(e=n.indexOf(")",n.length-e)-n.length)&&(t[0]=t[0].slice(0,e),t[2]=n.slice(0,e)),t.slice(0,3))}},filter:{TAG:function(t){var e=t.replace(it,d).toLowerCase();return"*"===t?function(){return!0}:function(t){return t.nodeName&&t.nodeName.toLowerCase()===e}},CLASS:function(t){var e=E[t+" "];return e||(e=new RegExp("(^|"+B+")"+t+"("+B+"|$)"))&&E(t,function(t){return e.test("string"==typeof t.className&&t.className||void 0!==t.getAttribute&&t.getAttribute("class")||"")})},ATTR:function(n,i,o){return function(t){var e=at.attr(t,n);return null==e?"!="===i:!i||(e+="","="===i?e===o:"!="===i?e!==o:"^="===i?o&&0===e.indexOf(o):"*="===i?o&&-1<e.indexOf(o):"$="===i?o&&e.slice(-o.length)===o:"~="===i?-1<(" "+e.replace(W," ")+" ").indexOf(o):"|="===i&&(e===o||e.slice(0,o.length+1)===o+"-"))}},CHILD:function(h,t,e,g,m){var y="nth"!==h.slice(0,3),v="last"!==h.slice(-4),b="of-type"===t;return 1===g&&0===m?function(t){return!!t.parentNode}:function(t,e,n){var i,o,r,s,a,l,c=y!=v?"nextSibling":"previousSibling",u=t.parentNode,d=b&&t.nodeName.toLowerCase(),p=!n&&!b,f=!1;if(u){if(y){for(;c;){for(s=t;s=s[c];)if(b?s.nodeName.toLowerCase()===d:1===s.nodeType)return!1;l=c="only"===h&&!l&&"nextSibling"}return!0}if(l=[v?u.firstChild:u.lastChild],v&&p){for(f=(a=(i=(o=(r=(s=u)[k]||(s[k]={}))[s.uniqueID]||(r[s.uniqueID]={}))[h]||[])[0]===A&&i[1])&&i[2],s=a&&u.childNodes[a];s=++a&&s&&s[c]||(f=a=0)||l.pop();)if(1===s.nodeType&&++f&&s===t){o[h]=[A,a,f];break}}else if(p&&(f=a=(i=(o=(r=(s=t)[k]||(s[k]={}))[s.uniqueID]||(r[s.uniqueID]={}))[h]||[])[0]===A&&i[1]),!1===f)for(;(s=++a&&s&&s[c]||(f=a=0)||l.pop())&&((b?s.nodeName.toLowerCase()!==d:1!==s.nodeType)||!++f||(p&&((o=(r=s[k]||(s[k]={}))[s.uniqueID]||(r[s.uniqueID]={}))[h]=[A,f]),s!==t)););return(f-=m)===g||f%g==0&&0<=f/g}}},PSEUDO:function(t,r){var e,s=w.pseudos[t]||w.setFilters[t.toLowerCase()]||at.error("unsupported pseudo: "+t);return s[k]?s(r):1<s.length?(e=[t,t,"",r],w.setFilters.hasOwnProperty(t.toLowerCase())?ct(function(t,e){for(var n,i=s(t,r),o=i.length;o--;)t[n=F(t,i[o])]=!(e[n]=i[o])}):function(t){return s(t,0,e)}):s}},pseudos:{not:ct(function(t){var i=[],o=[],a=p(t.replace(_,"$1"));return a[k]?ct(function(t,e,n,i){for(var o,r=a(t,null,i,[]),s=t.length;s--;)(o=r[s])&&(t[s]=!(e[s]=o))}):function(t,e,n){return i[0]=t,a(i,null,n,o),i[0]=null,!o.pop()}}),has:ct(function(e){return function(t){return 0<at(e,t).length}}),contains:ct(function(e){return e=e.replace(it,d),function(t){return-1<(t.textContent||r(t)).indexOf(e)}}),lang:ct(function(n){return Y.test(n||"")||at.error("unsupported lang: "+n),n=n.replace(it,d).toLowerCase(),function(t){var e;do{if(e=T?t.lang:t.getAttribute("xml:lang")||t.getAttribute("lang"))return(e=e.toLowerCase())===n||0===e.indexOf(n+"-")}while((t=t.parentNode)&&1===t.nodeType);return!1}}),target:function(t){var e=n.location&&n.location.hash;return e&&e.slice(1)===t.id},root:function(t){return t===a},focus:function(t){return t===S.activeElement&&(!S.hasFocus||S.hasFocus())&&!!(t.type||t.href||~t.tabIndex)},enabled:gt(!1),disabled:gt(!0),checked:function(t){var e=t.nodeName.toLowerCase();return"input"===e&&!!t.checked||"option"===e&&!!t.selected},selected:function(t){return t.parentNode&&t.parentNode.selectedIndex,!0===t.selected},empty:function(t){for(t=t.firstChild;t;t=t.nextSibling)if(t.nodeType<6)return!1;return!0},parent:function(t){return!w.pseudos.empty(t)},header:function(t){return J.test(t.nodeName)},input:function(t){return Z.test(t.nodeName)},button:function(t){var e=t.nodeName.toLowerCase();return"input"===e&&"button"===t.type||"button"===e},text:function(t){var e;return"input"===t.nodeName.toLowerCase()&&"text"===t.type&&(null==(e=t.getAttribute("type"))||"text"===e.toLowerCase())},first:mt(function(){return[0]}),last:mt(function(t,e){return[e-1]}),eq:mt(function(t,e,n){return[n<0?n+e:n]}),even:mt(function(t,e){for(var n=0;n<e;n+=2)t.push(n);return t}),odd:mt(function(t,e){for(var n=1;n<e;n+=2)t.push(n);return t}),lt:mt(function(t,e,n){for(var i=n<0?n+e:e<n?e:n;0<=--i;)t.push(i);return t}),gt:mt(function(t,e,n){for(var i=n<0?n+e:n;++i<e;)t.push(i);return t})}}).pseudos.nth=w.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})w.pseudos[t]=ft(t);for(t in{submit:!0,reset:!0})w.pseudos[t]=ht(t);function vt(){}function bt(t){for(var e=0,n=t.length,i="";e<n;e++)i+=t[e].value;return i}function wt(a,t,e){var l=t.dir,c=t.next,u=c||l,d=e&&"parentNode"===u,p=i++;return t.first?function(t,e,n){for(;t=t[l];)if(1===t.nodeType||d)return a(t,e,n);return!1}:function(t,e,n){var i,o,r,s=[A,p];if(n){for(;t=t[l];)if((1===t.nodeType||d)&&a(t,e,n))return!0}else for(;t=t[l];)if(1===t.nodeType||d)if(o=(r=t[k]||(t[k]={}))[t.uniqueID]||(r[t.uniqueID]={}),c&&c===t.nodeName.toLowerCase())t=t[l]||t;else{if((i=o[u])&&i[0]===A&&i[1]===p)return s[2]=i[2];if((o[u]=s)[2]=a(t,e,n))return!0}return!1}}function xt(o){return 1<o.length?function(t,e,n){for(var i=o.length;i--;)if(!o[i](t,e,n))return!1;return!0}:o[0]}function Ct(t,e,n,i,o){for(var r,s=[],a=0,l=t.length,c=null!=e;a<l;a++)(r=t[a])&&(n&&!n(r,i,o)||(s.push(r),c&&e.push(a)));return s}function St(f,h,g,m,y,t){return m&&!m[k]&&(m=St(m)),y&&!y[k]&&(y=St(y,t)),ct(function(t,e,n,i){var o,r,s,a=[],l=[],c=e.length,u=t||function(t,e,n){for(var i=0,o=e.length;i<o;i++)at(t,e[i],n);return n}(h||"*",n.nodeType?[n]:n,[]),d=!f||!t&&h?u:Ct(u,a,f,n,i),p=g?y||(t?f:c||m)?[]:e:d;if(g&&g(d,p,n,i),m)for(o=Ct(p,l),m(o,[],n,i),r=o.length;r--;)(s=o[r])&&(p[l[r]]=!(d[l[r]]=s));if(t){if(y||f){if(y){for(o=[],r=p.length;r--;)(s=p[r])&&o.push(d[r]=s);y(null,p=[],o,i)}for(r=p.length;r--;)(s=p[r])&&-1<(o=y?F(t,s):a[r])&&(t[o]=!(e[o]=s))}}else p=Ct(p===e?p.splice(c,p.length):p),y?y(null,e,p,i):M.apply(e,p)})}function Tt(t){for(var o,e,n,i=t.length,r=w.relative[t[0].type],s=r||w.relative[" "],a=r?1:0,l=wt(function(t){return t===o},s,!0),c=wt(function(t){return-1<F(o,t)},s,!0),u=[function(t,e,n){var i=!r&&(n||e!==x)||((o=e).nodeType?l:c)(t,e,n);return o=null,i}];a<i;a++)if(e=w.relative[t[a].type])u=[wt(xt(u),e)];else{if((e=w.filter[t[a].type].apply(null,t[a].matches))[k]){for(n=++a;n<i&&!w.relative[t[n].type];n++);return St(1<a&&xt(u),1<a&&bt(t.slice(0,a-1).concat({value:" "===t[a-2].type?"*":""})).replace(_,"$1"),e,a<n&&Tt(t.slice(a,n)),n<i&&Tt(t=t.slice(n)),n<i&&bt(t))}u.push(e)}return xt(u)}function kt(m,y){function t(t,e,n,i,o){var r,s,a,l=0,c="0",u=t&&[],d=[],p=x,f=t||b&&w.find.TAG("*",o),h=A+=null==p?1:Math.random()||.1,g=f.length;for(o&&(x=e===S||e||o);c!==g&&null!=(r=f[c]);c++){if(b&&r){for(s=0,e||r.ownerDocument===S||(C(r),n=!T);a=m[s++];)if(a(r,e||S,n)){i.push(r);break}o&&(A=h)}v&&((r=!a&&r)&&l--,t&&u.push(r))}if(l+=c,v&&c!==l){for(s=0;a=y[s++];)a(u,d,e,n);if(t){if(0<l)for(;c--;)u[c]||d[c]||(d[c]=R.call(i));d=Ct(d)}M.apply(i,d),o&&!t&&0<d.length&&1<l+y.length&&at.uniqueSort(i)}return o&&(A=h,x=p),u}var v=0<y.length,b=0<m.length;return v?ct(t):t}return vt.prototype=w.filters=w.pseudos,w.setFilters=new vt,h=at.tokenize=function(t,e){var n,i,o,r,s,a,l,c=D[t+" "];if(c)return e?0:c.slice(0);for(s=t,a=[],l=w.preFilter;s;){for(r in n&&!(i=U.exec(s))||(i&&(s=s.slice(i[0].length)||s),a.push(o=[])),n=!1,(i=G.exec(s))&&(n=i.shift(),o.push({value:n,type:i[0].replace(_," ")}),s=s.slice(n.length)),w.filter)!(i=K[r].exec(s))||l[r]&&!(i=l[r](i))||(n=i.shift(),o.push({value:n,type:r,matches:i}),s=s.slice(n.length));if(!n)break}return e?s.length:s?at.error(t):D(t,a).slice(0)},p=at.compile=function(t,e){var n,i=[],o=[],r=O[t+" "];if(!r){for(n=(e=e||h(t)).length;n--;)(r=Tt(e[n]))[k]?i.push(r):o.push(r);(r=O(t,kt(o,i))).selector=t}return r},g=at.select=function(t,e,n,i){var o,r,s,a,l,c="function"==typeof t&&t,u=!i&&h(t=c.selector||t);if(n=n||[],1===u.length){if(2<(r=u[0]=u[0].slice(0)).length&&"ID"===(s=r[0]).type&&9===e.nodeType&&T&&w.relative[r[1].type]){if(!(e=(w.find.ID(s.matches[0].replace(it,d),e)||[])[0]))return n;c&&(e=e.parentNode),t=t.slice(r.shift().value.length)}for(o=K.needsContext.test(t)?0:r.length;o--&&(s=r[o],!w.relative[a=s.type]);)if((l=w.find[a])&&(i=l(s.matches[0].replace(it,d),nt.test(r[0].type)&&yt(e.parentNode)||e))){if(r.splice(o,1),!(t=i.length&&bt(r)))return M.apply(n,i),n;break}}return(c||p(t,u))(i,e,!T,n,!e||nt.test(t)&&yt(e.parentNode)||e),n},f.sortStable=k.split("").sort(N).join("")===k,f.detectDuplicates=!!c,C(),f.sortDetached=ut(function(t){return 1&t.compareDocumentPosition(S.createElement("fieldset"))}),ut(function(t){return t.innerHTML="<a href='#'></a>","#"===t.firstChild.getAttribute("href")})||dt("type|href|height|width",function(t,e,n){if(!n)return t.getAttribute(e,"type"===e.toLowerCase()?1:2)}),f.attributes&&ut(function(t){return t.innerHTML="<input/>",t.firstChild.setAttribute("value",""),""===t.firstChild.getAttribute("value")})||dt("value",function(t,e,n){if(!n&&"input"===t.nodeName.toLowerCase())return t.defaultValue}),ut(function(t){return null==t.getAttribute("disabled")})||dt(L,function(t,e,n){var i;if(!n)return!0===t[e]?e.toLowerCase():(i=t.getAttributeNode(e))&&i.specified?i.value:null}),at}(S);k.find=h,k.expr=h.selectors,k.expr[":"]=k.expr.pseudos,k.uniqueSort=k.unique=h.uniqueSort,k.text=h.getText,k.isXMLDoc=h.isXML,k.contains=h.contains,k.escapeSelector=h.escape;function C(t,e,n){for(var i=[],o=void 0!==n;(t=t[e])&&9!==t.nodeType;)if(1===t.nodeType){if(o&&k(t).is(n))break;i.push(t)}return i}function A(t,e){for(var n=[];t;t=t.nextSibling)1===t.nodeType&&t!==e&&n.push(t);return n}var E=k.expr.match.needsContext;function D(t,e){return t.nodeName&&t.nodeName.toLowerCase()===e.toLowerCase()}var O=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;function I(t,n,i){return b(n)?k.grep(t,function(t,e){return!!n.call(t,e,t)!==i}):n.nodeType?k.grep(t,function(t){return t===n!==i}):"string"!=typeof n?k.grep(t,function(t){return-1<o.call(n,t)!==i}):k.filter(n,t,i)}k.filter=function(t,e,n){var i=e[0];return n&&(t=":not("+t+")"),1===e.length&&1===i.nodeType?k.find.matchesSelector(i,t)?[i]:[]:k.find.matches(t,k.grep(e,function(t){return 1===t.nodeType}))},k.fn.extend({find:function(t){var e,n,i=this.length,o=this;if("string"!=typeof t)return this.pushStack(k(t).filter(function(){for(e=0;e<i;e++)if(k.contains(o[e],this))return!0}));for(n=this.pushStack([]),e=0;e<i;e++)k.find(t,o[e],n);return 1<i?k.uniqueSort(n):n},filter:function(t){return this.pushStack(I(this,t||[],!1))},not:function(t){return this.pushStack(I(this,t||[],!0))},is:function(t){return!!I(this,"string"==typeof t&&E.test(t)?k(t):t||[],!1).length}});var N,P=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(k.fn.init=function(t,e,n){var i,o;if(!t)return this;if(n=n||N,"string"!=typeof t)return t.nodeType?(this[0]=t,this.length=1,this):b(t)?void 0!==n.ready?n.ready(t):t(k):k.makeArray(t,this);if(!(i="<"===t[0]&&">"===t[t.length-1]&&3<=t.length?[null,t,null]:P.exec(t))||!i[1]&&e)return!e||e.jquery?(e||n).find(t):this.constructor(e).find(t);if(i[1]){if(e=e instanceof k?e[0]:e,k.merge(this,k.parseHTML(i[1],e&&e.nodeType?e.ownerDocument||e:T,!0)),O.test(i[1])&&k.isPlainObject(e))for(i in e)b(this[i])?this[i](e[i]):this.attr(i,e[i]);return this}return(o=T.getElementById(i[2]))&&(this[0]=o,this.length=1),this}).prototype=k.fn,N=k(T);var R=/^(?:parents|prev(?:Until|All))/,$={children:!0,contents:!0,next:!0,prev:!0};function M(t,e){for(;(t=t[e])&&1!==t.nodeType;);return t}k.fn.extend({has:function(t){var e=k(t,this),n=e.length;return this.filter(function(){for(var t=0;t<n;t++)if(k.contains(this,e[t]))return!0})},closest:function(t,e){var n,i=0,o=this.length,r=[],s="string"!=typeof t&&k(t);if(!E.test(t))for(;i<o;i++)for(n=this[i];n&&n!==e;n=n.parentNode)if(n.nodeType<11&&(s?-1<s.index(n):1===n.nodeType&&k.find.matchesSelector(n,t))){r.push(n);break}return this.pushStack(1<r.length?k.uniqueSort(r):r)},index:function(t){return t?"string"==typeof t?o.call(k(t),this[0]):o.call(this,t.jquery?t[0]:t):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(t,e){return this.pushStack(k.uniqueSort(k.merge(this.get(),k(t,e))))},addBack:function(t){return this.add(null==t?this.prevObject:this.prevObject.filter(t))}}),k.each({parent:function(t){var e=t.parentNode;return e&&11!==e.nodeType?e:null},parents:function(t){return C(t,"parentNode")},parentsUntil:function(t,e,n){return C(t,"parentNode",n)},next:function(t){return M(t,"nextSibling")},prev:function(t){return M(t,"previousSibling")},nextAll:function(t){return C(t,"nextSibling")},prevAll:function(t){return C(t,"previousSibling")},nextUntil:function(t,e,n){return C(t,"nextSibling",n)},prevUntil:function(t,e,n){return C(t,"previousSibling",n)},siblings:function(t){return A((t.parentNode||{}).firstChild,t)},children:function(t){return A(t.firstChild)},contents:function(t){return void 0!==t.contentDocument?t.contentDocument:(D(t,"template")&&(t=t.content||t),k.merge([],t.childNodes))}},function(i,o){k.fn[i]=function(t,e){var n=k.map(this,o,t);return"Until"!==i.slice(-5)&&(e=t),e&&"string"==typeof e&&(n=k.filter(e,n)),1<this.length&&($[i]||k.uniqueSort(n),R.test(i)&&n.reverse()),this.pushStack(n)}});var j=/[^\x20\t\r\n\f]+/g;function F(t){return t}function L(t){throw t}function B(t,e,n,i){var o;try{t&&b(o=t.promise)?o.call(t).done(e).fail(n):t&&b(o=t.then)?o.call(t,e,n):e.apply(void 0,[t].slice(i))}catch(t){n.apply(void 0,[t])}}k.Callbacks=function(i){var t,n;i="string"==typeof i?(t=i,n={},k.each(t.match(j)||[],function(t,e){n[e]=!0}),n):k.extend({},i);function o(){for(a=a||i.once,s=r=!0;c.length;u=-1)for(e=c.shift();++u<l.length;)!1===l[u].apply(e[0],e[1])&&i.stopOnFalse&&(u=l.length,e=!1);i.memory||(e=!1),r=!1,a&&(l=e?[]:"")}var r,e,s,a,l=[],c=[],u=-1,d={add:function(){return l&&(e&&!r&&(u=l.length-1,c.push(e)),function n(t){k.each(t,function(t,e){b(e)?i.unique&&d.has(e)||l.push(e):e&&e.length&&"string"!==x(e)&&n(e)})}(arguments),e&&!r&&o()),this},remove:function(){return k.each(arguments,function(t,e){for(var n;-1<(n=k.inArray(e,l,n));)l.splice(n,1),n<=u&&u--}),this},has:function(t){return t?-1<k.inArray(t,l):0<l.length},empty:function(){return l=l&&[],this},disable:function(){return a=c=[],l=e="",this},disabled:function(){return!l},lock:function(){return a=c=[],e||r||(l=e=""),this},locked:function(){return!!a},fireWith:function(t,e){return a||(e=[t,(e=e||[]).slice?e.slice():e],c.push(e),r||o()),this},fire:function(){return d.fireWith(this,arguments),this},fired:function(){return!!s}};return d},k.extend({Deferred:function(t){var r=[["notify","progress",k.Callbacks("memory"),k.Callbacks("memory"),2],["resolve","done",k.Callbacks("once memory"),k.Callbacks("once memory"),0,"resolved"],["reject","fail",k.Callbacks("once memory"),k.Callbacks("once memory"),1,"rejected"]],o="pending",s={state:function(){return o},always:function(){return a.done(arguments).fail(arguments),this},catch:function(t){return s.then(null,t)},pipe:function(){var o=arguments;return k.Deferred(function(i){k.each(r,function(t,e){var n=b(o[e[4]])&&o[e[4]];a[e[1]](function(){var t=n&&n.apply(this,arguments);t&&b(t.promise)?t.promise().progress(i.notify).done(i.resolve).fail(i.reject):i[e[0]+"With"](this,n?[t]:arguments)})}),o=null}).promise()},then:function(e,n,i){var l=0;function c(o,r,s,a){return function(){function t(){var t,e;if(!(o<l)){if((t=s.apply(n,i))===r.promise())throw new TypeError("Thenable self-resolution");e=t&&("object"==typeof t||"function"==typeof t)&&t.then,b(e)?a?e.call(t,c(l,r,F,a),c(l,r,L,a)):(l++,e.call(t,c(l,r,F,a),c(l,r,L,a),c(l,r,F,r.notifyWith))):(s!==F&&(n=void 0,i=[t]),(a||r.resolveWith)(n,i))}}var n=this,i=arguments,e=a?t:function(){try{t()}catch(t){k.Deferred.exceptionHook&&k.Deferred.exceptionHook(t,e.stackTrace),l<=o+1&&(s!==L&&(n=void 0,i=[t]),r.rejectWith(n,i))}};o?e():(k.Deferred.getStackHook&&(e.stackTrace=k.Deferred.getStackHook()),S.setTimeout(e))}}return k.Deferred(function(t){r[0][3].add(c(0,t,b(i)?i:F,t.notifyWith)),r[1][3].add(c(0,t,b(e)?e:F)),r[2][3].add(c(0,t,b(n)?n:L))}).promise()},promise:function(t){return null!=t?k.extend(t,s):s}},a={};return k.each(r,function(t,e){var n=e[2],i=e[5];s[e[1]]=n.add,i&&n.add(function(){o=i},r[3-t][2].disable,r[3-t][3].disable,r[0][2].lock,r[0][3].lock),n.add(e[3].fire),a[e[0]]=function(){return a[e[0]+"With"](this===a?void 0:this,arguments),this},a[e[0]+"With"]=n.fireWith}),s.promise(a),t&&t.call(a,a),a},when:function(t){function e(e){return function(t){o[e]=this,r[e]=1<arguments.length?a.call(arguments):t,--n||s.resolveWith(o,r)}}var n=arguments.length,i=n,o=Array(i),r=a.call(arguments),s=k.Deferred();if(n<=1&&(B(t,s.done(e(i)).resolve,s.reject,!n),"pending"===s.state()||b(r[i]&&r[i].then)))return s.then();for(;i--;)B(r[i],e(i),s.reject);return s.promise()}});var H=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;k.Deferred.exceptionHook=function(t,e){S.console&&S.console.warn&&t&&H.test(t.name)&&S.console.warn("jQuery.Deferred exception: "+t.message,t.stack,e)},k.readyException=function(t){S.setTimeout(function(){throw t})};var q=k.Deferred();function z(){T.removeEventListener("DOMContentLoaded",z),S.removeEventListener("load",z),k.ready()}k.fn.ready=function(t){return q.then(t).catch(function(t){k.readyException(t)}),this},k.extend({isReady:!1,readyWait:1,ready:function(t){(!0===t?--k.readyWait:k.isReady)||(k.isReady=!0)!==t&&0<--k.readyWait||q.resolveWith(T,[k])}}),k.ready.then=q.then,"complete"===T.readyState||"loading"!==T.readyState&&!T.documentElement.doScroll?S.setTimeout(k.ready):(T.addEventListener("DOMContentLoaded",z),S.addEventListener("load",z));var W=function(t,e,n,i,o,r,s){var a=0,l=t.length,c=null==n;if("object"===x(n))for(a in o=!0,n)W(t,e,a,n[a],!0,r,s);else if(void 0!==i&&(o=!0,b(i)||(s=!0),c&&(e=s?(e.call(t,i),null):(c=e,function(t,e,n){return c.call(k(t),n)})),e))for(;a<l;a++)e(t[a],n,s?i:i.call(t[a],a,e(t[a],n)));return o?t:c?e.call(t):l?e(t[0],n):r},_=/^-ms-/,U=/-([a-z])/g;function G(t,e){return e.toUpperCase()}function X(t){return t.replace(_,"ms-").replace(U,G)}function V(t){return 1===t.nodeType||9===t.nodeType||!+t.nodeType}function Y(){this.expando=k.expando+Y.uid++}Y.uid=1,Y.prototype={cache:function(t){var e=t[this.expando];return e||(e={},V(t)&&(t.nodeType?t[this.expando]=e:Object.defineProperty(t,this.expando,{value:e,configurable:!0}))),e},set:function(t,e,n){var i,o=this.cache(t);if("string"==typeof e)o[X(e)]=n;else for(i in e)o[X(i)]=e[i];return o},get:function(t,e){return void 0===e?this.cache(t):t[this.expando]&&t[this.expando][X(e)]},access:function(t,e,n){return void 0===e||e&&"string"==typeof e&&void 0===n?this.get(t,e):(this.set(t,e,n),void 0!==n?n:e)},remove:function(t,e){var n,i=t[this.expando];if(void 0!==i){if(void 0!==e){n=(e=Array.isArray(e)?e.map(X):(e=X(e))in i?[e]:e.match(j)||[]).length;for(;n--;)delete i[e[n]]}void 0!==e&&!k.isEmptyObject(i)||(t.nodeType?t[this.expando]=void 0:delete t[this.expando])}},hasData:function(t){var e=t[this.expando];return void 0!==e&&!k.isEmptyObject(e)}};var K=new Y,Q=new Y,Z=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,J=/[A-Z]/g;function tt(t,e,n){var i,o;if(void 0===n&&1===t.nodeType)if(i="data-"+e.replace(J,"-$&").toLowerCase(),"string"==typeof(n=t.getAttribute(i))){try{n="true"===(o=n)||"false"!==o&&("null"===o?null:o===+o+""?+o:Z.test(o)?JSON.parse(o):o)}catch(t){}Q.set(t,e,n)}else n=void 0;return n}k.extend({hasData:function(t){return Q.hasData(t)||K.hasData(t)},data:function(t,e,n){return Q.access(t,e,n)},removeData:function(t,e){Q.remove(t,e)},_data:function(t,e,n){return K.access(t,e,n)},_removeData:function(t,e){K.remove(t,e)}}),k.fn.extend({data:function(n,t){var e,i,o,r=this[0],s=r&&r.attributes;if(void 0!==n)return"object"==typeof n?this.each(function(){Q.set(this,n)}):W(this,function(t){var e;if(r&&void 0===t)return void 0!==(e=Q.get(r,n))||void 0!==(e=tt(r,n))?e:void 0;this.each(function(){Q.set(this,n,t)})},null,t,1<arguments.length,null,!0);if(this.length&&(o=Q.get(r),1===r.nodeType&&!K.get(r,"hasDataAttrs"))){for(e=s.length;e--;)s[e]&&0===(i=s[e].name).indexOf("data-")&&(i=X(i.slice(5)),tt(r,i,o[i]));K.set(r,"hasDataAttrs",!0)}return o},removeData:function(t){return this.each(function(){Q.remove(this,t)})}}),k.extend({queue:function(t,e,n){var i;if(t)return e=(e||"fx")+"queue",i=K.get(t,e),n&&(!i||Array.isArray(n)?i=K.access(t,e,k.makeArray(n)):i.push(n)),i||[]},dequeue:function(t,e){e=e||"fx";var n=k.queue(t,e),i=n.length,o=n.shift(),r=k._queueHooks(t,e);"inprogress"===o&&(o=n.shift(),i--),o&&("fx"===e&&n.unshift("inprogress"),delete r.stop,o.call(t,function(){k.dequeue(t,e)},r)),!i&&r&&r.empty.fire()},_queueHooks:function(t,e){var n=e+"queueHooks";return K.get(t,n)||K.access(t,n,{empty:k.Callbacks("once memory").add(function(){K.remove(t,[e+"queue",n])})})}}),k.fn.extend({queue:function(e,n){var t=2;return"string"!=typeof e&&(n=e,e="fx",t--),arguments.length<t?k.queue(this[0],e):void 0===n?this:this.each(function(){var t=k.queue(this,e,n);k._queueHooks(this,e),"fx"===e&&"inprogress"!==t[0]&&k.dequeue(this,e)})},dequeue:function(t){return this.each(function(){k.dequeue(this,t)})},clearQueue:function(t){return this.queue(t||"fx",[])},promise:function(t,e){function n(){--o||r.resolveWith(s,[s])}var i,o=1,r=k.Deferred(),s=this,a=this.length;for("string"!=typeof t&&(e=t,t=void 0),t=t||"fx";a--;)(i=K.get(s[a],t+"queueHooks"))&&i.empty&&(o++,i.empty.add(n));return n(),r.promise(e)}});var et=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,nt=new RegExp("^(?:([+-])=|)("+et+")([a-z%]*)$","i"),it=["Top","Right","Bottom","Left"],ot=T.documentElement,rt=function(t){return k.contains(t.ownerDocument,t)},st={composed:!0};ot.getRootNode&&(rt=function(t){return k.contains(t.ownerDocument,t)||t.getRootNode(st)===t.ownerDocument});function at(t,e,n,i){var o,r,s={};for(r in e)s[r]=t.style[r],t.style[r]=e[r];for(r in o=n.apply(t,i||[]),e)t.style[r]=s[r];return o}var lt=function(t,e){return"none"===(t=e||t).style.display||""===t.style.display&&rt(t)&&"none"===k.css(t,"display")};function ct(t,e,n,i){var o,r,s=20,a=i?function(){return i.cur()}:function(){return k.css(t,e,"")},l=a(),c=n&&n[3]||(k.cssNumber[e]?"":"px"),u=t.nodeType&&(k.cssNumber[e]||"px"!==c&&+l)&&nt.exec(k.css(t,e));if(u&&u[3]!==c){for(l/=2,c=c||u[3],u=+l||1;s--;)k.style(t,e,u+c),(1-r)*(1-(r=a()/l||.5))<=0&&(s=0),u/=r;u*=2,k.style(t,e,u+c),n=n||[]}return n&&(u=+u||+l||0,o=n[1]?u+(n[1]+1)*n[2]:+n[2],i&&(i.unit=c,i.start=u,i.end=o)),o}var ut={};function dt(t,e){for(var n,i,o,r,s,a,l,c=[],u=0,d=t.length;u<d;u++)(i=t[u]).style&&(n=i.style.display,e?("none"===n&&(c[u]=K.get(i,"display")||null,c[u]||(i.style.display="")),""===i.style.display&&lt(i)&&(c[u]=(l=s=r=void 0,s=(o=i).ownerDocument,a=o.nodeName,(l=ut[a])||(r=s.body.appendChild(s.createElement(a)),l=k.css(r,"display"),r.parentNode.removeChild(r),"none"===l&&(l="block"),ut[a]=l)))):"none"!==n&&(c[u]="none",K.set(i,"display",n)));for(u=0;u<d;u++)null!=c[u]&&(t[u].style.display=c[u]);return t}k.fn.extend({show:function(){return dt(this,!0)},hide:function(){return dt(this)},toggle:function(t){return"boolean"==typeof t?t?this.show():this.hide():this.each(function(){lt(this)?k(this).show():k(this).hide()})}});var pt=/^(?:checkbox|radio)$/i,ft=/<([a-z][^\/\0>\x20\t\r\n\f]*)/i,ht=/^$|^module$|\/(?:java|ecma)script/i,gt={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};function mt(t,e){var n;return n=void 0!==t.getElementsByTagName?t.getElementsByTagName(e||"*"):void 0!==t.querySelectorAll?t.querySelectorAll(e||"*"):[],void 0===e||e&&D(t,e)?k.merge([t],n):n}function yt(t,e){for(var n=0,i=t.length;n<i;n++)K.set(t[n],"globalEval",!e||K.get(e[n],"globalEval"))}gt.optgroup=gt.option,gt.tbody=gt.tfoot=gt.colgroup=gt.caption=gt.thead,gt.th=gt.td;var vt,bt,wt=/<|&#?\w+;/;function xt(t,e,n,i,o){for(var r,s,a,l,c,u,d=e.createDocumentFragment(),p=[],f=0,h=t.length;f<h;f++)if((r=t[f])||0===r)if("object"===x(r))k.merge(p,r.nodeType?[r]:r);else if(wt.test(r)){for(s=s||d.appendChild(e.createElement("div")),a=(ft.exec(r)||["",""])[1].toLowerCase(),l=gt[a]||gt._default,s.innerHTML=l[1]+k.htmlPrefilter(r)+l[2],u=l[0];u--;)s=s.lastChild;k.merge(p,s.childNodes),(s=d.firstChild).textContent=""}else p.push(e.createTextNode(r));for(d.textContent="",f=0;r=p[f++];)if(i&&-1<k.inArray(r,i))o&&o.push(r);else if(c=rt(r),s=mt(d.appendChild(r),"script"),c&&yt(s),n)for(u=0;r=s[u++];)ht.test(r.type||"")&&n.push(r);return d}vt=T.createDocumentFragment().appendChild(T.createElement("div")),(bt=T.createElement("input")).setAttribute("type","radio"),bt.setAttribute("checked","checked"),bt.setAttribute("name","t"),vt.appendChild(bt),v.checkClone=vt.cloneNode(!0).cloneNode(!0).lastChild.checked,vt.innerHTML="<textarea>x</textarea>",v.noCloneChecked=!!vt.cloneNode(!0).lastChild.defaultValue;var Ct=/^key/,St=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,Tt=/^([^.]*)(?:\.(.+)|)/;function kt(){return!0}function At(){return!1}function Et(t,e){return t===function(){try{return T.activeElement}catch(t){}}()==("focus"===e)}function Dt(t,e,n,i,o,r){var s,a;if("object"==typeof e){for(a in"string"!=typeof n&&(i=i||n,n=void 0),e)Dt(t,a,n,i,e[a],r);return t}if(null==i&&null==o?(o=n,i=n=void 0):null==o&&("string"==typeof n?(o=i,i=void 0):(o=i,i=n,n=void 0)),!1===o)o=At;else if(!o)return t;return 1===r&&(s=o,(o=function(t){return k().off(t),s.apply(this,arguments)}).guid=s.guid||(s.guid=k.guid++)),t.each(function(){k.event.add(this,e,o,i,n)})}function Ot(t,o,r){r?(K.set(t,o,!1),k.event.add(t,o,{namespace:!1,handler:function(t){var e,n,i=K.get(this,o);if(1&t.isTrigger&&this[o]){if(i.length)(k.event.special[o]||{}).delegateType&&t.stopPropagation();else if(i=a.call(arguments),K.set(this,o,i),e=r(this,o),this[o](),i!==(n=K.get(this,o))||e?K.set(this,o,!1):n={},i!==n)return t.stopImmediatePropagation(),t.preventDefault(),n.value}else i.length&&(K.set(this,o,{value:k.event.trigger(k.extend(i[0],k.Event.prototype),i.slice(1),this)}),t.stopImmediatePropagation())}})):void 0===K.get(t,o)&&k.event.add(t,o,kt)}k.event={global:{},add:function(e,t,n,i,o){var r,s,a,l,c,u,d,p,f,h,g,m=K.get(e);if(m)for(n.handler&&(n=(r=n).handler,o=r.selector),o&&k.find.matchesSelector(ot,o),n.guid||(n.guid=k.guid++),(l=m.events)||(l=m.events={}),(s=m.handle)||(s=m.handle=function(t){return void 0!==k&&k.event.triggered!==t.type?k.event.dispatch.apply(e,arguments):void 0}),c=(t=(t||"").match(j)||[""]).length;c--;)f=g=(a=Tt.exec(t[c])||[])[1],h=(a[2]||"").split(".").sort(),f&&(d=k.event.special[f]||{},f=(o?d.delegateType:d.bindType)||f,d=k.event.special[f]||{},u=k.extend({type:f,origType:g,data:i,handler:n,guid:n.guid,selector:o,needsContext:o&&k.expr.match.needsContext.test(o),namespace:h.join(".")},r),(p=l[f])||((p=l[f]=[]).delegateCount=0,d.setup&&!1!==d.setup.call(e,i,h,s)||e.addEventListener&&e.addEventListener(f,s)),d.add&&(d.add.call(e,u),u.handler.guid||(u.handler.guid=n.guid)),o?p.splice(p.delegateCount++,0,u):p.push(u),k.event.global[f]=!0)},remove:function(t,e,n,i,o){var r,s,a,l,c,u,d,p,f,h,g,m=K.hasData(t)&&K.get(t);if(m&&(l=m.events)){for(c=(e=(e||"").match(j)||[""]).length;c--;)if(f=g=(a=Tt.exec(e[c])||[])[1],h=(a[2]||"").split(".").sort(),f){for(d=k.event.special[f]||{},p=l[f=(i?d.delegateType:d.bindType)||f]||[],a=a[2]&&new RegExp("(^|\\.)"+h.join("\\.(?:.*\\.|)")+"(\\.|$)"),s=r=p.length;r--;)u=p[r],!o&&g!==u.origType||n&&n.guid!==u.guid||a&&!a.test(u.namespace)||i&&i!==u.selector&&("**"!==i||!u.selector)||(p.splice(r,1),u.selector&&p.delegateCount--,d.remove&&d.remove.call(t,u));s&&!p.length&&(d.teardown&&!1!==d.teardown.call(t,h,m.handle)||k.removeEvent(t,f,m.handle),delete l[f])}else for(f in l)k.event.remove(t,f+e[c],n,i,!0);k.isEmptyObject(l)&&K.remove(t,"handle events")}},dispatch:function(t){var e,n,i,o,r,s,a=k.event.fix(t),l=new Array(arguments.length),c=(K.get(this,"events")||{})[a.type]||[],u=k.event.special[a.type]||{};for(l[0]=a,e=1;e<arguments.length;e++)l[e]=arguments[e];if(a.delegateTarget=this,!u.preDispatch||!1!==u.preDispatch.call(this,a)){for(s=k.event.handlers.call(this,a,c),e=0;(o=s[e++])&&!a.isPropagationStopped();)for(a.currentTarget=o.elem,n=0;(r=o.handlers[n++])&&!a.isImmediatePropagationStopped();)a.rnamespace&&!1!==r.namespace&&!a.rnamespace.test(r.namespace)||(a.handleObj=r,a.data=r.data,void 0!==(i=((k.event.special[r.origType]||{}).handle||r.handler).apply(o.elem,l))&&!1===(a.result=i)&&(a.preventDefault(),a.stopPropagation()));return u.postDispatch&&u.postDispatch.call(this,a),a.result}},handlers:function(t,e){var n,i,o,r,s,a=[],l=e.delegateCount,c=t.target;if(l&&c.nodeType&&!("click"===t.type&&1<=t.button))for(;c!==this;c=c.parentNode||this)if(1===c.nodeType&&("click"!==t.type||!0!==c.disabled)){for(r=[],s={},n=0;n<l;n++)void 0===s[o=(i=e[n]).selector+" "]&&(s[o]=i.needsContext?-1<k(o,this).index(c):k.find(o,this,null,[c]).length),s[o]&&r.push(i);r.length&&a.push({elem:c,handlers:r})}return c=this,l<e.length&&a.push({elem:c,handlers:e.slice(l)}),a},addProp:function(e,t){Object.defineProperty(k.Event.prototype,e,{enumerable:!0,configurable:!0,get:b(t)?function(){if(this.originalEvent)return t(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[e]},set:function(t){Object.defineProperty(this,e,{enumerable:!0,configurable:!0,writable:!0,value:t})}})},fix:function(t){return t[k.expando]?t:new k.Event(t)},special:{load:{noBubble:!0},click:{setup:function(t){var e=this||t;return pt.test(e.type)&&e.click&&D(e,"input")&&Ot(e,"click",kt),!1},trigger:function(t){var e=this||t;return pt.test(e.type)&&e.click&&D(e,"input")&&Ot(e,"click"),!0},_default:function(t){var e=t.target;return pt.test(e.type)&&e.click&&D(e,"input")&&K.get(e,"click")||D(e,"a")}},beforeunload:{postDispatch:function(t){void 0!==t.result&&t.originalEvent&&(t.originalEvent.returnValue=t.result)}}}},k.removeEvent=function(t,e,n){t.removeEventListener&&t.removeEventListener(e,n)},k.Event=function(t,e){if(!(this instanceof k.Event))return new k.Event(t,e);t&&t.type?(this.originalEvent=t,this.type=t.type,this.isDefaultPrevented=t.defaultPrevented||void 0===t.defaultPrevented&&!1===t.returnValue?kt:At,this.target=t.target&&3===t.target.nodeType?t.target.parentNode:t.target,this.currentTarget=t.currentTarget,this.relatedTarget=t.relatedTarget):this.type=t,e&&k.extend(this,e),this.timeStamp=t&&t.timeStamp||Date.now(),this[k.expando]=!0},k.Event.prototype={constructor:k.Event,isDefaultPrevented:At,isPropagationStopped:At,isImmediatePropagationStopped:At,isSimulated:!1,preventDefault:function(){var t=this.originalEvent;this.isDefaultPrevented=kt,t&&!this.isSimulated&&t.preventDefault()},stopPropagation:function(){var t=this.originalEvent;this.isPropagationStopped=kt,t&&!this.isSimulated&&t.stopPropagation()},stopImmediatePropagation:function(){var t=this.originalEvent;this.isImmediatePropagationStopped=kt,t&&!this.isSimulated&&t.stopImmediatePropagation(),this.stopPropagation()}},k.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,code:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:function(t){var e=t.button;return null==t.which&&Ct.test(t.type)?null!=t.charCode?t.charCode:t.keyCode:!t.which&&void 0!==e&&St.test(t.type)?1&e?1:2&e?3:4&e?2:0:t.which}},k.event.addProp),k.each({focus:"focusin",blur:"focusout"},function(t,e){k.event.special[t]={setup:function(){return Ot(this,t,Et),!1},trigger:function(){return Ot(this,t),!0},delegateType:e}}),k.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(t,o){k.event.special[t]={delegateType:o,bindType:o,handle:function(t){var e,n=t.relatedTarget,i=t.handleObj;return n&&(n===this||k.contains(this,n))||(t.type=i.origType,e=i.handler.apply(this,arguments),t.type=o),e}}}),k.fn.extend({on:function(t,e,n,i){return Dt(this,t,e,n,i)},one:function(t,e,n,i){return Dt(this,t,e,n,i,1)},off:function(t,e,n){var i,o;if(t&&t.preventDefault&&t.handleObj)return i=t.handleObj,k(t.delegateTarget).off(i.namespace?i.origType+"."+i.namespace:i.origType,i.selector,i.handler),this;if("object"!=typeof t)return!1!==e&&"function"!=typeof e||(n=e,e=void 0),!1===n&&(n=At),this.each(function(){k.event.remove(this,t,n,e)});for(o in t)this.off(o,e,t[o]);return this}});var It=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,Nt=/<script|<style|<link/i,Pt=/checked\s*(?:[^=]|=\s*.checked.)/i,Rt=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;function $t(t,e){return D(t,"table")&&D(11!==e.nodeType?e:e.firstChild,"tr")&&k(t).children("tbody")[0]||t}function Mt(t){return t.type=(null!==t.getAttribute("type"))+"/"+t.type,t}function jt(t){return"true/"===(t.type||"").slice(0,5)?t.type=t.type.slice(5):t.removeAttribute("type"),t}function Ft(t,e){var n,i,o,r,s,a,l,c;if(1===e.nodeType){if(K.hasData(t)&&(r=K.access(t),s=K.set(e,r),c=r.events))for(o in delete s.handle,s.events={},c)for(n=0,i=c[o].length;n<i;n++)k.event.add(e,o,c[o][n]);Q.hasData(t)&&(a=Q.access(t),l=k.extend({},a),Q.set(e,l))}}function Lt(n,i,o,r){i=m.apply([],i);var t,e,s,a,l,c,u=0,d=n.length,p=d-1,f=i[0],h=b(f);if(h||1<d&&"string"==typeof f&&!v.checkClone&&Pt.test(f))return n.each(function(t){var e=n.eq(t);h&&(i[0]=f.call(this,t,e.html())),Lt(e,i,o,r)});if(d&&(e=(t=xt(i,n[0].ownerDocument,!1,n,r)).firstChild,1===t.childNodes.length&&(t=e),e||r)){for(a=(s=k.map(mt(t,"script"),Mt)).length;u<d;u++)l=t,u!==p&&(l=k.clone(l,!0,!0),a&&k.merge(s,mt(l,"script"))),o.call(n[u],l,u);if(a)for(c=s[s.length-1].ownerDocument,k.map(s,jt),u=0;u<a;u++)l=s[u],ht.test(l.type||"")&&!K.access(l,"globalEval")&&k.contains(c,l)&&(l.src&&"module"!==(l.type||"").toLowerCase()?k._evalUrl&&!l.noModule&&k._evalUrl(l.src,{nonce:l.nonce||l.getAttribute("nonce")}):w(l.textContent.replace(Rt,""),l,c))}return n}function Bt(t,e,n){for(var i,o=e?k.filter(e,t):t,r=0;null!=(i=o[r]);r++)n||1!==i.nodeType||k.cleanData(mt(i)),i.parentNode&&(n&&rt(i)&&yt(mt(i,"script")),i.parentNode.removeChild(i));return t}k.extend({htmlPrefilter:function(t){return t.replace(It,"<$1></$2>")},clone:function(t,e,n){var i,o,r,s,a,l,c,u=t.cloneNode(!0),d=rt(t);if(!(v.noCloneChecked||1!==t.nodeType&&11!==t.nodeType||k.isXMLDoc(t)))for(s=mt(u),i=0,o=(r=mt(t)).length;i<o;i++)a=r[i],l=s[i],"input"===(c=l.nodeName.toLowerCase())&&pt.test(a.type)?l.checked=a.checked:"input"!==c&&"textarea"!==c||(l.defaultValue=a.defaultValue);if(e)if(n)for(r=r||mt(t),s=s||mt(u),i=0,o=r.length;i<o;i++)Ft(r[i],s[i]);else Ft(t,u);return 0<(s=mt(u,"script")).length&&yt(s,!d&&mt(t,"script")),u},cleanData:function(t){for(var e,n,i,o=k.event.special,r=0;void 0!==(n=t[r]);r++)if(V(n)){if(e=n[K.expando]){if(e.events)for(i in e.events)o[i]?k.event.remove(n,i):k.removeEvent(n,i,e.handle);n[K.expando]=void 0}n[Q.expando]&&(n[Q.expando]=void 0)}}}),k.fn.extend({detach:function(t){return Bt(this,t,!0)},remove:function(t){return Bt(this,t)},text:function(t){return W(this,function(t){return void 0===t?k.text(this):this.empty().each(function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=t)})},null,t,arguments.length)},append:function(){return Lt(this,arguments,function(t){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||$t(this,t).appendChild(t)})},prepend:function(){return Lt(this,arguments,function(t){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var e=$t(this,t);e.insertBefore(t,e.firstChild)}})},before:function(){return Lt(this,arguments,function(t){this.parentNode&&this.parentNode.insertBefore(t,this)})},after:function(){return Lt(this,arguments,function(t){this.parentNode&&this.parentNode.insertBefore(t,this.nextSibling)})},empty:function(){for(var t,e=0;null!=(t=this[e]);e++)1===t.nodeType&&(k.cleanData(mt(t,!1)),t.textContent="");return this},clone:function(t,e){return t=null!=t&&t,e=null==e?t:e,this.map(function(){return k.clone(this,t,e)})},html:function(t){return W(this,function(t){var e=this[0]||{},n=0,i=this.length;if(void 0===t&&1===e.nodeType)return e.innerHTML;if("string"==typeof t&&!Nt.test(t)&&!gt[(ft.exec(t)||["",""])[1].toLowerCase()]){t=k.htmlPrefilter(t);try{for(;n<i;n++)1===(e=this[n]||{}).nodeType&&(k.cleanData(mt(e,!1)),e.innerHTML=t);e=0}catch(t){}}e&&this.empty().append(t)},null,t,arguments.length)},replaceWith:function(){var n=[];return Lt(this,arguments,function(t){var e=this.parentNode;k.inArray(this,n)<0&&(k.cleanData(mt(this)),e&&e.replaceChild(t,this))},n)}}),k.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(t,s){k.fn[t]=function(t){for(var e,n=[],i=k(t),o=i.length-1,r=0;r<=o;r++)e=r===o?this:this.clone(!0),k(i[r])[s](e),l.apply(n,e.get());return this.pushStack(n)}});var Ht,qt,zt,Wt,_t,Ut,Gt,Xt=new RegExp("^("+et+")(?!px)[a-z%]+$","i"),Vt=function(t){var e=t.ownerDocument.defaultView;return e&&e.opener||(e=S),e.getComputedStyle(t)},Yt=new RegExp(it.join("|"),"i");function Kt(){if(Gt){Ut.style.cssText="position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0",Gt.style.cssText="position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%",ot.appendChild(Ut).appendChild(Gt);var t=S.getComputedStyle(Gt);Ht="1%"!==t.top,_t=12===Qt(t.marginLeft),Gt.style.right="60%",Wt=36===Qt(t.right),qt=36===Qt(t.width),Gt.style.position="absolute",zt=12===Qt(Gt.offsetWidth/3),ot.removeChild(Ut),Gt=null}}function Qt(t){return Math.round(parseFloat(t))}function Zt(t,e,n){var i,o,r,s,a=t.style;return(n=n||Vt(t))&&(""!==(s=n.getPropertyValue(e)||n[e])||rt(t)||(s=k.style(t,e)),!v.pixelBoxStyles()&&Xt.test(s)&&Yt.test(e)&&(i=a.width,o=a.minWidth,r=a.maxWidth,a.minWidth=a.maxWidth=a.width=s,s=n.width,a.width=i,a.minWidth=o,a.maxWidth=r)),void 0!==s?s+"":s}function Jt(t,e){return{get:function(){if(!t())return(this.get=e).apply(this,arguments);delete this.get}}}Ut=T.createElement("div"),(Gt=T.createElement("div")).style&&(Gt.style.backgroundClip="content-box",Gt.cloneNode(!0).style.backgroundClip="",v.clearCloneStyle="content-box"===Gt.style.backgroundClip,k.extend(v,{boxSizingReliable:function(){return Kt(),qt},pixelBoxStyles:function(){return Kt(),Wt},pixelPosition:function(){return Kt(),Ht},reliableMarginLeft:function(){return Kt(),_t},scrollboxSize:function(){return Kt(),zt}}));var te=["Webkit","Moz","ms"],ee=T.createElement("div").style,ne={};function ie(t){var e=k.cssProps[t]||ne[t];return e||(t in ee?t:ne[t]=function(t){for(var e=t[0].toUpperCase()+t.slice(1),n=te.length;n--;)if((t=te[n]+e)in ee)return t}(t)||t)}var oe=/^(none|table(?!-c[ea]).+)/,re=/^--/,se={position:"absolute",visibility:"hidden",display:"block"},ae={letterSpacing:"0",fontWeight:"400"};function le(t,e,n){var i=nt.exec(e);return i?Math.max(0,i[2]-(n||0))+(i[3]||"px"):e}function ce(t,e,n,i,o,r){var s="width"===e?1:0,a=0,l=0;if(n===(i?"border":"content"))return 0;for(;s<4;s+=2)"margin"===n&&(l+=k.css(t,n+it[s],!0,o)),i?("content"===n&&(l-=k.css(t,"padding"+it[s],!0,o)),"margin"!==n&&(l-=k.css(t,"border"+it[s]+"Width",!0,o))):(l+=k.css(t,"padding"+it[s],!0,o),"padding"!==n?l+=k.css(t,"border"+it[s]+"Width",!0,o):a+=k.css(t,"border"+it[s]+"Width",!0,o));return!i&&0<=r&&(l+=Math.max(0,Math.ceil(t["offset"+e[0].toUpperCase()+e.slice(1)]-r-l-a-.5))||0),l}function ue(t,e,n){var i=Vt(t),o=(!v.boxSizingReliable()||n)&&"border-box"===k.css(t,"boxSizing",!1,i),r=o,s=Zt(t,e,i),a="offset"+e[0].toUpperCase()+e.slice(1);if(Xt.test(s)){if(!n)return s;s="auto"}return(!v.boxSizingReliable()&&o||"auto"===s||!parseFloat(s)&&"inline"===k.css(t,"display",!1,i))&&t.getClientRects().length&&(o="border-box"===k.css(t,"boxSizing",!1,i),(r=a in t)&&(s=t[a])),(s=parseFloat(s)||0)+ce(t,e,n||(o?"border":"content"),r,i,s)+"px"}function de(t,e,n,i,o){return new de.prototype.init(t,e,n,i,o)}k.extend({cssHooks:{opacity:{get:function(t,e){if(e){var n=Zt(t,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,gridArea:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnStart:!0,gridRow:!0,gridRowEnd:!0,gridRowStart:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{},style:function(t,e,n,i){if(t&&3!==t.nodeType&&8!==t.nodeType&&t.style){var o,r,s,a=X(e),l=re.test(e),c=t.style;if(l||(e=ie(a)),s=k.cssHooks[e]||k.cssHooks[a],void 0===n)return s&&"get"in s&&void 0!==(o=s.get(t,!1,i))?o:c[e];"string"===(r=typeof n)&&(o=nt.exec(n))&&o[1]&&(n=ct(t,e,o),r="number"),null!=n&&n==n&&("number"!==r||l||(n+=o&&o[3]||(k.cssNumber[a]?"":"px")),v.clearCloneStyle||""!==n||0!==e.indexOf("background")||(c[e]="inherit"),s&&"set"in s&&void 0===(n=s.set(t,n,i))||(l?c.setProperty(e,n):c[e]=n))}},css:function(t,e,n,i){var o,r,s,a=X(e);return re.test(e)||(e=ie(a)),(s=k.cssHooks[e]||k.cssHooks[a])&&"get"in s&&(o=s.get(t,!0,n)),void 0===o&&(o=Zt(t,e,i)),"normal"===o&&e in ae&&(o=ae[e]),""===n||n?(r=parseFloat(o),!0===n||isFinite(r)?r||0:o):o}}),k.each(["height","width"],function(t,l){k.cssHooks[l]={get:function(t,e,n){if(e)return!oe.test(k.css(t,"display"))||t.getClientRects().length&&t.getBoundingClientRect().width?ue(t,l,n):at(t,se,function(){return ue(t,l,n)})},set:function(t,e,n){var i,o=Vt(t),r=!v.scrollboxSize()&&"absolute"===o.position,s=(r||n)&&"border-box"===k.css(t,"boxSizing",!1,o),a=n?ce(t,l,n,s,o):0;return s&&r&&(a-=Math.ceil(t["offset"+l[0].toUpperCase()+l.slice(1)]-parseFloat(o[l])-ce(t,l,"border",!1,o)-.5)),a&&(i=nt.exec(e))&&"px"!==(i[3]||"px")&&(t.style[l]=e,e=k.css(t,l)),le(0,e,a)}}}),k.cssHooks.marginLeft=Jt(v.reliableMarginLeft,function(t,e){if(e)return(parseFloat(Zt(t,"marginLeft"))||t.getBoundingClientRect().left-at(t,{marginLeft:0},function(){return t.getBoundingClientRect().left}))+"px"}),k.each({margin:"",padding:"",border:"Width"},function(o,r){k.cssHooks[o+r]={expand:function(t){for(var e=0,n={},i="string"==typeof t?t.split(" "):[t];e<4;e++)n[o+it[e]+r]=i[e]||i[e-2]||i[0];return n}},"margin"!==o&&(k.cssHooks[o+r].set=le)}),k.fn.extend({css:function(t,e){return W(this,function(t,e,n){var i,o,r={},s=0;if(Array.isArray(e)){for(i=Vt(t),o=e.length;s<o;s++)r[e[s]]=k.css(t,e[s],!1,i);return r}return void 0!==n?k.style(t,e,n):k.css(t,e)},t,e,1<arguments.length)}}),((k.Tween=de).prototype={constructor:de,init:function(t,e,n,i,o,r){this.elem=t,this.prop=n,this.easing=o||k.easing._default,this.options=e,this.start=this.now=this.cur(),this.end=i,this.unit=r||(k.cssNumber[n]?"":"px")},cur:function(){var t=de.propHooks[this.prop];return t&&t.get?t.get(this):de.propHooks._default.get(this)},run:function(t){var e,n=de.propHooks[this.prop];return this.options.duration?this.pos=e=k.easing[this.easing](t,this.options.duration*t,0,1,this.options.duration):this.pos=e=t,this.now=(this.end-this.start)*e+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):de.propHooks._default.set(this),this}}).init.prototype=de.prototype,(de.propHooks={_default:{get:function(t){var e;return 1!==t.elem.nodeType||null!=t.elem[t.prop]&&null==t.elem.style[t.prop]?t.elem[t.prop]:(e=k.css(t.elem,t.prop,""))&&"auto"!==e?e:0},set:function(t){k.fx.step[t.prop]?k.fx.step[t.prop](t):1!==t.elem.nodeType||!k.cssHooks[t.prop]&&null==t.elem.style[ie(t.prop)]?t.elem[t.prop]=t.now:k.style(t.elem,t.prop,t.now+t.unit)}}}).scrollTop=de.propHooks.scrollLeft={set:function(t){t.elem.nodeType&&t.elem.parentNode&&(t.elem[t.prop]=t.now)}},k.easing={linear:function(t){return t},swing:function(t){return.5-Math.cos(t*Math.PI)/2},_default:"swing"},k.fx=de.prototype.init,k.fx.step={};var pe,fe,he,ge,me=/^(?:toggle|show|hide)$/,ye=/queueHooks$/;function ve(){fe&&(!1===T.hidden&&S.requestAnimationFrame?S.requestAnimationFrame(ve):S.setTimeout(ve,k.fx.interval),k.fx.tick())}function be(){return S.setTimeout(function(){pe=void 0}),pe=Date.now()}function we(t,e){var n,i=0,o={height:t};for(e=e?1:0;i<4;i+=2-e)o["margin"+(n=it[i])]=o["padding"+n]=t;return e&&(o.opacity=o.width=t),o}function xe(t,e,n){for(var i,o=(Ce.tweeners[e]||[]).concat(Ce.tweeners["*"]),r=0,s=o.length;r<s;r++)if(i=o[r].call(n,e,t))return i}function Ce(r,t,e){var n,s,i=0,o=Ce.prefilters.length,a=k.Deferred().always(function(){delete l.elem}),l=function(){if(s)return!1;for(var t=pe||be(),e=Math.max(0,c.startTime+c.duration-t),n=1-(e/c.duration||0),i=0,o=c.tweens.length;i<o;i++)c.tweens[i].run(n);return a.notifyWith(r,[c,n,e]),n<1&&o?e:(o||a.notifyWith(r,[c,1,0]),a.resolveWith(r,[c]),!1)},c=a.promise({elem:r,props:k.extend({},t),opts:k.extend(!0,{specialEasing:{},easing:k.easing._default},e),originalProperties:t,originalOptions:e,startTime:pe||be(),duration:e.duration,tweens:[],createTween:function(t,e){var n=k.Tween(r,c.opts,t,e,c.opts.specialEasing[t]||c.opts.easing);return c.tweens.push(n),n},stop:function(t){var e=0,n=t?c.tweens.length:0;if(s)return this;for(s=!0;e<n;e++)c.tweens[e].run(1);return t?(a.notifyWith(r,[c,1,0]),a.resolveWith(r,[c,t])):a.rejectWith(r,[c,t]),this}}),u=c.props;for(!function(t,e){var n,i,o,r,s;for(n in t)if(o=e[i=X(n)],r=t[n],Array.isArray(r)&&(o=r[1],r=t[n]=r[0]),n!==i&&(t[i]=r,delete t[n]),(s=k.cssHooks[i])&&"expand"in s)for(n in r=s.expand(r),delete t[i],r)n in t||(t[n]=r[n],e[n]=o);else e[i]=o}(u,c.opts.specialEasing);i<o;i++)if(n=Ce.prefilters[i].call(c,r,u,c.opts))return b(n.stop)&&(k._queueHooks(c.elem,c.opts.queue).stop=n.stop.bind(n)),n;return k.map(u,xe,c),b(c.opts.start)&&c.opts.start.call(r,c),c.progress(c.opts.progress).done(c.opts.done,c.opts.complete).fail(c.opts.fail).always(c.opts.always),k.fx.timer(k.extend(l,{elem:r,anim:c,queue:c.opts.queue})),c}k.Animation=k.extend(Ce,{tweeners:{"*":[function(t,e){var n=this.createTween(t,e);return ct(n.elem,t,nt.exec(e),n),n}]},tweener:function(t,e){for(var n,i=0,o=(t=b(t)?(e=t,["*"]):t.match(j)).length;i<o;i++)n=t[i],Ce.tweeners[n]=Ce.tweeners[n]||[],Ce.tweeners[n].unshift(e)},prefilters:[function(t,e,n){var i,o,r,s,a,l,c,u,d="width"in e||"height"in e,p=this,f={},h=t.style,g=t.nodeType&&lt(t),m=K.get(t,"fxshow");for(i in n.queue||(null==(s=k._queueHooks(t,"fx")).unqueued&&(s.unqueued=0,a=s.empty.fire,s.empty.fire=function(){s.unqueued||a()}),s.unqueued++,p.always(function(){p.always(function(){s.unqueued--,k.queue(t,"fx").length||s.empty.fire()})})),e)if(o=e[i],me.test(o)){if(delete e[i],r=r||"toggle"===o,o===(g?"hide":"show")){if("show"!==o||!m||void 0===m[i])continue;g=!0}f[i]=m&&m[i]||k.style(t,i)}if((l=!k.isEmptyObject(e))||!k.isEmptyObject(f))for(i in d&&1===t.nodeType&&(n.overflow=[h.overflow,h.overflowX,h.overflowY],null==(c=m&&m.display)&&(c=K.get(t,"display")),"none"===(u=k.css(t,"display"))&&(c?u=c:(dt([t],!0),c=t.style.display||c,u=k.css(t,"display"),dt([t]))),("inline"===u||"inline-block"===u&&null!=c)&&"none"===k.css(t,"float")&&(l||(p.done(function(){h.display=c}),null==c&&(u=h.display,c="none"===u?"":u)),h.display="inline-block")),n.overflow&&(h.overflow="hidden",p.always(function(){h.overflow=n.overflow[0],h.overflowX=n.overflow[1],h.overflowY=n.overflow[2]})),l=!1,f)l||(m?"hidden"in m&&(g=m.hidden):m=K.access(t,"fxshow",{display:c}),r&&(m.hidden=!g),g&&dt([t],!0),p.done(function(){for(i in g||dt([t]),K.remove(t,"fxshow"),f)k.style(t,i,f[i])})),l=xe(g?m[i]:0,i,p),i in m||(m[i]=l.start,g&&(l.end=l.start,l.start=0))}],prefilter:function(t,e){e?Ce.prefilters.unshift(t):Ce.prefilters.push(t)}}),k.speed=function(t,e,n){var i=t&&"object"==typeof t?k.extend({},t):{complete:n||!n&&e||b(t)&&t,duration:t,easing:n&&e||e&&!b(e)&&e};return k.fx.off?i.duration=0:"number"!=typeof i.duration&&(i.duration in k.fx.speeds?i.duration=k.fx.speeds[i.duration]:i.duration=k.fx.speeds._default),null!=i.queue&&!0!==i.queue||(i.queue="fx"),i.old=i.complete,i.complete=function(){b(i.old)&&i.old.call(this),i.queue&&k.dequeue(this,i.queue)},i},k.fn.extend({fadeTo:function(t,e,n,i){return this.filter(lt).css("opacity",0).show().end().animate({opacity:e},t,n,i)},animate:function(e,t,n,i){function o(){var t=Ce(this,k.extend({},e),s);(r||K.get(this,"finish"))&&t.stop(!0)}var r=k.isEmptyObject(e),s=k.speed(t,n,i);return o.finish=o,r||!1===s.queue?this.each(o):this.queue(s.queue,o)},stop:function(o,t,r){function s(t){var e=t.stop;delete t.stop,e(r)}return"string"!=typeof o&&(r=t,t=o,o=void 0),t&&!1!==o&&this.queue(o||"fx",[]),this.each(function(){var t=!0,e=null!=o&&o+"queueHooks",n=k.timers,i=K.get(this);if(e)i[e]&&i[e].stop&&s(i[e]);else for(e in i)i[e]&&i[e].stop&&ye.test(e)&&s(i[e]);for(e=n.length;e--;)n[e].elem!==this||null!=o&&n[e].queue!==o||(n[e].anim.stop(r),t=!1,n.splice(e,1));!t&&r||k.dequeue(this,o)})},finish:function(s){return!1!==s&&(s=s||"fx"),this.each(function(){var t,e=K.get(this),n=e[s+"queue"],i=e[s+"queueHooks"],o=k.timers,r=n?n.length:0;for(e.finish=!0,k.queue(this,s,[]),i&&i.stop&&i.stop.call(this,!0),t=o.length;t--;)o[t].elem===this&&o[t].queue===s&&(o[t].anim.stop(!0),o.splice(t,1));for(t=0;t<r;t++)n[t]&&n[t].finish&&n[t].finish.call(this);delete e.finish})}}),k.each(["toggle","show","hide"],function(t,i){var o=k.fn[i];k.fn[i]=function(t,e,n){return null==t||"boolean"==typeof t?o.apply(this,arguments):this.animate(we(i,!0),t,e,n)}}),k.each({slideDown:we("show"),slideUp:we("hide"),slideToggle:we("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(t,i){k.fn[t]=function(t,e,n){return this.animate(i,t,e,n)}}),k.timers=[],k.fx.tick=function(){var t,e=0,n=k.timers;for(pe=Date.now();e<n.length;e++)(t=n[e])()||n[e]!==t||n.splice(e--,1);n.length||k.fx.stop(),pe=void 0},k.fx.timer=function(t){k.timers.push(t),k.fx.start()},k.fx.interval=13,k.fx.start=function(){fe||(fe=!0,ve())},k.fx.stop=function(){fe=null},k.fx.speeds={slow:600,fast:200,_default:400},k.fn.delay=function(i,t){return i=k.fx&&k.fx.speeds[i]||i,t=t||"fx",this.queue(t,function(t,e){var n=S.setTimeout(t,i);e.stop=function(){S.clearTimeout(n)}})},he=T.createElement("input"),ge=T.createElement("select").appendChild(T.createElement("option")),he.type="checkbox",v.checkOn=""!==he.value,v.optSelected=ge.selected,(he=T.createElement("input")).value="t",he.type="radio",v.radioValue="t"===he.value;var Se,Te=k.expr.attrHandle;k.fn.extend({attr:function(t,e){return W(this,k.attr,t,e,1<arguments.length)},removeAttr:function(t){return this.each(function(){k.removeAttr(this,t)})}}),k.extend({attr:function(t,e,n){var i,o,r=t.nodeType;if(3!==r&&8!==r&&2!==r)return void 0===t.getAttribute?k.prop(t,e,n):(1===r&&k.isXMLDoc(t)||(o=k.attrHooks[e.toLowerCase()]||(k.expr.match.bool.test(e)?Se:void 0)),void 0!==n?null===n?void k.removeAttr(t,e):o&&"set"in o&&void 0!==(i=o.set(t,n,e))?i:(t.setAttribute(e,n+""),n):!(o&&"get"in o&&null!==(i=o.get(t,e)))&&null==(i=k.find.attr(t,e))?void 0:i)},attrHooks:{type:{set:function(t,e){if(!v.radioValue&&"radio"===e&&D(t,"input")){var n=t.value;return t.setAttribute("type",e),n&&(t.value=n),e}}}},removeAttr:function(t,e){var n,i=0,o=e&&e.match(j);if(o&&1===t.nodeType)for(;n=o[i++];)t.removeAttribute(n)}}),Se={set:function(t,e,n){return!1===e?k.removeAttr(t,n):t.setAttribute(n,n),n}},k.each(k.expr.match.bool.source.match(/\w+/g),function(t,e){var s=Te[e]||k.find.attr;Te[e]=function(t,e,n){var i,o,r=e.toLowerCase();return n||(o=Te[r],Te[r]=i,i=null!=s(t,e,n)?r:null,Te[r]=o),i}});var ke=/^(?:input|select|textarea|button)$/i,Ae=/^(?:a|area)$/i;function Ee(t){return(t.match(j)||[]).join(" ")}function De(t){return t.getAttribute&&t.getAttribute("class")||""}function Oe(t){return Array.isArray(t)?t:"string"==typeof t&&t.match(j)||[]}k.fn.extend({prop:function(t,e){return W(this,k.prop,t,e,1<arguments.length)},removeProp:function(t){return this.each(function(){delete this[k.propFix[t]||t]})}}),k.extend({prop:function(t,e,n){var i,o,r=t.nodeType;if(3!==r&&8!==r&&2!==r)return 1===r&&k.isXMLDoc(t)||(e=k.propFix[e]||e,o=k.propHooks[e]),void 0!==n?o&&"set"in o&&void 0!==(i=o.set(t,n,e))?i:t[e]=n:o&&"get"in o&&null!==(i=o.get(t,e))?i:t[e]},propHooks:{tabIndex:{get:function(t){var e=k.find.attr(t,"tabindex");return e?parseInt(e,10):ke.test(t.nodeName)||Ae.test(t.nodeName)&&t.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),v.optSelected||(k.propHooks.selected={get:function(t){var e=t.parentNode;return e&&e.parentNode&&e.parentNode.selectedIndex,null},set:function(t){var e=t.parentNode;e&&(e.selectedIndex,e.parentNode&&e.parentNode.selectedIndex)}}),k.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){k.propFix[this.toLowerCase()]=this}),k.fn.extend({addClass:function(e){var t,n,i,o,r,s,a,l=0;if(b(e))return this.each(function(t){k(this).addClass(e.call(this,t,De(this)))});if((t=Oe(e)).length)for(;n=this[l++];)if(o=De(n),i=1===n.nodeType&&" "+Ee(o)+" "){for(s=0;r=t[s++];)i.indexOf(" "+r+" ")<0&&(i+=r+" ");o!==(a=Ee(i))&&n.setAttribute("class",a)}return this},removeClass:function(e){var t,n,i,o,r,s,a,l=0;if(b(e))return this.each(function(t){k(this).removeClass(e.call(this,t,De(this)))});if(!arguments.length)return this.attr("class","");if((t=Oe(e)).length)for(;n=this[l++];)if(o=De(n),i=1===n.nodeType&&" "+Ee(o)+" "){for(s=0;r=t[s++];)for(;-1<i.indexOf(" "+r+" ");)i=i.replace(" "+r+" "," ");o!==(a=Ee(i))&&n.setAttribute("class",a)}return this},toggleClass:function(o,e){var r=typeof o,s="string"==r||Array.isArray(o);return"boolean"==typeof e&&s?e?this.addClass(o):this.removeClass(o):b(o)?this.each(function(t){k(this).toggleClass(o.call(this,t,De(this),e),e)}):this.each(function(){var t,e,n,i;if(s)for(e=0,n=k(this),i=Oe(o);t=i[e++];)n.hasClass(t)?n.removeClass(t):n.addClass(t);else void 0!==o&&"boolean"!=r||((t=De(this))&&K.set(this,"__className__",t),this.setAttribute&&this.setAttribute("class",!t&&!1!==o&&K.get(this,"__className__")||""))})},hasClass:function(t){var e,n,i=0;for(e=" "+t+" ";n=this[i++];)if(1===n.nodeType&&-1<(" "+Ee(De(n))+" ").indexOf(e))return!0;return!1}});var Ie=/\r/g;k.fn.extend({val:function(n){var i,t,o,e=this[0];return arguments.length?(o=b(n),this.each(function(t){var e;1===this.nodeType&&(null==(e=o?n.call(this,t,k(this).val()):n)?e="":"number"==typeof e?e+="":Array.isArray(e)&&(e=k.map(e,function(t){return null==t?"":t+""})),(i=k.valHooks[this.type]||k.valHooks[this.nodeName.toLowerCase()])&&"set"in i&&void 0!==i.set(this,e,"value")||(this.value=e))})):e?(i=k.valHooks[e.type]||k.valHooks[e.nodeName.toLowerCase()])&&"get"in i&&void 0!==(t=i.get(e,"value"))?t:"string"==typeof(t=e.value)?t.replace(Ie,""):null==t?"":t:void 0}}),k.extend({valHooks:{option:{get:function(t){var e=k.find.attr(t,"value");return null!=e?e:Ee(k.text(t))}},select:{get:function(t){var e,n,i,o=t.options,r=t.selectedIndex,s="select-one"===t.type,a=s?null:[],l=s?r+1:o.length;for(i=r<0?l:s?r:0;i<l;i++)if(((n=o[i]).selected||i===r)&&!n.disabled&&(!n.parentNode.disabled||!D(n.parentNode,"optgroup"))){if(e=k(n).val(),s)return e;a.push(e)}return a},set:function(t,e){for(var n,i,o=t.options,r=k.makeArray(e),s=o.length;s--;)((i=o[s]).selected=-1<k.inArray(k.valHooks.option.get(i),r))&&(n=!0);return n||(t.selectedIndex=-1),r}}}}),k.each(["radio","checkbox"],function(){k.valHooks[this]={set:function(t,e){if(Array.isArray(e))return t.checked=-1<k.inArray(k(t).val(),e)}},v.checkOn||(k.valHooks[this].get=function(t){return null===t.getAttribute("value")?"on":t.value})}),v.focusin="onfocusin"in S;function Ne(t){t.stopPropagation()}var Pe=/^(?:focusinfocus|focusoutblur)$/;k.extend(k.event,{trigger:function(t,e,n,i){var o,r,s,a,l,c,u,d,p=[n||T],f=y.call(t,"type")?t.type:t,h=y.call(t,"namespace")?t.namespace.split("."):[];if(r=d=s=n=n||T,3!==n.nodeType&&8!==n.nodeType&&!Pe.test(f+k.event.triggered)&&(-1<f.indexOf(".")&&(f=(h=f.split(".")).shift(),h.sort()),l=f.indexOf(":")<0&&"on"+f,(t=t[k.expando]?t:new k.Event(f,"object"==typeof t&&t)).isTrigger=i?2:3,t.namespace=h.join("."),t.rnamespace=t.namespace?new RegExp("(^|\\.)"+h.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,t.result=void 0,t.target||(t.target=n),e=null==e?[t]:k.makeArray(e,[t]),u=k.event.special[f]||{},i||!u.trigger||!1!==u.trigger.apply(n,e))){if(!i&&!u.noBubble&&!g(n)){for(a=u.delegateType||f,Pe.test(a+f)||(r=r.parentNode);r;r=r.parentNode)p.push(r),s=r;s===(n.ownerDocument||T)&&p.push(s.defaultView||s.parentWindow||S)}for(o=0;(r=p[o++])&&!t.isPropagationStopped();)d=r,t.type=1<o?a:u.bindType||f,(c=(K.get(r,"events")||{})[t.type]&&K.get(r,"handle"))&&c.apply(r,e),(c=l&&r[l])&&c.apply&&V(r)&&(t.result=c.apply(r,e),!1===t.result&&t.preventDefault());return t.type=f,i||t.isDefaultPrevented()||u._default&&!1!==u._default.apply(p.pop(),e)||!V(n)||l&&b(n[f])&&!g(n)&&((s=n[l])&&(n[l]=null),k.event.triggered=f,t.isPropagationStopped()&&d.addEventListener(f,Ne),n[f](),t.isPropagationStopped()&&d.removeEventListener(f,Ne),k.event.triggered=void 0,s&&(n[l]=s)),t.result}},simulate:function(t,e,n){var i=k.extend(new k.Event,n,{type:t,isSimulated:!0});k.event.trigger(i,null,e)}}),k.fn.extend({trigger:function(t,e){return this.each(function(){k.event.trigger(t,e,this)})},triggerHandler:function(t,e){var n=this[0];if(n)return k.event.trigger(t,e,n,!0)}}),v.focusin||k.each({focus:"focusin",blur:"focusout"},function(n,i){function o(t){k.event.simulate(i,t.target,k.event.fix(t))}k.event.special[i]={setup:function(){var t=this.ownerDocument||this,e=K.access(t,i);e||t.addEventListener(n,o,!0),K.access(t,i,(e||0)+1)},teardown:function(){var t=this.ownerDocument||this,e=K.access(t,i)-1;e?K.access(t,i,e):(t.removeEventListener(n,o,!0),K.remove(t,i))}}});var Re=S.location,$e=Date.now(),Me=/\?/;k.parseXML=function(t){var e;if(!t||"string"!=typeof t)return null;try{e=(new S.DOMParser).parseFromString(t,"text/xml")}catch(t){e=void 0}return e&&!e.getElementsByTagName("parsererror").length||k.error("Invalid XML: "+t),e};var je=/\[\]$/,Fe=/\r?\n/g,Le=/^(?:submit|button|image|reset|file)$/i,Be=/^(?:input|select|textarea|keygen)/i;function He(n,t,i,o){var e;if(Array.isArray(t))k.each(t,function(t,e){i||je.test(n)?o(n,e):He(n+"["+("object"==typeof e&&null!=e?t:"")+"]",e,i,o)});else if(i||"object"!==x(t))o(n,t);else for(e in t)He(n+"["+e+"]",t[e],i,o)}k.param=function(t,e){function n(t,e){var n=b(e)?e():e;o[o.length]=encodeURIComponent(t)+"="+encodeURIComponent(null==n?"":n)}var i,o=[];if(null==t)return"";if(Array.isArray(t)||t.jquery&&!k.isPlainObject(t))k.each(t,function(){n(this.name,this.value)});else for(i in t)He(i,t[i],e,n);return o.join("&")},k.fn.extend({serialize:function(){return k.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var t=k.prop(this,"elements");return t?k.makeArray(t):this}).filter(function(){var t=this.type;return this.name&&!k(this).is(":disabled")&&Be.test(this.nodeName)&&!Le.test(t)&&(this.checked||!pt.test(t))}).map(function(t,e){var n=k(this).val();return null==n?null:Array.isArray(n)?k.map(n,function(t){return{name:e.name,value:t.replace(Fe,"\r\n")}}):{name:e.name,value:n.replace(Fe,"\r\n")}}).get()}});var qe=/%20/g,ze=/#.*$/,We=/([?&])_=[^&]*/,_e=/^(.*?):[ \t]*([^\r\n]*)$/gm,Ue=/^(?:GET|HEAD)$/,Ge=/^\/\//,Xe={},Ve={},Ye="*/".concat("*"),Ke=T.createElement("a");function Qe(r){return function(t,e){"string"!=typeof t&&(e=t,t="*");var n,i=0,o=t.toLowerCase().match(j)||[];if(b(e))for(;n=o[i++];)"+"===n[0]?(n=n.slice(1)||"*",(r[n]=r[n]||[]).unshift(e)):(r[n]=r[n]||[]).push(e)}}function Ze(e,o,r,s){var a={},l=e===Ve;function c(t){var i;return a[t]=!0,k.each(e[t]||[],function(t,e){var n=e(o,r,s);return"string"!=typeof n||l||a[n]?l?!(i=n):void 0:(o.dataTypes.unshift(n),c(n),!1)}),i}return c(o.dataTypes[0])||!a["*"]&&c("*")}function Je(t,e){var n,i,o=k.ajaxSettings.flatOptions||{};for(n in e)void 0!==e[n]&&((o[n]?t:i=i||{})[n]=e[n]);return i&&k.extend(!0,t,i),t}Ke.href=Re.href,k.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:Re.href,type:"GET",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(Re.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Ye,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":k.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(t,e){return e?Je(Je(t,k.ajaxSettings),e):Je(k.ajaxSettings,t)},ajaxPrefilter:Qe(Xe),ajaxTransport:Qe(Ve),ajax:function(t,e){"object"==typeof t&&(e=t,t=void 0),e=e||{};var u,d,p,n,f,i,h,g,o,r,m=k.ajaxSetup({},e),y=m.context||m,v=m.context&&(y.nodeType||y.jquery)?k(y):k.event,b=k.Deferred(),w=k.Callbacks("once memory"),x=m.statusCode||{},s={},a={},l="canceled",C={readyState:0,getResponseHeader:function(t){var e;if(h){if(!n)for(n={};e=_e.exec(p);)n[e[1].toLowerCase()+" "]=(n[e[1].toLowerCase()+" "]||[]).concat(e[2]);e=n[t.toLowerCase()+" "]}return null==e?null:e.join(", ")},getAllResponseHeaders:function(){return h?p:null},setRequestHeader:function(t,e){return null==h&&(t=a[t.toLowerCase()]=a[t.toLowerCase()]||t,s[t]=e),this},overrideMimeType:function(t){return null==h&&(m.mimeType=t),this},statusCode:function(t){var e;if(t)if(h)C.always(t[C.status]);else for(e in t)x[e]=[x[e],t[e]];return this},abort:function(t){var e=t||l;return u&&u.abort(e),c(0,e),this}};if(b.promise(C),m.url=((t||m.url||Re.href)+"").replace(Ge,Re.protocol+"//"),m.type=e.method||e.type||m.method||m.type,m.dataTypes=(m.dataType||"*").toLowerCase().match(j)||[""],null==m.crossDomain){i=T.createElement("a");try{i.href=m.url,i.href=i.href,m.crossDomain=Ke.protocol+"//"+Ke.host!=i.protocol+"//"+i.host}catch(t){m.crossDomain=!0}}if(m.data&&m.processData&&"string"!=typeof m.data&&(m.data=k.param(m.data,m.traditional)),Ze(Xe,m,e,C),h)return C;for(o in(g=k.event&&m.global)&&0==k.active++&&k.event.trigger("ajaxStart"),m.type=m.type.toUpperCase(),m.hasContent=!Ue.test(m.type),d=m.url.replace(ze,""),m.hasContent?m.data&&m.processData&&0===(m.contentType||"").indexOf("application/x-www-form-urlencoded")&&(m.data=m.data.replace(qe,"+")):(r=m.url.slice(d.length),m.data&&(m.processData||"string"==typeof m.data)&&(d+=(Me.test(d)?"&":"?")+m.data,delete m.data),!1===m.cache&&(d=d.replace(We,"$1"),r=(Me.test(d)?"&":"?")+"_="+$e+++r),m.url=d+r),m.ifModified&&(k.lastModified[d]&&C.setRequestHeader("If-Modified-Since",k.lastModified[d]),k.etag[d]&&C.setRequestHeader("If-None-Match",k.etag[d])),(m.data&&m.hasContent&&!1!==m.contentType||e.contentType)&&C.setRequestHeader("Content-Type",m.contentType),C.setRequestHeader("Accept",m.dataTypes[0]&&m.accepts[m.dataTypes[0]]?m.accepts[m.dataTypes[0]]+("*"!==m.dataTypes[0]?", "+Ye+"; q=0.01":""):m.accepts["*"]),m.headers)C.setRequestHeader(o,m.headers[o]);if(m.beforeSend&&(!1===m.beforeSend.call(y,C,m)||h))return C.abort();if(l="abort",w.add(m.complete),C.done(m.success),C.fail(m.error),u=Ze(Ve,m,e,C)){if(C.readyState=1,g&&v.trigger("ajaxSend",[C,m]),h)return C;m.async&&0<m.timeout&&(f=S.setTimeout(function(){C.abort("timeout")},m.timeout));try{h=!1,u.send(s,c)}catch(t){if(h)throw t;c(-1,t)}}else c(-1,"No Transport");function c(t,e,n,i){var o,r,s,a,l,c=e;h||(h=!0,f&&S.clearTimeout(f),u=void 0,p=i||"",C.readyState=0<t?4:0,o=200<=t&&t<300||304===t,n&&(a=function(t,e,n){for(var i,o,r,s,a=t.contents,l=t.dataTypes;"*"===l[0];)l.shift(),void 0===i&&(i=t.mimeType||e.getResponseHeader("Content-Type"));if(i)for(o in a)if(a[o]&&a[o].test(i)){l.unshift(o);break}if(l[0]in n)r=l[0];else{for(o in n){if(!l[0]||t.converters[o+" "+l[0]]){r=o;break}s=s||o}r=r||s}if(r)return r!==l[0]&&l.unshift(r),n[r]}(m,C,n)),a=function(t,e,n,i){var o,r,s,a,l,c={},u=t.dataTypes.slice();if(u[1])for(s in t.converters)c[s.toLowerCase()]=t.converters[s];for(r=u.shift();r;)if(t.responseFields[r]&&(n[t.responseFields[r]]=e),!l&&i&&t.dataFilter&&(e=t.dataFilter(e,t.dataType)),l=r,r=u.shift())if("*"===r)r=l;else if("*"!==l&&l!==r){if(!(s=c[l+" "+r]||c["* "+r]))for(o in c)if((a=o.split(" "))[1]===r&&(s=c[l+" "+a[0]]||c["* "+a[0]])){!0===s?s=c[o]:!0!==c[o]&&(r=a[0],u.unshift(a[1]));break}if(!0!==s)if(s&&t.throws)e=s(e);else try{e=s(e)}catch(t){return{state:"parsererror",error:s?t:"No conversion from "+l+" to "+r}}}return{state:"success",data:e}}(m,a,C,o),o?(m.ifModified&&((l=C.getResponseHeader("Last-Modified"))&&(k.lastModified[d]=l),(l=C.getResponseHeader("etag"))&&(k.etag[d]=l)),204===t||"HEAD"===m.type?c="nocontent":304===t?c="notmodified":(c=a.state,r=a.data,o=!(s=a.error))):(s=c,!t&&c||(c="error",t<0&&(t=0))),C.status=t,C.statusText=(e||c)+"",o?b.resolveWith(y,[r,c,C]):b.rejectWith(y,[C,c,s]),C.statusCode(x),x=void 0,g&&v.trigger(o?"ajaxSuccess":"ajaxError",[C,m,o?r:s]),w.fireWith(y,[C,c]),g&&(v.trigger("ajaxComplete",[C,m]),--k.active||k.event.trigger("ajaxStop")))}return C},getJSON:function(t,e,n){return k.get(t,e,n,"json")},getScript:function(t,e){return k.get(t,void 0,e,"script")}}),k.each(["get","post"],function(t,o){k[o]=function(t,e,n,i){return b(e)&&(i=i||n,n=e,e=void 0),k.ajax(k.extend({url:t,type:o,dataType:i,data:e,success:n},k.isPlainObject(t)&&t))}}),k._evalUrl=function(t,e){return k.ajax({url:t,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,converters:{"text script":function(){}},dataFilter:function(t){k.globalEval(t,e)}})},k.fn.extend({wrapAll:function(t){var e;return this[0]&&(b(t)&&(t=t.call(this[0])),e=k(t,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&e.insertBefore(this[0]),e.map(function(){for(var t=this;t.firstElementChild;)t=t.firstElementChild;return t}).append(this)),this},wrapInner:function(n){return b(n)?this.each(function(t){k(this).wrapInner(n.call(this,t))}):this.each(function(){var t=k(this),e=t.contents();e.length?e.wrapAll(n):t.append(n)})},wrap:function(e){var n=b(e);return this.each(function(t){k(this).wrapAll(n?e.call(this,t):e)})},unwrap:function(t){return this.parent(t).not("body").each(function(){k(this).replaceWith(this.childNodes)}),this}}),k.expr.pseudos.hidden=function(t){return!k.expr.pseudos.visible(t)},k.expr.pseudos.visible=function(t){return!!(t.offsetWidth||t.offsetHeight||t.getClientRects().length)},k.ajaxSettings.xhr=function(){try{return new S.XMLHttpRequest}catch(t){}};var tn={0:200,1223:204},en=k.ajaxSettings.xhr();v.cors=!!en&&"withCredentials"in en,v.ajax=en=!!en,k.ajaxTransport(function(o){var r,s;if(v.cors||en&&!o.crossDomain)return{send:function(t,e){var n,i=o.xhr();if(i.open(o.type,o.url,o.async,o.username,o.password),o.xhrFields)for(n in o.xhrFields)i[n]=o.xhrFields[n];for(n in o.mimeType&&i.overrideMimeType&&i.overrideMimeType(o.mimeType),o.crossDomain||t["X-Requested-With"]||(t["X-Requested-With"]="XMLHttpRequest"),t)i.setRequestHeader(n,t[n]);r=function(t){return function(){r&&(r=s=i.onload=i.onerror=i.onabort=i.ontimeout=i.onreadystatechange=null,"abort"===t?i.abort():"error"===t?"number"!=typeof i.status?e(0,"error"):e(i.status,i.statusText):e(tn[i.status]||i.status,i.statusText,"text"!==(i.responseType||"text")||"string"!=typeof i.responseText?{binary:i.response}:{text:i.responseText},i.getAllResponseHeaders()))}},i.onload=r(),s=i.onerror=i.ontimeout=r("error"),void 0!==i.onabort?i.onabort=s:i.onreadystatechange=function(){4===i.readyState&&S.setTimeout(function(){r&&s()})},r=r("abort");try{i.send(o.hasContent&&o.data||null)}catch(t){if(r)throw t}},abort:function(){r&&r()}}}),k.ajaxPrefilter(function(t){t.crossDomain&&(t.contents.script=!1)}),k.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(t){return k.globalEval(t),t}}}),k.ajaxPrefilter("script",function(t){void 0===t.cache&&(t.cache=!1),t.crossDomain&&(t.type="GET")}),k.ajaxTransport("script",function(n){var i,o;if(n.crossDomain||n.scriptAttrs)return{send:function(t,e){i=k("<script>").attr(n.scriptAttrs||{}).prop({charset:n.scriptCharset,src:n.url}).on("load error",o=function(t){i.remove(),o=null,t&&e("error"===t.type?404:200,t.type)}),T.head.appendChild(i[0])},abort:function(){o&&o()}}});var nn,on=[],rn=/(=)\?(?=&|$)|\?\?/;k.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var t=on.pop()||k.expando+"_"+$e++;return this[t]=!0,t}}),k.ajaxPrefilter("json jsonp",function(t,e,n){var i,o,r,s=!1!==t.jsonp&&(rn.test(t.url)?"url":"string"==typeof t.data&&0===(t.contentType||"").indexOf("application/x-www-form-urlencoded")&&rn.test(t.data)&&"data");if(s||"jsonp"===t.dataTypes[0])return i=t.jsonpCallback=b(t.jsonpCallback)?t.jsonpCallback():t.jsonpCallback,s?t[s]=t[s].replace(rn,"$1"+i):!1!==t.jsonp&&(t.url+=(Me.test(t.url)?"&":"?")+t.jsonp+"="+i),t.converters["script json"]=function(){return r||k.error(i+" was not called"),r[0]},t.dataTypes[0]="json",o=S[i],S[i]=function(){r=arguments},n.always(function(){void 0===o?k(S).removeProp(i):S[i]=o,t[i]&&(t.jsonpCallback=e.jsonpCallback,on.push(i)),r&&b(o)&&o(r[0]),r=o=void 0}),"script"}),v.createHTMLDocument=((nn=T.implementation.createHTMLDocument("").body).innerHTML="<form></form><form></form>",2===nn.childNodes.length),k.parseHTML=function(t,e,n){return"string"!=typeof t?[]:("boolean"==typeof e&&(n=e,e=!1),e||(v.createHTMLDocument?((i=(e=T.implementation.createHTMLDocument("")).createElement("base")).href=T.location.href,e.head.appendChild(i)):e=T),r=!n&&[],(o=O.exec(t))?[e.createElement(o[1])]:(o=xt([t],e,r),r&&r.length&&k(r).remove(),k.merge([],o.childNodes)));var i,o,r},k.fn.load=function(t,e,n){var i,o,r,s=this,a=t.indexOf(" ");return-1<a&&(i=Ee(t.slice(a)),t=t.slice(0,a)),b(e)?(n=e,e=void 0):e&&"object"==typeof e&&(o="POST"),0<s.length&&k.ajax({url:t,type:o||"GET",dataType:"html",data:e}).done(function(t){r=arguments,s.html(i?k("<div>").append(k.parseHTML(t)).find(i):t)}).always(n&&function(t,e){s.each(function(){n.apply(this,r||[t.responseText,e,t])})}),this},k.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(t,e){k.fn[e]=function(t){return this.on(e,t)}}),k.expr.pseudos.animated=function(e){return k.grep(k.timers,function(t){return e===t.elem}).length},k.offset={setOffset:function(t,e,n){var i,o,r,s,a,l,c=k.css(t,"position"),u=k(t),d={};"static"===c&&(t.style.position="relative"),a=u.offset(),r=k.css(t,"top"),l=k.css(t,"left"),o=("absolute"===c||"fixed"===c)&&-1<(r+l).indexOf("auto")?(s=(i=u.position()).top,i.left):(s=parseFloat(r)||0,parseFloat(l)||0),b(e)&&(e=e.call(t,n,k.extend({},a))),null!=e.top&&(d.top=e.top-a.top+s),null!=e.left&&(d.left=e.left-a.left+o),"using"in e?e.using.call(t,d):u.css(d)}},k.fn.extend({offset:function(e){if(arguments.length)return void 0===e?this:this.each(function(t){k.offset.setOffset(this,e,t)});var t,n,i=this[0];return i?i.getClientRects().length?(t=i.getBoundingClientRect(),n=i.ownerDocument.defaultView,{top:t.top+n.pageYOffset,left:t.left+n.pageXOffset}):{top:0,left:0}:void 0},position:function(){if(this[0]){var t,e,n,i=this[0],o={top:0,left:0};if("fixed"===k.css(i,"position"))e=i.getBoundingClientRect();else{for(e=this.offset(),n=i.ownerDocument,t=i.offsetParent||n.documentElement;t&&(t===n.body||t===n.documentElement)&&"static"===k.css(t,"position");)t=t.parentNode;t&&t!==i&&1===t.nodeType&&((o=k(t).offset()).top+=k.css(t,"borderTopWidth",!0),o.left+=k.css(t,"borderLeftWidth",!0))}return{top:e.top-o.top-k.css(i,"marginTop",!0),left:e.left-o.left-k.css(i,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var t=this.offsetParent;t&&"static"===k.css(t,"position");)t=t.offsetParent;return t||ot})}}),k.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(e,o){var r="pageYOffset"===o;k.fn[e]=function(t){return W(this,function(t,e,n){var i;if(g(t)?i=t:9===t.nodeType&&(i=t.defaultView),void 0===n)return i?i[o]:t[e];i?i.scrollTo(r?i.pageXOffset:n,r?n:i.pageYOffset):t[e]=n},e,t,arguments.length)}}),k.each(["top","left"],function(t,n){k.cssHooks[n]=Jt(v.pixelPosition,function(t,e){if(e)return e=Zt(t,n),Xt.test(e)?k(t).position()[n]+"px":e})}),k.each({Height:"height",Width:"width"},function(s,a){k.each({padding:"inner"+s,content:a,"":"outer"+s},function(i,r){k.fn[r]=function(t,e){var n=arguments.length&&(i||"boolean"!=typeof t),o=i||(!0===t||!0===e?"margin":"border");return W(this,function(t,e,n){var i;return g(t)?0===r.indexOf("outer")?t["inner"+s]:t.document.documentElement["client"+s]:9===t.nodeType?(i=t.documentElement,Math.max(t.body["scroll"+s],i["scroll"+s],t.body["offset"+s],i["offset"+s],i["client"+s])):void 0===n?k.css(t,e,o):k.style(t,e,n,o)},a,n?t:void 0,n)}})}),k.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),function(t,n){k.fn[n]=function(t,e){return 0<arguments.length?this.on(n,null,t,e):this.trigger(n)}}),k.fn.extend({hover:function(t,e){return this.mouseenter(t).mouseleave(e||t)}}),k.fn.extend({bind:function(t,e,n){return this.on(t,null,e,n)},unbind:function(t,e){return this.off(t,null,e)},delegate:function(t,e,n,i){return this.on(e,t,n,i)},undelegate:function(t,e,n){return 1===arguments.length?this.off(t,"**"):this.off(e,t||"**",n)}}),k.proxy=function(t,e){var n,i,o;if("string"==typeof e&&(n=t[e],e=t,t=n),b(t))return i=a.call(arguments,2),(o=function(){return t.apply(e||this,i.concat(a.call(arguments)))}).guid=t.guid=t.guid||k.guid++,o},k.holdReady=function(t){t?k.readyWait++:k.ready(!0)},k.isArray=Array.isArray,k.parseJSON=JSON.parse,k.nodeName=D,k.isFunction=b,k.isWindow=g,k.camelCase=X,k.type=x,k.now=Date.now,k.isNumeric=function(t){var e=k.type(t);return("number"===e||"string"===e)&&!isNaN(t-parseFloat(t))},"function"==typeof define&&define.amd&&define("jquery",[],function(){return k});var sn=S.jQuery,an=S.$;return k.noConflict=function(t){return S.$===k&&(S.$=an),t&&S.jQuery===k&&(S.jQuery=sn),k},t||(S.jQuery=S.$=k),k}),function(z){"use strict";var W='<?xml version="1.0" encoding="utf-8"?><svg version="1.1"xmlns="http://www.w3.org/2000/svg"viewBox="0 12.705 512 486.59"x="0px" y="0px"xml:space="preserve"><polygon points="256.814,12.705 317.205,198.566 512.631,198.566 354.529,313.435 414.918,499.295 256.814,384.427 98.713,499.295 159.102,313.435 1,198.566 196.426,198.566 "/></svg>',i={starWidth:"32px",normalFill:"gray",ratedFill:"#f39c12",numStars:5,maxValue:5,precision:1,rating:0,fullStar:!1,halfStar:!1,readOnly:!1,spacing:"0px",rtl:!1,multiColor:null,onInit:null,onChange:null,onSet:null,starSvg:null},_={startColor:"#c0392b",endColor:"#f1c40f"};function U(t,e,n){return t===e?t=e:t===n&&(t=n),t}function G(t){return void 0!==t}var n=/^#([0-9a-f]{2})([0-9a-f]{2})([0-9a-f]{2})$/i,X=function(t){if(!n.test(t))return null;var e=n.exec(t);return{r:parseInt(e[1],16),g:parseInt(e[2],16),b:parseInt(e[3],16)}};function V(t,e,n){var i=n/100*(e-t);return 1===(i=Math.round(t+i).toString(16)).length&&(i="0"+i),i}function Y(r,f){this.node=r.get(0);var n=this;r.empty().addClass("jq-ry-container");var h,i,g,m,y,t,e=z("<div/>").addClass("jq-ry-group-wrapper").appendTo(r),v=z("<div/>").addClass("jq-ry-normal-group").addClass("jq-ry-group").appendTo(e),o=z("<div/>").addClass("jq-ry-rated-group").addClass("jq-ry-group").appendTo(e),b=0,s=f.rating,a=!1;function l(t){G(t)||(t=f.rating);var e=(s=t)/h,n=e*g;1<e&&(n+=(Math.ceil(e)-1)*y),x(f.ratedFill),(n=f.rtl?100-n:n)<0?n=0:100<n&&(n=100),o.css("width",n+"%")}function c(){t=i*f.numStars+m*(f.numStars-1),g=i/t*100,y=m/t*100,r.width(t),l()}function u(t){var e=f.starWidth=t;return i=window.parseFloat(f.starWidth.replace("px","")),v.find("svg").attr({width:f.starWidth,height:e}),o.find("svg").attr({width:f.starWidth,height:e}),c(),r}function d(t){return f.spacing=t,m=parseFloat(f.spacing.replace("px","")),v.find("svg:not(:first-child)").css({"margin-left":t}),o.find("svg:not(:first-child)").css({"margin-left":t}),c(),r}function p(t){return f.normalFill=t,(f.rtl?o:v).find("svg").attr({fill:f.normalFill}),r}var w=f.ratedFill;function x(t){if(f.multiColor){var e=(s-b)/f.maxValue*100,n=f.multiColor||{};t=function(t,e,n){if(!t||!e)return null;n=G(n)?n:0,t=X(t),e=X(e);var i=V(t.r,e.r,n),o=V(t.b,e.b,n);return"#"+i+V(t.g,e.g,n)+o}(n.startColor||_.startColor,n.endColor||_.endColor,e)}else w=t;return f.ratedFill=t,(f.rtl?v:o).find("svg").attr({fill:f.ratedFill}),r}function C(t){t=!!t,f.rtl=t,p(f.normalFill),l()}function S(t){x((f.multiColor=t)||w)}function T(t){f.numStars=t,h=f.maxValue/f.numStars,v.empty(),o.empty();for(var e=0;e<f.numStars;e++)v.append(z(f.starSvg||W)),o.append(z(f.starSvg||W));return u(f.starWidth),p(f.normalFill),d(f.spacing),l(),r}function k(t){return f.maxValue=t,h=f.maxValue/f.numStars,f.rating>t&&N(t),l(),r}function A(t){return f.precision=t,N(f.rating),r}function E(t){return f.halfStar=t,r}function D(t){return f.fullStar=t,r}function O(t){var e,n,i,o,r,s=v.offset().left,a=s+v.width(),l=f.maxValue,c=t.pageX,u=0;if(c<s)u=b;else if(a<c)u=l;else{var d=(c-s)/(a-s);if(0<m)for(var p=d*=100;0<p;)g<p?(u+=h,p-=g+y):(u+=p/g*h,p=0);else u=d*f.maxValue;n=(e=u)%h,i=h/2,o=f.halfStar,((r=f.fullStar)||o)&&(r||o&&i<n?e+=h-n:(e-=n,0<n&&(e+=i))),u=e}return f.rtl&&(u=l-u),parseFloat(u)}function I(t){return f.readOnly=t,r.attr("readonly",!0),q(),t||(r.removeAttr("readonly"),r.on("mousemove",M).on("mouseenter",M).on("mouseleave",j).on("click",F).on("rateyo.init",L).on("rateyo.change",B).on("rateyo.set",H)),r}function N(t){var e=t,n=f.maxValue;return"string"==typeof e&&("%"===e[e.length-1]&&(e=e.substr(0,e.length-1),k(n=100)),e=parseFloat(e)),function(t,e,n){if(!(e<=t&&t<=n))throw Error("Invalid Rating, expected value between "+e+" and "+n)}(e,b,n),e=parseFloat(e.toFixed(f.precision)),U(parseFloat(e),b,n),f.rating=e,l(),a&&r.trigger("rateyo.set",{rating:e}),r}function P(t){return f.onInit=t,r}function R(t){return f.onSet=t,r}function $(t){return f.onChange=t,r}function M(t){var e=O(t).toFixed(f.precision),n=f.maxValue;l(e=U(parseFloat(e),b,n)),r.trigger("rateyo.change",{rating:e})}function j(){var t,e;e=!1,t=navigator.userAgent||navigator.vendor||window.opera,(/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino|android|ipad|playbook|silk/i.test(t)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(t.substr(0,4)))&&(e=!0),e||(l(),r.trigger("rateyo.change",{rating:f.rating}))}function F(t){var e=O(t).toFixed(f.precision);e=parseFloat(e),n.rating(e)}function L(t,e){f.onInit&&"function"==typeof f.onInit&&f.onInit.apply(this,[e.rating,n])}function B(t,e){f.onChange&&"function"==typeof f.onChange&&f.onChange.apply(this,[e.rating,n])}function H(t,e){f.onSet&&"function"==typeof f.onSet&&f.onSet.apply(this,[e.rating,n])}function q(){r.off("mousemove",M).off("mouseenter",M).off("mouseleave",j).off("click",F).off("rateyo.init",L).off("rateyo.change",B).off("rateyo.set",H)}this.rating=function(t){return G(t)?(N(t),r):f.rating},this.destroy=function(){var i,o;return f.readOnly||q(),Y.prototype.collection=(i=r.get(0),o=this.collection,z.each(o,function(t){if(i===this.node){var e=o.slice(0,t),n=o.slice(t+1,o.length);return o=e.concat(n),!1}}),o),r.removeClass("jq-ry-container").children().remove(),r},this.method=function(t){if(!t)throw Error("Method name not specified!");if(!G(this[t]))throw Error("Method "+t+" doesn't exist!");var e=Array.prototype.slice.apply(arguments,[]).slice(1);return this[t].apply(this,e)},this.option=function(t,e){if(!G(t))return f;var n;switch(t){case"starWidth":n=u;break;case"numStars":n=T;break;case"normalFill":n=p;break;case"ratedFill":n=x;break;case"multiColor":n=S;break;case"maxValue":n=k;break;case"precision":n=A;break;case"rating":n=N;break;case"halfStar":n=E;break;case"fullStar":n=D;break;case"readOnly":n=I;break;case"spacing":n=d;break;case"rtl":n=C;break;case"onInit":n=P;break;case"onSet":n=R;break;case"onChange":n=$;break;default:throw Error("No such option as "+t)}return G(e)?n(e):f[t]},T(f.numStars),I(f.readOnly),f.rtl&&C(f.rtl),this.collection.push(this),this.rating(f.rating,!0),a=!0,r.trigger("rateyo.init",{rating:f.rating})}function c(t,e){var n;return z.each(e,function(){if(t===this.node)return n=this,!1}),n}Y.prototype.collection=[],window.RateYo=Y,z.fn.rateYo=function(){return function(n){var r=Y.prototype.collection,t=z(this);if(0===t.length)return t;var e=Array.prototype.slice.apply(arguments,[]);if(0===e.length)n=e[0]={};else{if(1!==e.length||"object"!=typeof e[0]){if(1<=e.length&&"string"==typeof e[0]){var s=e[0],a=e.slice(1),l=[];return z.each(t,function(t,e){var n=c(e,r);if(!n)throw Error("Trying to set options before even initialization");var i=n[s];if(!i)throw Error("Method "+s+" does not exist!");var o=i.apply(n,a);l.push(o)}),l=1===l.length?l[0]:l}throw Error("Invalid Arguments")}n=e[0]}return n=z.extend({},i,n),z.each(t,function(){var t=c(this,r);if(t)return t;var e=z(this),i={},o=z.extend({},n);return z.each(e.data(),function(t,e){if(0===t.indexOf("rateyo")){var n=t.replace(/^rateyo/,"");n=n[0].toLowerCase()+n.slice(1),i[n]=e,delete o[n]}}),new Y(z(this),z.extend({},i,o))})}.apply(this,Array.prototype.slice.apply(arguments,[]))}}(window.jQuery),function(t){"use strict";"function"==typeof define&&define.amd?define(["jquery"],t):"undefined"!=typeof exports?module.exports=t(require("jquery")):t(jQuery)}(function(c){"use strict";var o,s=window.Slick||{};o=0,(s=function(t,e){var n,i=this;i.defaults={accessibility:!0,adaptiveHeight:!1,appendArrows:c(t),appendDots:c(t),arrows:!0,asNavFor:null,prevArrow:'<button class="slick-prev" aria-label="Previous" type="button">Previous</button>',nextArrow:'<button class="slick-next" aria-label="Next" type="button">Next</button>',autoplay:!1,autoplaySpeed:3e3,centerMode:!1,centerPadding:"50px",cssEase:"ease",customPaging:function(t,e){return c('<button type="button" />').text(e+1)},dots:!1,dotsClass:"slick-dots",draggable:!0,easing:"linear",edgeFriction:.35,fade:!1,focusOnSelect:!1,focusOnChange:!1,infinite:!0,initialSlide:0,lazyLoad:"ondemand",mobileFirst:!1,pauseOnHover:!0,pauseOnFocus:!0,pauseOnDotsHover:!1,respondTo:"window",responsive:null,rows:1,rtl:!1,slide:"",slidesPerRow:1,slidesToShow:1,slidesToScroll:1,speed:500,swipe:!0,swipeToSlide:!1,touchMove:!0,touchThreshold:5,useCSS:!0,useTransform:!0,variableWidth:!1,vertical:!1,verticalSwiping:!1,waitForAnimate:!0,zIndex:1e3},i.initials={animating:!1,dragging:!1,autoPlayTimer:null,currentDirection:0,currentLeft:null,currentSlide:0,direction:1,$dots:null,listWidth:null,listHeight:null,loadIndex:0,$nextArrow:null,$prevArrow:null,scrolling:!1,slideCount:null,slideWidth:null,$slideTrack:null,$slides:null,sliding:!1,slideOffset:0,swipeLeft:null,swiping:!1,$list:null,touchObject:{},transformsEnabled:!1,unslicked:!1},c.extend(i,i.initials),i.activeBreakpoint=null,i.animType=null,i.animProp=null,i.breakpoints=[],i.breakpointSettings=[],i.cssTransitions=!1,i.focussed=!1,i.interrupted=!1,i.hidden="hidden",i.paused=!0,i.positionProp=null,i.respondTo=null,i.rowCount=1,i.shouldClick=!0,i.$slider=c(t),i.$slidesCache=null,i.transformType=null,i.transitionType=null,i.visibilityChange="visibilitychange",i.windowWidth=0,i.windowTimer=null,n=c(t).data("slick")||{},i.options=c.extend({},i.defaults,e,n),i.currentSlide=i.options.initialSlide,i.originalSettings=i.options,void 0!==document.mozHidden?(i.hidden="mozHidden",i.visibilityChange="mozvisibilitychange"):void 0!==document.webkitHidden&&(i.hidden="webkitHidden",i.visibilityChange="webkitvisibilitychange"),i.autoPlay=c.proxy(i.autoPlay,i),i.autoPlayClear=c.proxy(i.autoPlayClear,i),i.autoPlayIterator=c.proxy(i.autoPlayIterator,i),i.changeSlide=c.proxy(i.changeSlide,i),i.clickHandler=c.proxy(i.clickHandler,i),i.selectHandler=c.proxy(i.selectHandler,i),i.setPosition=c.proxy(i.setPosition,i),i.swipeHandler=c.proxy(i.swipeHandler,i),i.dragHandler=c.proxy(i.dragHandler,i),i.keyHandler=c.proxy(i.keyHandler,i),i.instanceUid=o++,i.htmlExpr=/^(?:\s*(<[\w\W]+>)[^>]*)$/,i.registerBreakpoints(),i.init(!0)}).prototype.activateADA=function(){this.$slideTrack.find(".slick-active").attr({"aria-hidden":"false"}).find("a, input, button, select").attr({tabindex:"0"})},s.prototype.addSlide=s.prototype.slickAdd=function(t,e,n){var i=this;if("boolean"==typeof e)n=e,e=null;else if(e<0||e>=i.slideCount)return!1;i.unload(),"number"==typeof e?0===e&&0===i.$slides.length?c(t).appendTo(i.$slideTrack):n?c(t).insertBefore(i.$slides.eq(e)):c(t).insertAfter(i.$slides.eq(e)):!0===n?c(t).prependTo(i.$slideTrack):c(t).appendTo(i.$slideTrack),i.$slides=i.$slideTrack.children(this.options.slide),i.$slideTrack.children(this.options.slide).detach(),i.$slideTrack.append(i.$slides),i.$slides.each(function(t,e){c(e).attr("data-slick-index",t)}),i.$slidesCache=i.$slides,i.reinit()},s.prototype.animateHeight=function(){var t=this;if(1===t.options.slidesToShow&&!0===t.options.adaptiveHeight&&!1===t.options.vertical){var e=t.$slides.eq(t.currentSlide).outerHeight(!0);t.$list.animate({height:e},t.options.speed)}},s.prototype.animateSlide=function(t,e){var n={},i=this;i.animateHeight(),!0===i.options.rtl&&!1===i.options.vertical&&(t=-t),!1===i.transformsEnabled?!1===i.options.vertical?i.$slideTrack.animate({left:t},i.options.speed,i.options.easing,e):i.$slideTrack.animate({top:t},i.options.speed,i.options.easing,e):!1===i.cssTransitions?(!0===i.options.rtl&&(i.currentLeft=-i.currentLeft),c({animStart:i.currentLeft}).animate({animStart:t},{duration:i.options.speed,easing:i.options.easing,step:function(t){t=Math.ceil(t),!1===i.options.vertical?n[i.animType]="translate("+t+"px, 0px)":n[i.animType]="translate(0px,"+t+"px)",i.$slideTrack.css(n)},complete:function(){e&&e.call()}})):(i.applyTransition(),t=Math.ceil(t),!1===i.options.vertical?n[i.animType]="translate3d("+t+"px, 0px, 0px)":n[i.animType]="translate3d(0px,"+t+"px, 0px)",i.$slideTrack.css(n),e&&setTimeout(function(){i.disableTransition(),e.call()},i.options.speed))},s.prototype.getNavTarget=function(){var t=this.options.asNavFor;return t&&null!==t&&(t=c(t).not(this.$slider)),t},s.prototype.asNavFor=function(e){var t=this.getNavTarget();null!==t&&"object"==typeof t&&t.each(function(){var t=c(this).slick("getSlick");t.unslicked||t.slideHandler(e,!0)})},s.prototype.applyTransition=function(t){var e=this,n={};!1===e.options.fade?n[e.transitionType]=e.transformType+" "+e.options.speed+"ms "+e.options.cssEase:n[e.transitionType]="opacity "+e.options.speed+"ms "+e.options.cssEase,!1===e.options.fade?e.$slideTrack.css(n):e.$slides.eq(t).css(n)},s.prototype.autoPlay=function(){var t=this;t.autoPlayClear(),t.slideCount>t.options.slidesToShow&&(t.autoPlayTimer=setInterval(t.autoPlayIterator,t.options.autoplaySpeed))},s.prototype.autoPlayClear=function(){this.autoPlayTimer&&clearInterval(this.autoPlayTimer)},s.prototype.autoPlayIterator=function(){var t=this,e=t.currentSlide+t.options.slidesToScroll;t.paused||t.interrupted||t.focussed||(!1===t.options.infinite&&(1===t.direction&&t.currentSlide+1===t.slideCount-1?t.direction=0:0===t.direction&&(e=t.currentSlide-t.options.slidesToScroll,t.currentSlide-1==0&&(t.direction=1))),t.slideHandler(e))},s.prototype.buildArrows=function(){var t=this;!0===t.options.arrows&&(t.$prevArrow=c(t.options.prevArrow).addClass("slick-arrow"),t.$nextArrow=c(t.options.nextArrow).addClass("slick-arrow"),t.slideCount>t.options.slidesToShow?(t.$prevArrow.removeClass("slick-hidden").removeAttr("aria-hidden tabindex"),t.$nextArrow.removeClass("slick-hidden").removeAttr("aria-hidden tabindex"),t.htmlExpr.test(t.options.prevArrow)&&t.$prevArrow.prependTo(t.options.appendArrows),t.htmlExpr.test(t.options.nextArrow)&&t.$nextArrow.appendTo(t.options.appendArrows),!0!==t.options.infinite&&t.$prevArrow.addClass("slick-disabled").attr("aria-disabled","true")):t.$prevArrow.add(t.$nextArrow).addClass("slick-hidden").attr({"aria-disabled":"true",tabindex:"-1"}))},s.prototype.buildDots=function(){var t,e,n=this;if(!0===n.options.dots&&n.slideCount>n.options.slidesToShow){for(n.$slider.addClass("slick-dotted"),e=c("<ul />").addClass(n.options.dotsClass),t=0;t<=n.getDotCount();t+=1)e.append(c("<li />").append(n.options.customPaging.call(this,n,t)));n.$dots=e.appendTo(n.options.appendDots),n.$dots.find("li").first().addClass("slick-active")}},s.prototype.buildOut=function(){var t=this;t.$slides=t.$slider.children(t.options.slide+":not(.slick-cloned)").addClass("slick-slide"),t.slideCount=t.$slides.length,t.$slides.each(function(t,e){c(e).attr("data-slick-index",t).data("originalStyling",c(e).attr("style")||"")}),t.$slider.addClass("slick-slider"),t.$slideTrack=0===t.slideCount?c('<div class="slick-track"/>').appendTo(t.$slider):t.$slides.wrapAll('<div class="slick-track"/>').parent(),t.$list=t.$slideTrack.wrap('<div class="slick-list"/>').parent(),t.$slideTrack.css("opacity",0),!0!==t.options.centerMode&&!0!==t.options.swipeToSlide||(t.options.slidesToScroll=1),c("img[data-lazy]",t.$slider).not("[src]").addClass("slick-loading"),t.setupInfinite(),t.buildArrows(),t.buildDots(),t.updateDots(),t.setSlideClasses("number"==typeof t.currentSlide?t.currentSlide:0),!0===t.options.draggable&&t.$list.addClass("draggable")},s.prototype.buildRows=function(){var t,e,n,i,o,r,s,a=this;if(i=document.createDocumentFragment(),r=a.$slider.children(),0<a.options.rows){for(s=a.options.slidesPerRow*a.options.rows,o=Math.ceil(r.length/s),t=0;t<o;t++){var l=document.createElement("div");for(e=0;e<a.options.rows;e++){var c=document.createElement("div");for(n=0;n<a.options.slidesPerRow;n++){var u=t*s+(e*a.options.slidesPerRow+n);r.get(u)&&c.appendChild(r.get(u))}l.appendChild(c)}i.appendChild(l)}a.$slider.empty().append(i),a.$slider.children().children().children().css({width:100/a.options.slidesPerRow+"%",display:"inline-block"})}},s.prototype.checkResponsive=function(t,e){var n,i,o,r=this,s=!1,a=r.$slider.width(),l=window.innerWidth||c(window).width();if("window"===r.respondTo?o=l:"slider"===r.respondTo?o=a:"min"===r.respondTo&&(o=Math.min(l,a)),r.options.responsive&&r.options.responsive.length&&null!==r.options.responsive){for(n in i=null,r.breakpoints)r.breakpoints.hasOwnProperty(n)&&(!1===r.originalSettings.mobileFirst?o<r.breakpoints[n]&&(i=r.breakpoints[n]):o>r.breakpoints[n]&&(i=r.breakpoints[n]));null!==i?null!==r.activeBreakpoint&&i===r.activeBreakpoint&&!e||(r.activeBreakpoint=i,"unslick"===r.breakpointSettings[i]?r.unslick(i):(r.options=c.extend({},r.originalSettings,r.breakpointSettings[i]),!0===t&&(r.currentSlide=r.options.initialSlide),r.refresh(t)),s=i):null!==r.activeBreakpoint&&(r.activeBreakpoint=null,r.options=r.originalSettings,!0===t&&(r.currentSlide=r.options.initialSlide),r.refresh(t),s=i),t||!1===s||r.$slider.trigger("breakpoint",[r,s])}},s.prototype.changeSlide=function(t,e){var n,i,o=this,r=c(t.currentTarget);switch(r.is("a")&&t.preventDefault(),r.is("li")||(r=r.closest("li")),n=o.slideCount%o.options.slidesToScroll!=0?0:(o.slideCount-o.currentSlide)%o.options.slidesToScroll,t.data.message){case"previous":i=0==n?o.options.slidesToScroll:o.options.slidesToShow-n,o.slideCount>o.options.slidesToShow&&o.slideHandler(o.currentSlide-i,!1,e);break;case"next":i=0==n?o.options.slidesToScroll:n,o.slideCount>o.options.slidesToShow&&o.slideHandler(o.currentSlide+i,!1,e);break;case"index":var s=0===t.data.index?0:t.data.index||r.index()*o.options.slidesToScroll;o.slideHandler(o.checkNavigable(s),!1,e),r.children().trigger("focus");break;default:return}},s.prototype.checkNavigable=function(t){var e,n;if(n=0,t>(e=this.getNavigableIndexes())[e.length-1])t=e[e.length-1];else for(var i in e){if(t<e[i]){t=n;break}n=e[i]}return t},s.prototype.cleanUpEvents=function(){var t=this;t.options.dots&&null!==t.$dots&&(c("li",t.$dots).off("click.slick",t.changeSlide).off("mouseenter.slick",c.proxy(t.interrupt,t,!0)).off("mouseleave.slick",c.proxy(t.interrupt,t,!1)),!0===t.options.accessibility&&t.$dots.off("keydown.slick",t.keyHandler)),t.$slider.off("focus.slick blur.slick"),!0===t.options.arrows&&t.slideCount>t.options.slidesToShow&&(t.$prevArrow&&t.$prevArrow.off("click.slick",t.changeSlide),t.$nextArrow&&t.$nextArrow.off("click.slick",t.changeSlide),!0===t.options.accessibility&&(t.$prevArrow&&t.$prevArrow.off("keydown.slick",t.keyHandler),t.$nextArrow&&t.$nextArrow.off("keydown.slick",t.keyHandler))),t.$list.off("touchstart.slick mousedown.slick",t.swipeHandler),t.$list.off("touchmove.slick mousemove.slick",t.swipeHandler),t.$list.off("touchend.slick mouseup.slick",t.swipeHandler),t.$list.off("touchcancel.slick mouseleave.slick",t.swipeHandler),t.$list.off("click.slick",t.clickHandler),c(document).off(t.visibilityChange,t.visibility),t.cleanUpSlideEvents(),!0===t.options.accessibility&&t.$list.off("keydown.slick",t.keyHandler),!0===t.options.focusOnSelect&&c(t.$slideTrack).children().off("click.slick",t.selectHandler),c(window).off("orientationchange.slick.slick-"+t.instanceUid,t.orientationChange),c(window).off("resize.slick.slick-"+t.instanceUid,t.resize),c("[draggable!=true]",t.$slideTrack).off("dragstart",t.preventDefault),c(window).off("load.slick.slick-"+t.instanceUid,t.setPosition)},s.prototype.cleanUpSlideEvents=function(){var t=this;t.$list.off("mouseenter.slick",c.proxy(t.interrupt,t,!0)),t.$list.off("mouseleave.slick",c.proxy(t.interrupt,t,!1))},s.prototype.cleanUpRows=function(){var t;0<this.options.rows&&((t=this.$slides.children().children()).removeAttr("style"),this.$slider.empty().append(t))},s.prototype.clickHandler=function(t){!1===this.shouldClick&&(t.stopImmediatePropagation(),t.stopPropagation(),t.preventDefault())},s.prototype.destroy=function(t){var e=this;e.autoPlayClear(),e.touchObject={},e.cleanUpEvents(),c(".slick-cloned",e.$slider).detach(),e.$dots&&e.$dots.remove(),e.$prevArrow&&e.$prevArrow.length&&(e.$prevArrow.removeClass("slick-disabled slick-arrow slick-hidden").removeAttr("aria-hidden aria-disabled tabindex").css("display",""),e.htmlExpr.test(e.options.prevArrow)&&e.$prevArrow.remove()),e.$nextArrow&&e.$nextArrow.length&&(e.$nextArrow.removeClass("slick-disabled slick-arrow slick-hidden").removeAttr("aria-hidden aria-disabled tabindex").css("display",""),e.htmlExpr.test(e.options.nextArrow)&&e.$nextArrow.remove()),e.$slides&&(e.$slides.removeClass("slick-slide slick-active slick-center slick-visible slick-current").removeAttr("aria-hidden").removeAttr("data-slick-index").each(function(){c(this).attr("style",c(this).data("originalStyling"))}),e.$slideTrack.children(this.options.slide).detach(),e.$slideTrack.detach(),e.$list.detach(),e.$slider.append(e.$slides)),e.cleanUpRows(),e.$slider.removeClass("slick-slider"),e.$slider.removeClass("slick-initialized"),e.$slider.removeClass("slick-dotted"),e.unslicked=!0,t||e.$slider.trigger("destroy",[e])},s.prototype.disableTransition=function(t){var e={};e[this.transitionType]="",!1===this.options.fade?this.$slideTrack.css(e):this.$slides.eq(t).css(e)},s.prototype.fadeSlide=function(t,e){var n=this;!1===n.cssTransitions?(n.$slides.eq(t).css({zIndex:n.options.zIndex}),n.$slides.eq(t).animate({opacity:1},n.options.speed,n.options.easing,e)):(n.applyTransition(t),n.$slides.eq(t).css({opacity:1,zIndex:n.options.zIndex}),e&&setTimeout(function(){n.disableTransition(t),e.call()},n.options.speed))},s.prototype.fadeSlideOut=function(t){var e=this;!1===e.cssTransitions?e.$slides.eq(t).animate({opacity:0,zIndex:e.options.zIndex-2},e.options.speed,e.options.easing):(e.applyTransition(t),e.$slides.eq(t).css({opacity:0,zIndex:e.options.zIndex-2}))},s.prototype.filterSlides=s.prototype.slickFilter=function(t){var e=this;null!==t&&(e.$slidesCache=e.$slides,e.unload(),e.$slideTrack.children(this.options.slide).detach(),e.$slidesCache.filter(t).appendTo(e.$slideTrack),e.reinit())},s.prototype.focusHandler=function(){var n=this;n.$slider.off("focus.slick blur.slick").on("focus.slick blur.slick","*",function(t){t.stopImmediatePropagation();var e=c(this);setTimeout(function(){n.options.pauseOnFocus&&(n.focussed=e.is(":focus"),n.autoPlay())},0)})},s.prototype.getCurrent=s.prototype.slickCurrentSlide=function(){return this.currentSlide},s.prototype.getDotCount=function(){var t=this,e=0,n=0,i=0;if(!0===t.options.infinite)if(t.slideCount<=t.options.slidesToShow)++i;else for(;e<t.slideCount;)++i,e=n+t.options.slidesToScroll,n+=t.options.slidesToScroll<=t.options.slidesToShow?t.options.slidesToScroll:t.options.slidesToShow;else if(!0===t.options.centerMode)i=t.slideCount;else if(t.options.asNavFor)for(;e<t.slideCount;)++i,e=n+t.options.slidesToScroll,n+=t.options.slidesToScroll<=t.options.slidesToShow?t.options.slidesToScroll:t.options.slidesToShow;else i=1+Math.ceil((t.slideCount-t.options.slidesToShow)/t.options.slidesToScroll);return i-1},s.prototype.getLeft=function(t){var e,n,i,o,r=this,s=0;return r.slideOffset=0,n=r.$slides.first().outerHeight(!0),!0===r.options.infinite?(r.slideCount>r.options.slidesToShow&&(r.slideOffset=r.slideWidth*r.options.slidesToShow*-1,o=-1,!0===r.options.vertical&&!0===r.options.centerMode&&(2===r.options.slidesToShow?o=-1.5:1===r.options.slidesToShow&&(o=-2)),s=n*r.options.slidesToShow*o),r.slideCount%r.options.slidesToScroll!=0&&t+r.options.slidesToScroll>r.slideCount&&r.slideCount>r.options.slidesToShow&&(s=t>r.slideCount?(r.slideOffset=(r.options.slidesToShow-(t-r.slideCount))*r.slideWidth*-1,(r.options.slidesToShow-(t-r.slideCount))*n*-1):(r.slideOffset=r.slideCount%r.options.slidesToScroll*r.slideWidth*-1,r.slideCount%r.options.slidesToScroll*n*-1))):t+r.options.slidesToShow>r.slideCount&&(r.slideOffset=(t+r.options.slidesToShow-r.slideCount)*r.slideWidth,s=(t+r.options.slidesToShow-r.slideCount)*n),r.slideCount<=r.options.slidesToShow&&(s=r.slideOffset=0),!0===r.options.centerMode&&r.slideCount<=r.options.slidesToShow?r.slideOffset=r.slideWidth*Math.floor(r.options.slidesToShow)/2-r.slideWidth*r.slideCount/2:!0===r.options.centerMode&&!0===r.options.infinite?r.slideOffset+=r.slideWidth*Math.floor(r.options.slidesToShow/2)-r.slideWidth:!0===r.options.centerMode&&(r.slideOffset=0,r.slideOffset+=r.slideWidth*Math.floor(r.options.slidesToShow/2)),e=!1===r.options.vertical?t*r.slideWidth*-1+r.slideOffset:t*n*-1+s,!0===r.options.variableWidth&&(i=r.slideCount<=r.options.slidesToShow||!1===r.options.infinite?r.$slideTrack.children(".slick-slide").eq(t):r.$slideTrack.children(".slick-slide").eq(t+r.options.slidesToShow),e=!0===r.options.rtl?i[0]?-1*(r.$slideTrack.width()-i[0].offsetLeft-i.width()):0:i[0]?-1*i[0].offsetLeft:0,!0===r.options.centerMode&&(i=r.slideCount<=r.options.slidesToShow||!1===r.options.infinite?r.$slideTrack.children(".slick-slide").eq(t):r.$slideTrack.children(".slick-slide").eq(t+r.options.slidesToShow+1),e=!0===r.options.rtl?i[0]?-1*(r.$slideTrack.width()-i[0].offsetLeft-i.width()):0:i[0]?-1*i[0].offsetLeft:0,e+=(r.$list.width()-i.outerWidth())/2)),e},s.prototype.getOption=s.prototype.slickGetOption=function(t){return this.options[t]},s.prototype.getNavigableIndexes=function(){var t,e=this,n=0,i=0,o=[];for(t=!1===e.options.infinite?e.slideCount:(n=-1*e.options.slidesToScroll,i=-1*e.options.slidesToScroll,2*e.slideCount);n<t;)o.push(n),n=i+e.options.slidesToScroll,i+=e.options.slidesToScroll<=e.options.slidesToShow?e.options.slidesToScroll:e.options.slidesToShow;return o},s.prototype.getSlick=function(){return this},s.prototype.getSlideCount=function(){var n,i,o=this;return i=!0===o.options.centerMode?o.slideWidth*Math.floor(o.options.slidesToShow/2):0,!0===o.options.swipeToSlide?(o.$slideTrack.find(".slick-slide").each(function(t,e){if(e.offsetLeft-i+c(e).outerWidth()/2>-1*o.swipeLeft)return n=e,!1}),Math.abs(c(n).attr("data-slick-index")-o.currentSlide)||1):o.options.slidesToScroll},s.prototype.goTo=s.prototype.slickGoTo=function(t,e){this.changeSlide({data:{message:"index",index:parseInt(t)}},e)},s.prototype.init=function(t){var e=this;c(e.$slider).hasClass("slick-initialized")||(c(e.$slider).addClass("slick-initialized"),e.buildRows(),e.buildOut(),e.setProps(),e.startLoad(),e.loadSlider(),e.initializeEvents(),e.updateArrows(),e.updateDots(),e.checkResponsive(!0),e.focusHandler()),t&&e.$slider.trigger("init",[e]),!0===e.options.accessibility&&e.initADA(),e.options.autoplay&&(e.paused=!1,e.autoPlay())},s.prototype.initADA=function(){var i=this,n=Math.ceil(i.slideCount/i.options.slidesToShow),o=i.getNavigableIndexes().filter(function(t){return 0<=t&&t<i.slideCount});i.$slides.add(i.$slideTrack.find(".slick-cloned")).attr({"aria-hidden":"true",tabindex:"-1"}).find("a, input, button, select").attr({tabindex:"-1"}),null!==i.$dots&&(i.$slides.not(i.$slideTrack.find(".slick-cloned")).each(function(t){var e=o.indexOf(t);if(c(this).attr({role:"tabpanel",id:"slick-slide"+i.instanceUid+t,tabindex:-1}),-1!==e){var n="slick-slide-control"+i.instanceUid+e;c("#"+n).length&&c(this).attr({"aria-describedby":n})}}),i.$dots.attr("role","tablist").find("li").each(function(t){var e=o[t];c(this).attr({role:"presentation"}),c(this).find("button").first().attr({role:"tab",id:"slick-slide-control"+i.instanceUid+t,"aria-controls":"slick-slide"+i.instanceUid+e,"aria-label":t+1+" of "+n,"aria-selected":null,tabindex:"-1"})}).eq(i.currentSlide).find("button").attr({"aria-selected":"true",tabindex:"0"}).end());for(var t=i.currentSlide,e=t+i.options.slidesToShow;t<e;t++)i.options.focusOnChange?i.$slides.eq(t).attr({tabindex:"0"}):i.$slides.eq(t).removeAttr("tabindex");i.activateADA()},s.prototype.initArrowEvents=function(){var t=this;!0===t.options.arrows&&t.slideCount>t.options.slidesToShow&&(t.$prevArrow.off("click.slick").on("click.slick",{message:"previous"},t.changeSlide),t.$nextArrow.off("click.slick").on("click.slick",{message:"next"},t.changeSlide),!0===t.options.accessibility&&(t.$prevArrow.on("keydown.slick",t.keyHandler),t.$nextArrow.on("keydown.slick",t.keyHandler)))},s.prototype.initDotEvents=function(){var t=this;!0===t.options.dots&&t.slideCount>t.options.slidesToShow&&(c("li",t.$dots).on("click.slick",{message:"index"},t.changeSlide),!0===t.options.accessibility&&t.$dots.on("keydown.slick",t.keyHandler)),!0===t.options.dots&&!0===t.options.pauseOnDotsHover&&t.slideCount>t.options.slidesToShow&&c("li",t.$dots).on("mouseenter.slick",c.proxy(t.interrupt,t,!0)).on("mouseleave.slick",c.proxy(t.interrupt,t,!1))},s.prototype.initSlideEvents=function(){var t=this;t.options.pauseOnHover&&(t.$list.on("mouseenter.slick",c.proxy(t.interrupt,t,!0)),t.$list.on("mouseleave.slick",c.proxy(t.interrupt,t,!1)))},s.prototype.initializeEvents=function(){var t=this;t.initArrowEvents(),t.initDotEvents(),t.initSlideEvents(),t.$list.on("touchstart.slick mousedown.slick",{action:"start"},t.swipeHandler),t.$list.on("touchmove.slick mousemove.slick",{action:"move"},t.swipeHandler),t.$list.on("touchend.slick mouseup.slick",{action:"end"},t.swipeHandler),t.$list.on("touchcancel.slick mouseleave.slick",{action:"end"},t.swipeHandler),t.$list.on("click.slick",t.clickHandler),c(document).on(t.visibilityChange,c.proxy(t.visibility,t)),!0===t.options.accessibility&&t.$list.on("keydown.slick",t.keyHandler),!0===t.options.focusOnSelect&&c(t.$slideTrack).children().on("click.slick",t.selectHandler),c(window).on("orientationchange.slick.slick-"+t.instanceUid,c.proxy(t.orientationChange,t)),c(window).on("resize.slick.slick-"+t.instanceUid,c.proxy(t.resize,t)),c("[draggable!=true]",t.$slideTrack).on("dragstart",t.preventDefault),c(window).on("load.slick.slick-"+t.instanceUid,t.setPosition),c(t.setPosition)},s.prototype.initUI=function(){var t=this;!0===t.options.arrows&&t.slideCount>t.options.slidesToShow&&(t.$prevArrow.show(),t.$nextArrow.show()),!0===t.options.dots&&t.slideCount>t.options.slidesToShow&&t.$dots.show()},s.prototype.keyHandler=function(t){var e=this;t.target.tagName.match("TEXTAREA|INPUT|SELECT")||(37===t.keyCode&&!0===e.options.accessibility?e.changeSlide({data:{message:!0===e.options.rtl?"next":"previous"}}):39===t.keyCode&&!0===e.options.accessibility&&e.changeSlide({data:{message:!0===e.options.rtl?"previous":"next"}}))},s.prototype.lazyLoad=function(){var t,e,n,r=this;function i(t){c("img[data-lazy]",t).each(function(){var t=c(this),e=c(this).attr("data-lazy"),n=c(this).attr("data-srcset"),i=c(this).attr("data-sizes")||r.$slider.attr("data-sizes"),o=document.createElement("img");o.onload=function(){t.animate({opacity:0},100,function(){n&&(t.attr("srcset",n),i&&t.attr("sizes",i)),t.attr("src",e).animate({opacity:1},200,function(){t.removeAttr("data-lazy data-srcset data-sizes").removeClass("slick-loading")}),r.$slider.trigger("lazyLoaded",[r,t,e])})},o.onerror=function(){t.removeAttr("data-lazy").removeClass("slick-loading").addClass("slick-lazyload-error"),r.$slider.trigger("lazyLoadError",[r,t,e])},o.src=e})}if(!0===r.options.centerMode?n=!0===r.options.infinite?(e=r.currentSlide+(r.options.slidesToShow/2+1))+r.options.slidesToShow+2:(e=Math.max(0,r.currentSlide-(r.options.slidesToShow/2+1)),r.options.slidesToShow/2+1+2+r.currentSlide):(e=r.options.infinite?r.options.slidesToShow+r.currentSlide:r.currentSlide,n=Math.ceil(e+r.options.slidesToShow),!0===r.options.fade&&(0<e&&e--,n<=r.slideCount&&n++)),t=r.$slider.find(".slick-slide").slice(e,n),"anticipated"===r.options.lazyLoad)for(var o=e-1,s=n,a=r.$slider.find(".slick-slide"),l=0;l<r.options.slidesToScroll;l++)o<0&&(o=r.slideCount-1),t=(t=t.add(a.eq(o))).add(a.eq(s)),o--,s++;i(t),r.slideCount<=r.options.slidesToShow?i(r.$slider.find(".slick-slide")):r.currentSlide>=r.slideCount-r.options.slidesToShow?i(r.$slider.find(".slick-cloned").slice(0,r.options.slidesToShow)):0===r.currentSlide&&i(r.$slider.find(".slick-cloned").slice(-1*r.options.slidesToShow))},s.prototype.loadSlider=function(){var t=this;t.setPosition(),t.$slideTrack.css({opacity:1}),t.$slider.removeClass("slick-loading"),t.initUI(),"progressive"===t.options.lazyLoad&&t.progressiveLazyLoad()},s.prototype.next=s.prototype.slickNext=function(){this.changeSlide({data:{message:"next"}})},s.prototype.orientationChange=function(){this.checkResponsive(),this.setPosition()},s.prototype.pause=s.prototype.slickPause=function(){this.autoPlayClear(),this.paused=!0},s.prototype.play=s.prototype.slickPlay=function(){var t=this;t.autoPlay(),t.options.autoplay=!0,t.paused=!1,t.focussed=!1,t.interrupted=!1},s.prototype.postSlide=function(t){var e=this;e.unslicked||(e.$slider.trigger("afterChange",[e,t]),e.animating=!1,e.slideCount>e.options.slidesToShow&&e.setPosition(),e.swipeLeft=null,e.options.autoplay&&e.autoPlay(),!0===e.options.accessibility&&(e.initADA(),e.options.focusOnChange&&c(e.$slides.get(e.currentSlide)).attr("tabindex",0).focus()))},s.prototype.prev=s.prototype.slickPrev=function(){this.changeSlide({data:{message:"previous"}})},s.prototype.preventDefault=function(t){t.preventDefault()},s.prototype.progressiveLazyLoad=function(t){t=t||1;var e,n,i,o,r,s=this,a=c("img[data-lazy]",s.$slider);a.length?(e=a.first(),n=e.attr("data-lazy"),i=e.attr("data-srcset"),o=e.attr("data-sizes")||s.$slider.attr("data-sizes"),(r=document.createElement("img")).onload=function(){i&&(e.attr("srcset",i),o&&e.attr("sizes",o)),e.attr("src",n).removeAttr("data-lazy data-srcset data-sizes").removeClass("slick-loading"),!0===s.options.adaptiveHeight&&s.setPosition(),s.$slider.trigger("lazyLoaded",[s,e,n]),s.progressiveLazyLoad()},r.onerror=function(){t<3?setTimeout(function(){s.progressiveLazyLoad(t+1)},500):(e.removeAttr("data-lazy").removeClass("slick-loading").addClass("slick-lazyload-error"),s.$slider.trigger("lazyLoadError",[s,e,n]),s.progressiveLazyLoad())},r.src=n):s.$slider.trigger("allImagesLoaded",[s])},s.prototype.refresh=function(t){var e,n,i=this;n=i.slideCount-i.options.slidesToShow,!i.options.infinite&&i.currentSlide>n&&(i.currentSlide=n),i.slideCount<=i.options.slidesToShow&&(i.currentSlide=0),e=i.currentSlide,i.destroy(!0),c.extend(i,i.initials,{currentSlide:e}),i.init(),t||i.changeSlide({data:{message:"index",index:e}},!1)},s.prototype.registerBreakpoints=function(){var t,e,n,i=this,o=i.options.responsive||null;if("array"===c.type(o)&&o.length){for(t in i.respondTo=i.options.respondTo||"window",o)if(n=i.breakpoints.length-1,o.hasOwnProperty(t)){for(e=o[t].breakpoint;0<=n;)i.breakpoints[n]&&i.breakpoints[n]===e&&i.breakpoints.splice(n,1),n--;i.breakpoints.push(e),i.breakpointSettings[e]=o[t].settings}i.breakpoints.sort(function(t,e){return i.options.mobileFirst?t-e:e-t})}},s.prototype.reinit=function(){var t=this;t.$slides=t.$slideTrack.children(t.options.slide).addClass("slick-slide"),t.slideCount=t.$slides.length,t.currentSlide>=t.slideCount&&0!==t.currentSlide&&(t.currentSlide=t.currentSlide-t.options.slidesToScroll),t.slideCount<=t.options.slidesToShow&&(t.currentSlide=0),t.registerBreakpoints(),t.setProps(),t.setupInfinite(),t.buildArrows(),t.updateArrows(),t.initArrowEvents(),t.buildDots(),t.updateDots(),t.initDotEvents(),t.cleanUpSlideEvents(),t.initSlideEvents(),t.checkResponsive(!1,!0),!0===t.options.focusOnSelect&&c(t.$slideTrack).children().on("click.slick",t.selectHandler),t.setSlideClasses("number"==typeof t.currentSlide?t.currentSlide:0),t.setPosition(),t.focusHandler(),t.paused=!t.options.autoplay,t.autoPlay(),t.$slider.trigger("reInit",[t])},s.prototype.resize=function(){var t=this;c(window).width()!==t.windowWidth&&(clearTimeout(t.windowDelay),t.windowDelay=window.setTimeout(function(){t.windowWidth=c(window).width(),t.checkResponsive(),t.unslicked||t.setPosition()},50))},s.prototype.removeSlide=s.prototype.slickRemove=function(t,e,n){var i=this;if(t="boolean"==typeof t?!0===(e=t)?0:i.slideCount-1:!0===e?--t:t,i.slideCount<1||t<0||t>i.slideCount-1)return!1;i.unload(),!0===n?i.$slideTrack.children().remove():i.$slideTrack.children(this.options.slide).eq(t).remove(),i.$slides=i.$slideTrack.children(this.options.slide),i.$slideTrack.children(this.options.slide).detach(),i.$slideTrack.append(i.$slides),i.$slidesCache=i.$slides,i.reinit()},s.prototype.setCSS=function(t){var e,n,i=this,o={};!0===i.options.rtl&&(t=-t),e="left"==i.positionProp?Math.ceil(t)+"px":"0px",n="top"==i.positionProp?Math.ceil(t)+"px":"0px",o[i.positionProp]=t,!1===i.transformsEnabled||(!(o={})===i.cssTransitions?o[i.animType]="translate("+e+", "+n+")":o[i.animType]="translate3d("+e+", "+n+", 0px)"),i.$slideTrack.css(o)},s.prototype.setDimensions=function(){var t=this;!1===t.options.vertical?!0===t.options.centerMode&&t.$list.css({padding:"0px "+t.options.centerPadding}):(t.$list.height(t.$slides.first().outerHeight(!0)*t.options.slidesToShow),!0===t.options.centerMode&&t.$list.css({padding:t.options.centerPadding+" 0px"})),t.listWidth=t.$list.width(),t.listHeight=t.$list.height(),!1===t.options.vertical&&!1===t.options.variableWidth?(t.slideWidth=Math.ceil(t.listWidth/t.options.slidesToShow),t.$slideTrack.width(Math.ceil(t.slideWidth*t.$slideTrack.children(".slick-slide").length))):!0===t.options.variableWidth?t.$slideTrack.width(5e3*t.slideCount):(t.slideWidth=Math.ceil(t.listWidth),t.$slideTrack.height(Math.ceil(t.$slides.first().outerHeight(!0)*t.$slideTrack.children(".slick-slide").length)));var e=t.$slides.first().outerWidth(!0)-t.$slides.first().width();!1===t.options.variableWidth&&t.$slideTrack.children(".slick-slide").width(t.slideWidth-e)},s.prototype.setFade=function(){var n,i=this;i.$slides.each(function(t,e){n=i.slideWidth*t*-1,!0===i.options.rtl?c(e).css({position:"relative",right:n,top:0,zIndex:i.options.zIndex-2,opacity:0}):c(e).css({position:"relative",left:n,top:0,zIndex:i.options.zIndex-2,opacity:0})}),i.$slides.eq(i.currentSlide).css({zIndex:i.options.zIndex-1,opacity:1})},s.prototype.setHeight=function(){var t=this;if(1===t.options.slidesToShow&&!0===t.options.adaptiveHeight&&!1===t.options.vertical){var e=t.$slides.eq(t.currentSlide).outerHeight(!0);t.$list.css("height",e)}},s.prototype.setOption=s.prototype.slickSetOption=function(){var t,e,n,i,o,r=this,s=!1;if("object"===c.type(arguments[0])?(n=arguments[0],s=arguments[1],o="multiple"):"string"===c.type(arguments[0])&&(i=arguments[1],s=arguments[2],"responsive"===(n=arguments[0])&&"array"===c.type(arguments[1])?o="responsive":void 0!==arguments[1]&&(o="single")),"single"===o)r.options[n]=i;else if("multiple"===o)c.each(n,function(t,e){r.options[t]=e});else if("responsive"===o)for(e in i)if("array"!==c.type(r.options.responsive))r.options.responsive=[i[e]];else{for(t=r.options.responsive.length-1;0<=t;)r.options.responsive[t].breakpoint===i[e].breakpoint&&r.options.responsive.splice(t,1),t--;r.options.responsive.push(i[e])}s&&(r.unload(),r.reinit())},s.prototype.setPosition=function(){var t=this;t.setDimensions(),t.setHeight(),!1===t.options.fade?t.setCSS(t.getLeft(t.currentSlide)):t.setFade(),t.$slider.trigger("setPosition",[t])},s.prototype.setProps=function(){var t=this,e=document.body.style;t.positionProp=!0===t.options.vertical?"top":"left","top"===t.positionProp?t.$slider.addClass("slick-vertical"):t.$slider.removeClass("slick-vertical"),void 0===e.WebkitTransition&&void 0===e.MozTransition&&void 0===e.msTransition||!0===t.options.useCSS&&(t.cssTransitions=!0),t.options.fade&&("number"==typeof t.options.zIndex?t.options.zIndex<3&&(t.options.zIndex=3):t.options.zIndex=t.defaults.zIndex),void 0!==e.OTransform&&(t.animType="OTransform",t.transformType="-o-transform",t.transitionType="OTransition",void 0===e.perspectiveProperty&&void 0===e.webkitPerspective&&(t.animType=!1)),void 0!==e.MozTransform&&(t.animType="MozTransform",t.transformType="-moz-transform",t.transitionType="MozTransition",void 0===e.perspectiveProperty&&void 0===e.MozPerspective&&(t.animType=!1)),void 0!==e.webkitTransform&&(t.animType="webkitTransform",t.transformType="-webkit-transform",t.transitionType="webkitTransition",void 0===e.perspectiveProperty&&void 0===e.webkitPerspective&&(t.animType=!1)),void 0!==e.msTransform&&(t.animType="msTransform",t.transformType="-ms-transform",t.transitionType="msTransition",void 0===e.msTransform&&(t.animType=!1)),void 0!==e.transform&&!1!==t.animType&&(t.animType="transform",t.transformType="transform",t.transitionType="transition"),t.transformsEnabled=t.options.useTransform&&null!==t.animType&&!1!==t.animType},s.prototype.setSlideClasses=function(t){var e,n,i,o,r=this;if(n=r.$slider.find(".slick-slide").removeClass("slick-active slick-center slick-current").attr("aria-hidden","true"),r.$slides.eq(t).addClass("slick-current"),!0===r.options.centerMode){var s=r.options.slidesToShow%2==0?1:0;e=Math.floor(r.options.slidesToShow/2),!0===r.options.infinite&&(e<=t&&t<=r.slideCount-1-e?r.$slides.slice(t-e+s,t+e+1).addClass("slick-active").attr("aria-hidden","false"):(i=r.options.slidesToShow+t,n.slice(i-e+1+s,i+e+2).addClass("slick-active").attr("aria-hidden","false")),0===t?n.eq(n.length-1-r.options.slidesToShow).addClass("slick-center"):t===r.slideCount-1&&n.eq(r.options.slidesToShow).addClass("slick-center")),r.$slides.eq(t).addClass("slick-center")}else 0<=t&&t<=r.slideCount-r.options.slidesToShow?r.$slides.slice(t,t+r.options.slidesToShow).addClass("slick-active").attr("aria-hidden","false"):n.length<=r.options.slidesToShow?n.addClass("slick-active").attr("aria-hidden","false"):(o=r.slideCount%r.options.slidesToShow,i=!0===r.options.infinite?r.options.slidesToShow+t:t,r.options.slidesToShow==r.options.slidesToScroll&&r.slideCount-t<r.options.slidesToShow?n.slice(i-(r.options.slidesToShow-o),i+o).addClass("slick-active").attr("aria-hidden","false"):n.slice(i,i+r.options.slidesToShow).addClass("slick-active").attr("aria-hidden","false"));"ondemand"!==r.options.lazyLoad&&"anticipated"!==r.options.lazyLoad||r.lazyLoad()},s.prototype.setupInfinite=function(){var t,e,n,i=this;if(!0===i.options.fade&&(i.options.centerMode=!1),!0===i.options.infinite&&!1===i.options.fade&&(e=null,i.slideCount>i.options.slidesToShow)){for(n=!0===i.options.centerMode?i.options.slidesToShow+1:i.options.slidesToShow,t=i.slideCount;t>i.slideCount-n;--t)e=t-1,c(i.$slides[e]).clone(!0).attr("id","").attr("data-slick-index",e-i.slideCount).prependTo(i.$slideTrack).addClass("slick-cloned");for(t=0;t<n+i.slideCount;t+=1)e=t,c(i.$slides[e]).clone(!0).attr("id","").attr("data-slick-index",e+i.slideCount).appendTo(i.$slideTrack).addClass("slick-cloned");i.$slideTrack.find(".slick-cloned").find("[id]").each(function(){c(this).attr("id","")})}},s.prototype.interrupt=function(t){t||this.autoPlay(),this.interrupted=t},s.prototype.selectHandler=function(t){var e=c(t.target).is(".slick-slide")?c(t.target):c(t.target).parents(".slick-slide"),n=parseInt(e.attr("data-slick-index"));n=n||0,this.slideCount<=this.options.slidesToShow?this.slideHandler(n,!1,!0):this.slideHandler(n)},s.prototype.slideHandler=function(t,e,n){var i,o,r,s,a,l,c=this;if(e=e||!1,!(!0===c.animating&&!0===c.options.waitForAnimate||!0===c.options.fade&&c.currentSlide===t))if(!1===e&&c.asNavFor(t),i=t,a=c.getLeft(i),s=c.getLeft(c.currentSlide),c.currentLeft=null===c.swipeLeft?s:c.swipeLeft,!1===c.options.infinite&&!1===c.options.centerMode&&(t<0||t>c.getDotCount()*c.options.slidesToScroll))!1===c.options.fade&&(i=c.currentSlide,!0!==n&&c.slideCount>c.options.slidesToShow?c.animateSlide(s,function(){c.postSlide(i)}):c.postSlide(i));else if(!1===c.options.infinite&&!0===c.options.centerMode&&(t<0||t>c.slideCount-c.options.slidesToScroll))!1===c.options.fade&&(i=c.currentSlide,!0!==n&&c.slideCount>c.options.slidesToShow?c.animateSlide(s,function(){c.postSlide(i)}):c.postSlide(i));else{if(c.options.autoplay&&clearInterval(c.autoPlayTimer),o=i<0?c.slideCount%c.options.slidesToScroll!=0?c.slideCount-c.slideCount%c.options.slidesToScroll:c.slideCount+i:i>=c.slideCount?c.slideCount%c.options.slidesToScroll!=0?0:i-c.slideCount:i,c.animating=!0,c.$slider.trigger("beforeChange",[c,c.currentSlide,o]),r=c.currentSlide,c.currentSlide=o,c.setSlideClasses(c.currentSlide),c.options.asNavFor&&(l=(l=c.getNavTarget()).slick("getSlick")).slideCount<=l.options.slidesToShow&&l.setSlideClasses(c.currentSlide),c.updateDots(),c.updateArrows(),!0===c.options.fade)return!0!==n?(c.fadeSlideOut(r),c.fadeSlide(o,function(){c.postSlide(o)})):c.postSlide(o),void c.animateHeight();!0!==n&&c.slideCount>c.options.slidesToShow?c.animateSlide(a,function(){c.postSlide(o)}):c.postSlide(o)}},s.prototype.startLoad=function(){var t=this;!0===t.options.arrows&&t.slideCount>t.options.slidesToShow&&(t.$prevArrow.hide(),t.$nextArrow.hide()),!0===t.options.dots&&t.slideCount>t.options.slidesToShow&&t.$dots.hide(),t.$slider.addClass("slick-loading")},s.prototype.swipeDirection=function(){var t,e,n,i,o=this;return t=o.touchObject.startX-o.touchObject.curX,e=o.touchObject.startY-o.touchObject.curY,n=Math.atan2(e,t),(i=Math.round(180*n/Math.PI))<0&&(i=360-Math.abs(i)),i<=45&&0<=i||i<=360&&315<=i?!1===o.options.rtl?"left":"right":135<=i&&i<=225?!1===o.options.rtl?"right":"left":!0===o.options.verticalSwiping?35<=i&&i<=135?"down":"up":"vertical"},s.prototype.swipeEnd=function(t){var e,n,i=this;if(i.dragging=!1,i.swiping=!1,i.scrolling)return i.scrolling=!1;if(i.interrupted=!1,i.shouldClick=!(10<i.touchObject.swipeLength),void 0===i.touchObject.curX)return!1;if(!0===i.touchObject.edgeHit&&i.$slider.trigger("edge",[i,i.swipeDirection()]),i.touchObject.swipeLength>=i.touchObject.minSwipe){switch(n=i.swipeDirection()){case"left":case"down":e=i.options.swipeToSlide?i.checkNavigable(i.currentSlide+i.getSlideCount()):i.currentSlide+i.getSlideCount(),i.currentDirection=0;break;case"right":case"up":e=i.options.swipeToSlide?i.checkNavigable(i.currentSlide-i.getSlideCount()):i.currentSlide-i.getSlideCount(),i.currentDirection=1}"vertical"!=n&&(i.slideHandler(e),i.touchObject={},i.$slider.trigger("swipe",[i,n]))}else i.touchObject.startX!==i.touchObject.curX&&(i.slideHandler(i.currentSlide),i.touchObject={})},s.prototype.swipeHandler=function(t){var e=this;if(!(!1===e.options.swipe||"ontouchend"in document&&!1===e.options.swipe||!1===e.options.draggable&&-1!==t.type.indexOf("mouse")))switch(e.touchObject.fingerCount=t.originalEvent&&void 0!==t.originalEvent.touches?t.originalEvent.touches.length:1,e.touchObject.minSwipe=e.listWidth/e.options.touchThreshold,!0===e.options.verticalSwiping&&(e.touchObject.minSwipe=e.listHeight/e.options.touchThreshold),t.data.action){case"start":e.swipeStart(t);break;case"move":e.swipeMove(t);break;case"end":e.swipeEnd(t)}},s.prototype.swipeMove=function(t){var e,n,i,o,r,s,a=this;return r=void 0!==t.originalEvent?t.originalEvent.touches:null,!(!a.dragging||a.scrolling||r&&1!==r.length)&&(e=a.getLeft(a.currentSlide),a.touchObject.curX=void 0!==r?r[0].pageX:t.clientX,a.touchObject.curY=void 0!==r?r[0].pageY:t.clientY,a.touchObject.swipeLength=Math.round(Math.sqrt(Math.pow(a.touchObject.curX-a.touchObject.startX,2))),s=Math.round(Math.sqrt(Math.pow(a.touchObject.curY-a.touchObject.startY,2))),!a.options.verticalSwiping&&!a.swiping&&4<s?!(a.scrolling=!0):(!0===a.options.verticalSwiping&&(a.touchObject.swipeLength=s),n=a.swipeDirection(),void 0!==t.originalEvent&&4<a.touchObject.swipeLength&&(a.swiping=!0,t.preventDefault()),o=(!1===a.options.rtl?1:-1)*(a.touchObject.curX>a.touchObject.startX?1:-1),!0===a.options.verticalSwiping&&(o=a.touchObject.curY>a.touchObject.startY?1:-1),i=a.touchObject.swipeLength,(a.touchObject.edgeHit=!1)===a.options.infinite&&(0===a.currentSlide&&"right"===n||a.currentSlide>=a.getDotCount()&&"left"===n)&&(i=a.touchObject.swipeLength*a.options.edgeFriction,a.touchObject.edgeHit=!0),!1===a.options.vertical?a.swipeLeft=e+i*o:a.swipeLeft=e+i*(a.$list.height()/a.listWidth)*o,!0===a.options.verticalSwiping&&(a.swipeLeft=e+i*o),!0!==a.options.fade&&!1!==a.options.touchMove&&(!0===a.animating?(a.swipeLeft=null,!1):void a.setCSS(a.swipeLeft))))},s.prototype.swipeStart=function(t){var e,n=this;if(n.interrupted=!0,1!==n.touchObject.fingerCount||n.slideCount<=n.options.slidesToShow)return!(n.touchObject={});void 0!==t.originalEvent&&void 0!==t.originalEvent.touches&&(e=t.originalEvent.touches[0]),n.touchObject.startX=n.touchObject.curX=void 0!==e?e.pageX:t.clientX,n.touchObject.startY=n.touchObject.curY=void 0!==e?e.pageY:t.clientY,n.dragging=!0},s.prototype.unfilterSlides=s.prototype.slickUnfilter=function(){var t=this;null!==t.$slidesCache&&(t.unload(),t.$slideTrack.children(this.options.slide).detach(),t.$slidesCache.appendTo(t.$slideTrack),t.reinit())},s.prototype.unload=function(){var t=this;c(".slick-cloned",t.$slider).remove(),t.$dots&&t.$dots.remove(),t.$prevArrow&&t.htmlExpr.test(t.options.prevArrow)&&t.$prevArrow.remove(),t.$nextArrow&&t.htmlExpr.test(t.options.nextArrow)&&t.$nextArrow.remove(),t.$slides.removeClass("slick-slide slick-active slick-visible slick-current").attr("aria-hidden","true").css("width","")},s.prototype.unslick=function(t){this.$slider.trigger("unslick",[this,t]),this.destroy()},s.prototype.updateArrows=function(){var t=this;Math.floor(t.options.slidesToShow/2),!0===t.options.arrows&&t.slideCount>t.options.slidesToShow&&!t.options.infinite&&(t.$prevArrow.removeClass("slick-disabled").attr("aria-disabled","false"),t.$nextArrow.removeClass("slick-disabled").attr("aria-disabled","false"),0===t.currentSlide?(t.$prevArrow.addClass("slick-disabled").attr("aria-disabled","true"),t.$nextArrow.removeClass("slick-disabled").attr("aria-disabled","false")):(t.currentSlide>=t.slideCount-t.options.slidesToShow&&!1===t.options.centerMode||t.currentSlide>=t.slideCount-1&&!0===t.options.centerMode)&&(t.$nextArrow.addClass("slick-disabled").attr("aria-disabled","true"),t.$prevArrow.removeClass("slick-disabled").attr("aria-disabled","false")))},s.prototype.updateDots=function(){var t=this;null!==t.$dots&&(t.$dots.find("li").removeClass("slick-active").end(),t.$dots.find("li").eq(Math.floor(t.currentSlide/t.options.slidesToScroll)).addClass("slick-active"))},s.prototype.visibility=function(){this.options.autoplay&&(document[this.hidden]?this.interrupted=!0:this.interrupted=!1)},c.fn.slick=function(){var t,e,n=this,i=arguments[0],o=Array.prototype.slice.call(arguments,1),r=n.length;for(t=0;t<r;t++)if("object"==typeof i||void 0===i?n[t].slick=new s(n[t],i):e=n[t].slick[i].apply(n[t].slick,o),void 0!==e)return e;return n}}),function(p){"use strict";var f=null,h=null;!function(){var t,o,r,s,a,e=["webkit","moz","o","ms"],n=p.document.createElement("div"),i=-1;for(i=0;i<e.length&&!p.requestAnimationFrame;i++)p.requestAnimationFrame=p[e[i]+"RequestAnimationFrame"];function l(){}void 0===n.nextElementSibling&&Object.defineProperty(p.Element.prototype,"nextElementSibling",{get:function(){for(var t=this.nextSibling;t;){if(1===t.nodeType)return t;t=t.nextSibling}return null}}),(t=p.Element.prototype).matches=t.matches||t.machesSelector||t.mozMatchesSelector||t.msMatchesSelector||t.oMatchesSelector||t.webkitMatchesSelector||function(t){return-1<Array.prototype.indexOf.call(this.parentElement.querySelectorAll(t),this)},Object.keys||(Object.keys=(a=Object.prototype.hasOwnProperty,o=!{toString:null}.propertyIsEnumerable("toString"),s=(r=["toString","toLocaleString","valueOf","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","constructor"]).length,function(t){var e=[],n="",i=-1;if("object"!=typeof t&&("function"!=typeof t||null===t))throw new TypeError("Object.keys called on non-object");for(n in t)a.call(t,n)&&e.push(n);if(o)for(i=0;i<s;i++)a.call(t,r[i])&&e.push(r[i]);return e})),Array.isArray||(Array.isArray=function(t){return"[object Array]"===Object.prototype.toString.call(t)}),"function"!=typeof Object.create&&(Object.create=function(t,e){if(t!==Object(t)&&null!==t)throw TypeError("Argument must be an object, or null");l.prototype=t||{};var n=new l;return l.prototype=null,void 0!==e&&Object.defineProperties(n,e),null===t&&(n.__proto__=null),n}),String.prototype.trim||(String.prototype.trim=function(){return this.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,"")}),Array.prototype.indexOf||(Array.prototype.indexOf=function(t){var e,n,i,o;if(null===this)throw new TypeError;if(0==(o=(i=Object(this)).length>>>0))return-1;if(e=0,1<arguments.length&&((e=Number(arguments[1]))!=e?e=0:0!==e&&e!==1/0&&e!==-1/0&&(e=(0<e||-1)*Math.floor(Math.abs(e)))),o<=e)return-1;for(n=0<=e?e:Math.max(o-Math.abs(e),0);n<o;n++)if(n in i&&i[n]===t)return n;return-1}),Function.prototype.bind||(Function.prototype.bind=function(t){var e,n,i,o;if("function"!=typeof this)throw new TypeError;return e=Array.prototype.slice.call(arguments,1),i=function(){},o=function(){return n.apply(this instanceof i?this:t,e.concat(Array.prototype.slice.call(arguments)))},(n=this).prototype&&(i.prototype=this.prototype),o.prototype=new i,o}),p.Element.prototype.dispatchEvent||(p.Element.prototype.dispatchEvent=function(t){try{return this.fireEvent("on"+t.type,t)}catch(t){}})}(),(f=function(t,e,n){var i=null,o=!1,r=null,s=null,a=null,l=[],c="",u=[],d=-1;if(a=n||p.document,(o=arguments[3])&&(o="boolean"==typeof o),"string"==typeof t)u=a.querySelectorAll(t);else if(t&&"object"==typeof t&&h.isElement(t,a))u=[t];else{if(!t||"object"!=typeof t||!t.length)throw new Error(f.messages.errorFactoryInvalidContainer());u=t}if(u.length<1)throw new Error(f.messages.errorFactoryContainerNotFound());for(d=0;(i=u[d])&&(!(0<d)||o);d++)i.id?c=i.id:(c="MixItUp"+h.randomHex(),i.id=c),f.instances[c]instanceof f.Mixer?(r=f.instances[c],(!e||e&&e.debug&&!1!==e.debug.showWarnings)&&console.warn(f.messages.warningFactoryPreexistingInstance())):((r=new f.Mixer).attach(i,a,c,e),f.instances[c]=r),s=new f.Facade(r),e&&e.debug&&e.debug.enable?l.push(r):l.push(s);return o?new f.Collection(l):l[0]}).use=function(t){f.Base.prototype.callActions.call(f,"beforeUse",arguments),"function"==typeof t&&"mixitup-extension"===t.TYPE?void 0===f.extensions[t.NAME]&&(t(f),f.extensions[t.NAME]=t):t.fn&&t.fn.jquery&&(f.libraries.$=t),f.Base.prototype.callActions.call(f,"afterUse",arguments)},f.instances={},f.extensions={},f.libraries={},h={hasClass:function(t,e){return!!t.className.match(new RegExp("(\\s|^)"+e+"(\\s|$)"))},addClass:function(t,e){this.hasClass(t,e)||(t.className+=t.className?" "+e:e)},removeClass:function(t,e){if(this.hasClass(t,e)){var n=new RegExp("(\\s|^)"+e+"(\\s|$)");t.className=t.className.replace(n," ").trim()}},extend:function(e,t,n,i){var o=[],r="",s=-1;n=n||!1,i=i||!1;try{if(Array.isArray(t))for(s=0;s<t.length;s++)o.push(s);else t&&(o=Object.keys(t));for(s=0;s<o.length;s++)r=o[s],!n||"object"!=typeof t[r]||this.isElement(t[r])?e[r]=t[r]:(Array.isArray(t[r])?e[r]||(e[r]=[]):e[r]||(e[r]={}),this.extend(e[r],t[r],n,i))}catch(t){if(!i)throw t;this.handleExtendError(t,e)}return e},handleExtendError:function(t,e){var n=null,i="",o="",r="",s="",a="",l=-1,c=-1;if(t instanceof TypeError&&(n=/property "?(\w*)"?[,:] object/i.exec(t.message))){for(a in i=n[1],e){for(c=0;c<i.length&&i.charAt(c)===a.charAt(c);)c++;l<c&&(l=c,s=a)}throw 1<l&&(r=f.messages.errorConfigInvalidPropertySuggestion({probableMatch:s})),o=f.messages.errorConfigInvalidProperty({erroneous:i,suggestion:r}),new TypeError(o)}throw t},template:function(i){for(var t=/\${([\w]*)}/g,o={},e=null;e=t.exec(i);)o[e[1]]=new RegExp("\\${"+e[1]+"}","g");return function(t){var e="",n=i;for(e in t=t||{},o)n=n.replace(o[e],void 0!==t[e]?t[e]:"");return n}},on:function(t,e,n,i){t&&(t.addEventListener?t.addEventListener(e,n,i):t.attachEvent&&(t["e"+e+n]=n,t[e+n]=function(){t["e"+e+n](p.event)},t.attachEvent("on"+e,t[e+n])))},off:function(t,e,n){t&&(t.removeEventListener?t.removeEventListener(e,n,!1):t.detachEvent&&(t.detachEvent("on"+e,t[e+n]),t[e+n]=null))},getCustomEvent:function(t,e,n){var i=null;return n=n||p.document,"function"==typeof p.CustomEvent?i=new p.CustomEvent(t,{detail:e,bubbles:!0,cancelable:!0}):"function"==typeof n.createEvent?(i=n.createEvent("CustomEvent")).initCustomEvent(t,!0,!0,e):((i=n.createEventObject()).type=t,i.returnValue=!1,i.cancelBubble=!1,i.detail=e),i},getOriginalEvent:function(t){return t.touches&&t.touches.length?t.touches[0]:t.changedTouches&&t.changedTouches.length?t.changedTouches[0]:t},index:function(t,e){for(var n=0;null!==(t=t.previousElementSibling);)e&&!t.matches(e)||++n;return n},camelCase:function(t){return t.toLowerCase().replace(/([_-][a-z])/g,function(t){return t.toUpperCase().replace(/[_-]/,"")})},pascalCase:function(t){return(t=this.camelCase(t)).charAt(0).toUpperCase()+t.slice(1)},dashCase:function(t){return t.replace(/([A-Z])/g,"-$1").replace(/^-/,"").toLowerCase()},isElement:function(t,e){return e=e||p.document,!!(p.HTMLElement&&t instanceof p.HTMLElement)||(!!(e.defaultView&&e.defaultView.HTMLElement&&t instanceof e.defaultView.HTMLElement)||null!==t&&1===t.nodeType&&"string"==typeof t.nodeName)},createElement:function(t,e){var n=null,i=null;for(n=(e=e||p.document).createDocumentFragment(),(i=e.createElement("div")).innerHTML=t.trim();i.firstChild;)n.appendChild(i.firstChild);return n},removeWhitespace:function(t){for(var e;t&&"#text"===t.nodeName;)t=(e=t).previousSibling,e.parentElement&&e.parentElement.removeChild(e)},isEqualArray:function(t,e){var n=t.length;if(n!==e.length)return!1;for(;n--;)if(t[n]!==e[n])return!1;return!0},deepEquals:function(t,e){var n;if("object"==typeof t&&t&&"object"==typeof e&&e){if(Object.keys(t).length!==Object.keys(e).length)return!1;for(n in t)if(!e.hasOwnProperty(n)||!this.deepEquals(t[n],e[n]))return!1}else if(t!==e)return!1;return!0},arrayShuffle:function(t){for(var e=t.slice(),n=e.length,i=n,o=-1,r=[];i--;)o=~~(Math.random()*n),r=e[i],e[i]=e[o],e[o]=r;return e},arrayFromList:function(e){var n,i;try{return Array.prototype.slice.call(e)}catch(t){for(n=[],i=0;i<e.length;i++)n.push(e[i]);return n}},debounce:function(o,r,s){var a;return function(){var t,e=this,n=arguments,i=s&&!a;t=function(){a=null,s||o.apply(e,n)},clearTimeout(a),a=setTimeout(t,r),i&&o.apply(e,n)}},position:function(t){for(var e=0,n=0,i=t;t;)e-=t.scrollLeft,n-=t.scrollTop,t===i&&(e+=t.offsetLeft,n+=t.offsetTop,i=t.offsetParent),t=t.parentElement;return{x:e,y:n}},getHypotenuse:function(t,e){var n=t.x-e.x,i=t.y-e.y;return n=n<0?-1*n:n,i=i<0?-1*i:i,Math.sqrt(Math.pow(n,2)+Math.pow(i,2))},getIntersectionRatio:function(t,e){var n,i=t.width*t.height;return n=Math.max(0,Math.min(t.left+t.width,e.left+e.width)-Math.max(t.left,e.left)),Math.max(0,Math.min(t.top+t.height,e.top+e.height)-Math.max(t.top,e.top))*n/i},closestParent:function(t,e,n,i){var o=t.parentNode;if(i=i||p.document,n&&t.matches(e))return t;for(;o&&o!=i.body;){if(o.matches&&o.matches(e))return o;if(!o.parentNode)return null;o=o.parentNode}return null},children:function(t,e,n){var i=[],o="";return n=n||p.doc,t&&(t.id||(o="Temp"+this.randomHexKey(),t.id=o),i=n.querySelectorAll("#"+t.id+" > "+e),o&&t.removeAttribute("id")),i},clean:function(t){var e=[],n=-1;for(n=0;n<t.length;n++)""!==t[n]&&e.push(t[n]);return e},defer:function(t){var e=null,n=null,i=null;return n=new this.Deferred,f.features.has.promises?n.promise=new Promise(function(t,e){n.resolve=t,n.reject=e}):(i=p.jQuery||t.$)&&"function"==typeof i.Deferred?(e=i.Deferred(),n.promise=e.promise(),n.resolve=e.resolve,n.reject=e.reject):p.console&&console.warn(f.messages.warningNoPromiseImplementation()),n},all:function(t,e){var n=null;return f.features.has.promises?Promise.all(t):(n=p.jQuery||e.$)&&"function"==typeof n.when?n.when.apply(n,t).done(function(){return arguments}):(p.console&&console.warn(f.messages.warningNoPromiseImplementation()),[])},getPrefix:function(t,e,n){var i=-1,o="";if(h.dashCase(e)in t.style)return"";for(i=0;o=n[i];i++)if(o+e in t.style)return o.toLowerCase();return"unsupported"},randomHex:function(){return("00000"+(16777216*Math.random()<<0).toString(16)).substr(-6).toUpperCase()},getDocumentState:function(t){return t="object"==typeof t.body?t:p.document,{scrollTop:p.pageYOffset,scrollLeft:p.pageXOffset,docHeight:t.documentElement.scrollHeight,docWidth:t.documentElement.scrollWidth,viewportHeight:t.documentElement.clientHeight,viewportWidth:t.documentElement.clientWidth}},bind:function(t,e){return function(){return e.apply(t,arguments)}},isVisible:function(t){var e;return!!t.offsetParent||"fixed"===(e=p.getComputedStyle(t)).position&&"hidden"!==e.visibility&&"0"!==e.opacity},seal:function(t){"function"==typeof Object.seal&&Object.seal(t)},freeze:function(t){"function"==typeof Object.freeze&&Object.freeze(t)},compareVersions:function(t,e){var n=t.split("."),i=e.split("."),o=-1,r=-1,s=-1;for(s=0;s<n.length;s++){if(o=parseInt(n[s].replace(/[^\d.]/g,"")),(r=parseInt(i[s].replace(/[^\d.]/g,"")||0))<o)return!1;if(o<r)return!0}return!0},Deferred:function(){this.promise=null,this.resolve=null,this.reject=null,this.id=h.randomHex()},isEmptyObject:function(t){var e="";if("function"==typeof Object.keys)return 0===Object.keys(t).length;for(e in t)if(t.hasOwnProperty(e))return!1;return!0},getClassname:function(t,e,n){var i="";return(i+=t.block).length&&(i+=t.delineatorElement),i+=t["element"+this.pascalCase(e)],n?(i.length&&(i+=t.delineatorModifier),i+=n):i},getProperty:function(t,e){var n,i=e.split("."),o="",r=0;if(!e)return t;for(n=function(t){return t?t[o]:null};r<i.length;)o=i[r],t=n(t),r++;return void 0!==t?t:null}},f.h=h,f.Base=function(){},f.Base.prototype={constructor:f.Base,callActions:function(t,e){var n=this.constructor.actions[t],i="";if(n&&!h.isEmptyObject(n))for(i in n)n[i].apply(this,e)},callFilters:function(t,e,n){var i=this.constructor.filters[t],o=e,r="";if(!i||h.isEmptyObject(i))return o;for(r in n=n||[],i)(n=h.arrayFromList(n)).unshift(o),o=i[r].apply(this,n);return o}},f.BaseStatic=function(){this.actions={},this.filters={},this.extend=function(t){h.extend(this.prototype,t)},this.registerAction=function(t,e,n){(this.actions[t]=this.actions[t]||{})[e]=n},this.registerFilter=function(t,e,n){(this.filters[t]=this.filters[t]||{})[e]=n}},f.Features=function(){f.Base.call(this),this.callActions("beforeConstruct"),this.boxSizingPrefix="",this.transformPrefix="",this.transitionPrefix="",this.boxSizingPrefix="",this.transformProp="",this.transformRule="",this.transitionProp="",this.perspectiveProp="",this.perspectiveOriginProp="",this.has=new f.Has,this.canary=null,this.BOX_SIZING_PROP="boxSizing",this.TRANSITION_PROP="transition",this.TRANSFORM_PROP="transform",this.PERSPECTIVE_PROP="perspective",this.PERSPECTIVE_ORIGIN_PROP="perspectiveOrigin",this.VENDORS=["Webkit","moz","O","ms"],this.TWEENABLE=["opacity","width","height","marginRight","marginBottom","x","y","scale","translateX","translateY","translateZ","rotateX","rotateY","rotateZ"],this.callActions("afterConstruct")},f.BaseStatic.call(f.Features),f.Features.prototype=Object.create(f.Base.prototype),h.extend(f.Features.prototype,{constructor:f.Features,init:function(){var t=this;t.callActions("beforeInit",arguments),t.canary=document.createElement("div"),t.setPrefixes(),t.runTests(),t.callActions("beforeInit",arguments)},runTests:function(){var t=this;t.callActions("beforeRunTests",arguments),t.has.promises="function"==typeof p.Promise,t.has.transitions="unsupported"!==t.transitionPrefix,t.callActions("afterRunTests",arguments),h.freeze(t.has)},setPrefixes:function(){var t=this;t.callActions("beforeSetPrefixes",arguments),t.transitionPrefix=h.getPrefix(t.canary,"Transition",t.VENDORS),t.transformPrefix=h.getPrefix(t.canary,"Transform",t.VENDORS),t.boxSizingPrefix=h.getPrefix(t.canary,"BoxSizing",t.VENDORS),t.boxSizingProp=t.boxSizingPrefix?t.boxSizingPrefix+h.pascalCase(t.BOX_SIZING_PROP):t.BOX_SIZING_PROP,t.transitionProp=t.transitionPrefix?t.transitionPrefix+h.pascalCase(t.TRANSITION_PROP):t.TRANSITION_PROP,t.transformProp=t.transformPrefix?t.transformPrefix+h.pascalCase(t.TRANSFORM_PROP):t.TRANSFORM_PROP,t.transformRule=t.transformPrefix?"-"+t.transformPrefix+"-"+t.TRANSFORM_PROP:t.TRANSFORM_PROP,t.perspectiveProp=t.transformPrefix?t.transformPrefix+h.pascalCase(t.PERSPECTIVE_PROP):t.PERSPECTIVE_PROP,t.perspectiveOriginProp=t.transformPrefix?t.transformPrefix+h.pascalCase(t.PERSPECTIVE_ORIGIN_PROP):t.PERSPECTIVE_ORIGIN_PROP,t.callActions("afterSetPrefixes",arguments)}}),f.Has=function(){this.transitions=!1,this.promises=!1,h.seal(this)},f.features=new f.Features,f.features.init(),f.ConfigAnimation=function(){f.Base.call(this),this.callActions("beforeConstruct"),this.enable=!0,this.effects="fade scale",this.effectsIn="",this.effectsOut="",this.duration=600,this.easing="ease",this.applyPerspective=!0,this.perspectiveDistance="3000px",this.perspectiveOrigin="50% 50%",this.queue=!0,this.queueLimit=3,this.animateResizeContainer=!0,this.animateResizeTargets=!1,this.staggerSequence=null,this.reverseOut=!1,this.nudge=!0,this.clampHeight=!0,this.clampWidth=!0,this.callActions("afterConstruct"),h.seal(this)},f.BaseStatic.call(f.ConfigAnimation),f.ConfigAnimation.prototype=Object.create(f.Base.prototype),f.ConfigAnimation.prototype.constructor=f.ConfigAnimation,f.ConfigBehavior=function(){f.Base.call(this),this.callActions("beforeConstruct"),this.liveSort=!1,this.callActions("afterConstruct"),h.seal(this)},f.BaseStatic.call(f.ConfigBehavior),f.ConfigBehavior.prototype=Object.create(f.Base.prototype),f.ConfigBehavior.prototype.constructor=f.ConfigBehavior,f.ConfigCallbacks=function(){f.Base.call(this),this.callActions("beforeConstruct"),this.onMixStart=null,this.onMixBusy=null,this.onMixEnd=null,this.onMixFail=null,this.onMixClick=null,this.callActions("afterConstruct"),h.seal(this)},f.BaseStatic.call(f.ConfigCallbacks),f.ConfigCallbacks.prototype=Object.create(f.Base.prototype),f.ConfigCallbacks.prototype.constructor=f.ConfigCallbacks,f.ConfigControls=function(){f.Base.call(this),this.callActions("beforeConstruct"),this.enable=!0,this.live=!1,this.scope="global",this.toggleLogic="or",this.toggleDefault="all",this.callActions("afterConstruct"),h.seal(this)},f.BaseStatic.call(f.ConfigControls),f.ConfigControls.prototype=Object.create(f.Base.prototype),f.ConfigControls.prototype.constructor=f.ConfigControls,f.ConfigClassNames=function(){f.Base.call(this),this.callActions("beforeConstruct"),this.block="mixitup",this.elementContainer="container",this.elementFilter="control",this.elementSort="control",this.elementMultimix="control",this.elementToggle="control",this.modifierActive="active",this.modifierDisabled="disabled",this.modifierFailed="failed",this.delineatorElement="-",this.delineatorModifier="-",this.callActions("afterConstruct"),h.seal(this)},f.BaseStatic.call(f.ConfigClassNames),f.ConfigClassNames.prototype=Object.create(f.Base.prototype),f.ConfigClassNames.prototype.constructor=f.ConfigClassNames,f.ConfigData=function(){f.Base.call(this),this.callActions("beforeConstruct"),this.uidKey="",this.dirtyCheck=!1,this.callActions("afterConstruct"),h.seal(this)},f.BaseStatic.call(f.ConfigData),f.ConfigData.prototype=Object.create(f.Base.prototype),f.ConfigData.prototype.constructor=f.ConfigData,f.ConfigDebug=function(){f.Base.call(this),this.callActions("beforeConstruct"),this.enable=!1,this.showWarnings=!0,this.fauxAsync=!1,this.callActions("afterConstruct"),h.seal(this)},f.BaseStatic.call(f.ConfigDebug),f.ConfigDebug.prototype=Object.create(f.Base.prototype),f.ConfigDebug.prototype.constructor=f.ConfigDebug,f.ConfigLayout=function(){f.Base.call(this),this.callActions("beforeConstruct"),this.allowNestedTargets=!0,this.containerClassName="",this.siblingBefore=null,this.siblingAfter=null,this.callActions("afterConstruct"),h.seal(this)},f.BaseStatic.call(f.ConfigLayout),f.ConfigLayout.prototype=Object.create(f.Base.prototype),f.ConfigLayout.prototype.constructor=f.ConfigLayout,f.ConfigLoad=function(){f.Base.call(this),this.callActions("beforeConstruct"),this.filter="all",this.sort="default:asc",this.dataset=null,this.callActions("afterConstruct"),h.seal(this)},f.BaseStatic.call(f.ConfigLoad),f.ConfigLoad.prototype=Object.create(f.Base.prototype),f.ConfigLoad.prototype.constructor=f.ConfigLoad,f.ConfigSelectors=function(){f.Base.call(this),this.callActions("beforeConstruct"),this.target=".mix",this.control="",this.callActions("afterConstruct"),h.seal(this)},f.BaseStatic.call(f.ConfigSelectors),f.ConfigSelectors.prototype=Object.create(f.Base.prototype),f.ConfigSelectors.prototype.constructor=f.ConfigSelectors,f.ConfigRender=function(){f.Base.call(this),this.callActions("beforeConstruct"),this.target=null,this.callActions("afterConstruct"),h.seal(this)},f.BaseStatic.call(f.ConfigRender),f.ConfigRender.prototype=Object.create(f.Base.prototype),f.ConfigRender.prototype.constructor=f.ConfigRender,f.ConfigTemplates=function(){f.Base.call(this),this.callActions("beforeConstruct"),this.callActions("afterConstruct"),h.seal(this)},f.BaseStatic.call(f.ConfigTemplates),f.ConfigTemplates.prototype=Object.create(f.Base.prototype),f.ConfigTemplates.prototype.constructor=f.ConfigTemplates,f.Config=function(){f.Base.call(this),this.callActions("beforeConstruct"),this.animation=new f.ConfigAnimation,this.behavior=new f.ConfigBehavior,this.callbacks=new f.ConfigCallbacks,this.controls=new f.ConfigControls,this.classNames=new f.ConfigClassNames,this.data=new f.ConfigData,this.debug=new f.ConfigDebug,this.layout=new f.ConfigLayout,this.load=new f.ConfigLoad,this.selectors=new f.ConfigSelectors,this.render=new f.ConfigRender,this.templates=new f.ConfigTemplates,this.callActions("afterConstruct"),h.seal(this)},f.BaseStatic.call(f.Config),f.Config.prototype=Object.create(f.Base.prototype),f.Config.prototype.constructor=f.Config,f.MixerDom=function(){f.Base.call(this),this.callActions("beforeConstruct"),this.document=null,this.body=null,this.container=null,this.parent=null,this.targets=[],this.callActions("afterConstruct"),h.seal(this)},f.BaseStatic.call(f.MixerDom),f.MixerDom.prototype=Object.create(f.Base.prototype),f.MixerDom.prototype.constructor=f.MixerDom,f.UiClassNames=function(){f.Base.call(this),this.callActions("beforeConstruct"),this.base="",this.active="",this.disabled="",this.callActions("afterConstruct"),h.seal(this)},f.BaseStatic.call(f.UiClassNames),f.UiClassNames.prototype=Object.create(f.Base.prototype),f.UiClassNames.prototype.constructor=f.UiClassNames,f.CommandDataset=function(){f.Base.call(this),this.callActions("beforeConstruct"),this.dataset=null,this.callActions("afterConstruct"),h.seal(this)},f.BaseStatic.call(f.CommandDataset),f.CommandDataset.prototype=Object.create(f.Base.prototype),f.CommandDataset.prototype.constructor=f.CommandDataset,f.CommandMultimix=function(){f.Base.call(this),this.callActions("beforeConstruct"),this.filter=null,this.sort=null,this.insert=null,this.remove=null,this.changeLayout=null,this.callActions("afterConstruct"),h.seal(this)},f.BaseStatic.call(f.CommandMultimix),f.CommandMultimix.prototype=Object.create(f.Base.prototype),f.CommandMultimix.prototype.constructor=f.CommandMultimix,f.CommandFilter=function(){f.Base.call(this),this.callActions("beforeConstruct"),this.selector="",this.collection=null,this.action="show",this.callActions("afterConstruct"),h.seal(this)},f.BaseStatic.call(f.CommandFilter),f.CommandFilter.prototype=Object.create(f.Base.prototype),f.CommandFilter.prototype.constructor=f.CommandFilter,f.CommandSort=function(){f.Base.call(this),this.callActions("beforeConstruct"),this.sortString="",this.attribute="",this.order="asc",this.collection=null,this.next=null,this.callActions("afterConstruct"),h.seal(this)},f.BaseStatic.call(f.CommandSort),f.CommandSort.prototype=Object.create(f.Base.prototype),f.CommandSort.prototype.constructor=f.CommandSort,f.CommandInsert=function(){f.Base.call(this),this.callActions("beforeConstruct"),this.index=0,this.collection=[],this.position="before",this.sibling=null,this.callActions("afterConstruct"),h.seal(this)},f.BaseStatic.call(f.CommandInsert),f.CommandInsert.prototype=Object.create(f.Base.prototype),f.CommandInsert.prototype.constructor=f.CommandInsert,f.CommandRemove=function(){f.Base.call(this),this.callActions("beforeConstruct"),this.targets=[],this.collection=[],this.callActions("afterConstruct"),h.seal(this)},f.BaseStatic.call(f.CommandRemove),f.CommandRemove.prototype=Object.create(f.Base.prototype),f.CommandRemove.prototype.constructor=f.CommandRemove,f.CommandChangeLayout=function(){f.Base.call(this),this.callActions("beforeConstruct"),this.containerClassName="",this.callActions("afterConstruct"),h.seal(this)},f.BaseStatic.call(f.CommandChangeLayout),f.CommandChangeLayout.prototype=Object.create(f.Base.prototype),f.CommandChangeLayout.prototype.constructor=f.CommandChangeLayout,f.ControlDefinition=function(t,e,n,i){f.Base.call(this),this.callActions("beforeConstruct"),this.type=t,this.selector=e,this.live=n||!1,this.parent=i||"",this.callActions("afterConstruct"),h.freeze(this),h.seal(this)},f.BaseStatic.call(f.ControlDefinition),f.ControlDefinition.prototype=Object.create(f.Base.prototype),f.ControlDefinition.prototype.constructor=f.ControlDefinition,f.controlDefinitions=[],f.controlDefinitions.push(new f.ControlDefinition("multimix","[data-filter][data-sort]")),f.controlDefinitions.push(new f.ControlDefinition("filter","[data-filter]")),f.controlDefinitions.push(new f.ControlDefinition("sort","[data-sort]")),f.controlDefinitions.push(new f.ControlDefinition("toggle","[data-toggle]")),f.Control=function(){f.Base.call(this),this.callActions("beforeConstruct"),this.el=null,this.selector="",this.bound=[],this.pending=-1,this.type="",this.status="inactive",this.filter="",this.sort="",this.canDisable=!1,this.handler=null,this.classNames=new f.UiClassNames,this.callActions("afterConstruct"),h.seal(this)},f.BaseStatic.call(f.Control),f.Control.prototype=Object.create(f.Base.prototype),h.extend(f.Control.prototype,{constructor:f.Control,init:function(t,e,n){var i=this;if(this.callActions("beforeInit",arguments),i.el=t,i.type=e,i.selector=n,i.selector)i.status="live";else switch(i.canDisable="boolean"==typeof i.el.disable,i.type){case"filter":i.filter=i.el.getAttribute("data-filter");break;case"toggle":i.filter=i.el.getAttribute("data-toggle");break;case"sort":i.sort=i.el.getAttribute("data-sort");break;case"multimix":i.filter=i.el.getAttribute("data-filter"),i.sort=i.el.getAttribute("data-sort")}i.bindClick(),f.controls.push(i),this.callActions("afterInit",arguments)},isBound:function(t){var e;return this.callActions("beforeIsBound",arguments),e=-1<this.bound.indexOf(t),this.callFilters("afterIsBound",e,arguments)},addBinding:function(t){this.callActions("beforeAddBinding",arguments),this.isBound()||this.bound.push(t),this.callActions("afterAddBinding",arguments)},removeBinding:function(t){var e=this,n=-1;this.callActions("beforeRemoveBinding",arguments),-1<(n=e.bound.indexOf(t))&&e.bound.splice(n,1),e.bound.length<1&&(e.unbindClick(),n=f.controls.indexOf(e),f.controls.splice(n,1),"active"===e.status&&e.renderStatus(e.el,"inactive")),this.callActions("afterRemoveBinding",arguments)},bindClick:function(){var e=this;this.callActions("beforeBindClick",arguments),e.handler=function(t){e.handleClick(t)},h.on(e.el,"click",e.handler),this.callActions("afterBindClick",arguments)},unbindClick:function(){this.callActions("beforeUnbindClick",arguments),h.off(this.el,"click",this.handler),this.handler=null,this.callActions("afterUnbindClick",arguments)},handleClick:function(t){var e=this,n=null,i=null,o=!1,r={},s=null,a=[],l=-1;if(this.callActions("beforeHandleClick",arguments),this.pending=0,i=e.bound[0],n=e.selector?h.closestParent(t.target,i.config.selectors.control+e.selector,!0,i.dom.document):e.el){switch(e.type){case"filter":r.filter=e.filter||n.getAttribute("data-filter");break;case"sort":r.sort=e.sort||n.getAttribute("data-sort");break;case"multimix":r.filter=e.filter||n.getAttribute("data-filter"),r.sort=e.sort||n.getAttribute("data-sort");break;case"toggle":r.filter=e.filter||n.getAttribute("data-toggle"),o="live"===e.status?h.hasClass(n,e.classNames.active):"active"===e.status}for(l=0;l<e.bound.length;l++)s=new f.CommandMultimix,h.extend(s,r),a.push(s);for(a=e.callFilters("commandsHandleClick",a,arguments),e.pending=e.bound.length,l=0;i=e.bound[l];l++)(r=a[l])&&(i.lastClicked||(i.lastClicked=n),f.events.fire("mixClick",i.dom.container,{state:i.state,instance:i,originalEvent:t,control:i.lastClicked},i.dom.document),"function"==typeof i.config.callbacks.onMixClick&&!1===i.config.callbacks.onMixClick.call(i.lastClicked,i.state,t,i)||("toggle"===e.type?o?i.toggleOff(r.filter):i.toggleOn(r.filter):i.multimix(r)));this.callActions("afterHandleClick",arguments)}else e.callActions("afterHandleClick",arguments)},update:function(t,e){var n=this,i=new f.CommandMultimix;n.callActions("beforeUpdate",arguments),n.pending--,n.pending=Math.max(0,n.pending),0<n.pending||("live"===n.status?n.updateLive(t,e):(i.sort=n.sort,i.filter=n.filter,n.callFilters("actionsUpdate",i,arguments),n.parseStatusChange(n.el,t,i,e)),n.callActions("afterUpdate",arguments))},updateLive:function(t,e){var n,i=this,o=null,r=null,s=-1;if(i.callActions("beforeUpdateLive",arguments),i.el){for(n=i.el.querySelectorAll(i.selector),s=0;r=n[s];s++){switch(o=new f.CommandMultimix,i.type){case"filter":o.filter=r.getAttribute("data-filter");break;case"sort":o.sort=r.getAttribute("data-sort");break;case"multimix":o.filter=r.getAttribute("data-filter"),o.sort=r.getAttribute("data-sort");break;case"toggle":o.filter=r.getAttribute("data-toggle")}o=i.callFilters("actionsUpdateLive",o,arguments),i.parseStatusChange(r,t,o,e)}i.callActions("afterUpdateLive",arguments)}},parseStatusChange:function(t,e,n,i){var o=this,r="",s=-1;switch(o.callActions("beforeParseStatusChange",arguments),o.type){case"filter":e.filter===n.filter?o.renderStatus(t,"active"):o.renderStatus(t,"inactive");break;case"multimix":e.sort===n.sort&&e.filter===n.filter?o.renderStatus(t,"active"):o.renderStatus(t,"inactive");break;case"sort":e.sort.match(/:asc/g)&&(r=e.sort.replace(/:asc/g,"")),e.sort===n.sort||r===n.sort?o.renderStatus(t,"active"):o.renderStatus(t,"inactive");break;case"toggle":for(i.length<1&&o.renderStatus(t,"inactive"),e.filter===n.filter&&o.renderStatus(t,"active"),s=0;s<i.length;s++){if(i[s]===n.filter){o.renderStatus(t,"active");break}o.renderStatus(t,"inactive")}}o.callActions("afterParseStatusChange",arguments)},renderStatus:function(t,e){var n=this;switch(n.callActions("beforeRenderStatus",arguments),e){case"active":h.addClass(t,n.classNames.active),h.removeClass(t,n.classNames.disabled),n.canDisable&&(n.el.disabled=!1);break;case"inactive":h.removeClass(t,n.classNames.active),h.removeClass(t,n.classNames.disabled),n.canDisable&&(n.el.disabled=!1);break;case"disabled":n.canDisable&&(n.el.disabled=!0),h.addClass(t,n.classNames.disabled),h.removeClass(t,n.classNames.active)}"live"!==n.status&&(n.status=e),n.callActions("afterRenderStatus",arguments)}}),f.controls=[],f.StyleData=function(){f.Base.call(this),this.callActions("beforeConstruct"),this.x=0,this.y=0,this.top=0,this.right=0,this.bottom=0,this.left=0,this.width=0,this.height=0,this.marginRight=0,this.marginBottom=0,this.opacity=0,this.scale=new f.TransformData,this.translateX=new f.TransformData,this.translateY=new f.TransformData,this.translateZ=new f.TransformData,this.rotateX=new f.TransformData,this.rotateY=new f.TransformData,this.rotateZ=new f.TransformData,this.callActions("afterConstruct"),h.seal(this)},f.BaseStatic.call(f.StyleData),f.StyleData.prototype=Object.create(f.Base.prototype),f.StyleData.prototype.constructor=f.StyleData,f.TransformData=function(){f.Base.call(this),this.callActions("beforeConstruct"),this.value=0,this.unit="",this.callActions("afterConstruct"),h.seal(this)},f.BaseStatic.call(f.TransformData),f.TransformData.prototype=Object.create(f.Base.prototype),f.TransformData.prototype.constructor=f.TransformData,f.TransformDefaults=function(){f.StyleData.apply(this),this.callActions("beforeConstruct"),this.scale.value=.01,this.scale.unit="",this.translateX.value=20,this.translateX.unit="px",this.translateY.value=20,this.translateY.unit="px",this.translateZ.value=20,this.translateZ.unit="px",this.rotateX.value=90,this.rotateX.unit="deg",this.rotateY.value=90,this.rotateY.unit="deg",this.rotateX.value=90,this.rotateX.unit="deg",this.rotateZ.value=180,this.rotateZ.unit="deg",this.callActions("afterConstruct"),h.seal(this)},f.BaseStatic.call(f.TransformDefaults),f.TransformDefaults.prototype=Object.create(f.StyleData.prototype),f.TransformDefaults.prototype.constructor=f.TransformDefaults,f.transformDefaults=new f.TransformDefaults,f.EventDetail=function(){this.state=null,this.futureState=null,this.instance=null,this.originalEvent=null},f.Events=function(){f.Base.call(this),this.callActions("beforeConstruct"),this.mixStart=null,this.mixBusy=null,this.mixEnd=null,this.mixFail=null,this.mixClick=null,this.callActions("afterConstruct"),h.seal(this)},f.BaseStatic.call(f.Events),f.Events.prototype=Object.create(f.Base.prototype),f.Events.prototype.constructor=f.Events,f.Events.prototype.fire=function(t,e,n,i){var o,r=new f.EventDetail;if(this.callActions("beforeFire",arguments),void 0===this[t])throw new Error('Event type "'+t+'" not found.');r.state=new f.State,h.extend(r.state,n.state),n.futureState&&(r.futureState=new f.State,h.extend(r.futureState,n.futureState)),r.instance=n.instance,n.originalEvent&&(r.originalEvent=n.originalEvent),o=h.getCustomEvent(t,r,i),this.callFilters("eventFire",o,arguments),e.dispatchEvent(o)},f.events=new f.Events,f.QueueItem=function(){f.Base.call(this),this.callActions("beforeConstruct"),this.args=[],this.instruction=null,this.triggerElement=null,this.deferred=null,this.isToggling=!1,this.callActions("afterConstruct"),h.seal(this)},f.BaseStatic.call(f.QueueItem),f.QueueItem.prototype=Object.create(f.Base.prototype),f.QueueItem.prototype.constructor=f.QueueItem,f.Mixer=function(){f.Base.call(this),this.callActions("beforeConstruct"),this.config=new f.Config,this.id="",this.isBusy=!1,this.isToggling=!1,this.incPadding=!0,this.controls=[],this.targets=[],this.origOrder=[],this.cache={},this.toggleArray=[],this.targetsMoved=0,this.targetsImmovable=0,this.targetsBound=0,this.targetsDone=0,this.staggerDuration=0,this.effectsIn=null,this.effectsOut=null,this.transformIn=[],this.transformOut=[],this.queue=[],this.state=null,this.lastOperation=null,this.lastClicked=null,this.userCallback=null,this.userDeferred=null,this.dom=new f.MixerDom,this.callActions("afterConstruct"),h.seal(this)},f.BaseStatic.call(f.Mixer),f.Mixer.prototype=Object.create(f.Base.prototype),h.extend(f.Mixer.prototype,{constructor:f.Mixer,attach:function(t,e,n,i){var o=this,r=null,s=-1;for(o.callActions("beforeAttach",arguments),o.id=n,i&&h.extend(o.config,i,!0,!0),o.sanitizeConfig(),o.cacheDom(t,e),o.config.layout.containerClassName&&h.addClass(o.dom.container,o.config.layout.containerClassName),f.features.has.transitions||(o.config.animation.enable=!1),void 0===p.console&&(o.config.debug.showWarnings=!1),o.config.data.uidKey&&(o.config.controls.enable=!1),o.indexTargets(),o.state=o.getInitialState(),s=0;r=o.lastOperation.toHide[s];s++)r.hide();o.config.controls.enable&&(o.initControls(),o.buildToggleArray(null,o.state),o.updateControls({filter:o.state.activeFilter,sort:o.state.activeSort})),o.parseEffects(),o.callActions("afterAttach",arguments)},sanitizeConfig:function(){var t=this;t.callActions("beforeSanitizeConfig",arguments),t.config.controls.scope=t.config.controls.scope.toLowerCase().trim(),t.config.controls.toggleLogic=t.config.controls.toggleLogic.toLowerCase().trim(),t.config.controls.toggleDefault=t.config.controls.toggleDefault.toLowerCase().trim(),t.config.animation.effects=t.config.animation.effects.trim(),t.callActions("afterSanitizeConfig",arguments)},getInitialState:function(){var t=this,e=new f.State,n=new f.Operation;if(t.callActions("beforeGetInitialState",arguments),e.activeContainerClassName=t.config.layout.containerClassName,t.config.load.dataset){if(!t.config.data.uidKey||"string"!=typeof t.config.data.uidKey)throw new TypeError(f.messages.errorConfigDataUidKeyNotSet());n.startDataset=n.newDataset=e.activeDataset=t.config.load.dataset.slice(),n.startContainerClassName=n.newContainerClassName=e.activeContainerClassName,n.show=t.targets.slice(),e=t.callFilters("stateGetInitialState",e,arguments)}else e.activeFilter=t.parseFilterArgs([t.config.load.filter]).command,e.activeSort=t.parseSortArgs([t.config.load.sort]).command,e.totalTargets=t.targets.length,(e=t.callFilters("stateGetInitialState",e,arguments)).activeSort.collection||e.activeSort.attribute||"random"===e.activeSort.order||"desc"===e.activeSort.order?(n.newSort=e.activeSort,t.sortOperation(n),t.printSort(!1,n),t.targets=n.newOrder):n.startOrder=n.newOrder=t.targets,n.startFilter=n.newFilter=e.activeFilter,n.startSort=n.newSort=e.activeSort,n.startContainerClassName=n.newContainerClassName=e.activeContainerClassName,"all"===n.newFilter.selector?n.newFilter.selector=t.config.selectors.target:"none"===n.newFilter.selector&&(n.newFilter.selector="");return n=t.callFilters("operationGetInitialState",n,[e]),(t.lastOperation=n).newFilter&&t.filterOperation(n),e=t.buildState(n)},cacheDom:function(t,e){var n=this;n.callActions("beforeCacheDom",arguments),n.dom.document=e,n.dom.body=n.dom.document.querySelector("body"),n.dom.container=t,n.dom.parent=t,n.callActions("afterCacheDom",arguments)},indexTargets:function(){var t,e=this,n=null,i=null,o=-1;if(e.callActions("beforeIndexTargets",arguments),e.dom.targets=e.config.layout.allowNestedTargets?e.dom.container.querySelectorAll(e.config.selectors.target):h.children(e.dom.container,e.config.selectors.target,e.dom.document),e.dom.targets=h.arrayFromList(e.dom.targets),e.targets=[],(t=e.config.load.dataset)&&t.length!==e.dom.targets.length)throw new Error(f.messages.errorDatasetPrerenderedMismatch());if(e.dom.targets.length){for(o=0;i=e.dom.targets[o];o++)(n=new f.Target).init(i,e,t?t[o]:void 0),n.isInDom=!0,e.targets.push(n);e.dom.parent=e.dom.targets[0].parentElement===e.dom.container?e.dom.container:e.dom.targets[0].parentElement}e.origOrder=e.targets,e.callActions("afterIndexTargets",arguments)},initControls:function(){var t=this,e="",n=null,i=null,o=null,r=null,s=null,a=-1,l=-1;switch(t.callActions("beforeInitControls",arguments),t.config.controls.scope){case"local":o=t.dom.container;break;case"global":o=t.dom.document;break;default:throw new Error(f.messages.errorConfigInvalidControlsScope())}for(a=0;e=f.controlDefinitions[a];a++)if(t.config.controls.live||e.live){if(e.parent){if(!(r=t.dom[e.parent])||r.length<0)continue;"number"!=typeof r.length&&(r=[r])}else r=[o];for(l=0;i=r[l];l++)s=t.getControl(i,e.type,e.selector),t.controls.push(s)}else for(n=o.querySelectorAll(t.config.selectors.control+e.selector),l=0;i=n[l];l++)(s=t.getControl(i,e.type,""))&&t.controls.push(s);t.callActions("afterInitControls",arguments)},getControl:function(t,e,n){var i=this,o=null,r=-1;if(i.callActions("beforeGetControl",arguments),!n)for(r=0;o=f.controls[r];r++){if(o.el===t&&o.isBound(i))return i.callFilters("controlGetControl",null,arguments);if(o.el===t&&o.type===e&&o.selector===n)return o.addBinding(i),i.callFilters("controlGetControl",o,arguments)}return(o=new f.Control).init(t,e,n),o.classNames.base=h.getClassname(i.config.classNames,e),o.classNames.active=h.getClassname(i.config.classNames,e,i.config.classNames.modifierActive),o.classNames.disabled=h.getClassname(i.config.classNames,e,i.config.classNames.modifierDisabled),o.addBinding(i),i.callFilters("controlGetControl",o,arguments)},getToggleSelector:function(){var t=this,e="or"===t.config.controls.toggleLogic?", ":"",n="";return t.callActions("beforeGetToggleSelector",arguments),t.toggleArray=h.clean(t.toggleArray),""===(n=t.toggleArray.join(e))&&(n=t.config.controls.toggleDefault),t.callFilters("selectorGetToggleSelector",n,arguments)},buildToggleArray:function(t,e){var n=this,i="";if(n.callActions("beforeBuildToggleArray",arguments),t&&t.filter)i=t.filter.selector.replace(/\s/g,"");else{if(!e)return;i=e.activeFilter.selector.replace(/\s/g,"")}i!==n.config.selectors.target&&"all"!==i||(i=""),"or"===n.config.controls.toggleLogic?n.toggleArray=i.split(","):n.toggleArray=n.splitCompoundSelector(i),n.toggleArray=h.clean(n.toggleArray),n.callActions("afterBuildToggleArray",arguments)},splitCompoundSelector:function(t){var e=t.split(/([\.\[])/g),n=[],i="",o=-1;for(""===e[0]&&e.shift(),o=0;o<e.length;o++)o%2==0&&(i=""),i+=e[o],o%2!=0&&n.push(i);return n},updateControls:function(t){var e=this,n=null,i=new f.CommandMultimix,o=-1;for(e.callActions("beforeUpdateControls",arguments),t.filter?i.filter=t.filter.selector:i.filter=e.state.activeFilter.selector,t.sort?i.sort=e.buildSortString(t.sort):i.sort=e.buildSortString(e.state.activeSort),i.filter===e.config.selectors.target&&(i.filter="all"),""===i.filter&&(i.filter="none"),h.freeze(i),o=0;n=e.controls[o];o++)n.update(i,e.toggleArray);e.callActions("afterUpdateControls",arguments)},buildSortString:function(t){var e="";return e+=t.sortString,t.next&&(e+=" "+this.buildSortString(t.next)),e},insertTargets:function(t,e){var n,i=this,o=-1,r=null,s=null,a=null,l=-1;if(i.callActions("beforeInsertTargets",arguments),void 0===t.index&&(t.index=0),n=i.getNextSibling(t.index,t.sibling,t.position),r=i.dom.document.createDocumentFragment(),o=n?h.index(n,i.config.selectors.target):i.targets.length,t.collection){for(l=0;a=t.collection[l];l++){if(-1<i.dom.targets.indexOf(a))throw new Error(f.messages.errorInsertPreexistingElement());a.style.display="none",r.appendChild(a),r.appendChild(i.dom.document.createTextNode(" ")),h.isElement(a,i.dom.document)&&a.matches(i.config.selectors.target)&&((s=new f.Target).init(a,i),s.isInDom=!0,i.targets.splice(o,0,s),o++)}i.dom.parent.insertBefore(r,n)}e.startOrder=i.origOrder=i.targets,i.callActions("afterInsertTargets",arguments)},getNextSibling:function(t,e,n){var i=this,o=null;return t=Math.max(t,0),e&&"before"===n?o=e:e&&"after"===n?o=e.nextElementSibling||null:0<i.targets.length&&void 0!==t?o=t<i.targets.length||!i.targets.length?i.targets[t].dom.el:i.targets[i.targets.length-1].dom.el.nextElementSibling:0===i.targets.length&&0<i.dom.parent.children.length&&(i.config.layout.siblingAfter?o=i.config.layout.siblingAfter:i.config.layout.siblingBefore?o=i.config.layout.siblingBefore.nextElementSibling:i.dom.parent.children[0]),i.callFilters("elementGetNextSibling",o,arguments)},filterOperation:function(t){var e,n=!1,i=-1,o=null,r=-1;for(this.callActions("beforeFilterOperation",arguments),e=t.newFilter.action,r=0;o=t.newOrder[r];r++)n=t.newFilter.collection?-1<t.newFilter.collection.indexOf(o.dom.el):""!==t.newFilter.selector&&o.dom.el.matches(t.newFilter.selector),this.evaluateHideShow(n,o,e,t);if(t.toRemove.length)for(r=0;o=t.show[r];r++)-1<t.toRemove.indexOf(o)&&(t.show.splice(r,1),-1<(i=t.toShow.indexOf(o))&&t.toShow.splice(i,1),t.toHide.push(o),t.hide.push(o),r--);t.matching=t.show.slice(),0===t.show.length&&""!==t.newFilter.selector&&0!==this.targets.length&&(t.hasFailed=!0),this.callActions("afterFilterOperation",arguments)},evaluateHideShow:function(t,e,n,i){var o,r=Array.prototype.slice.call(arguments,1);o=this.callFilters("testResultEvaluateHideShow",t,r),this.callActions("beforeEvaluateHideShow",arguments),!0===o&&"show"===n||!1===o&&"hide"===n?(i.show.push(e),e.isShown||i.toShow.push(e)):(i.hide.push(e),e.isShown&&i.toHide.push(e)),this.callActions("afterEvaluateHideShow",arguments)},sortOperation:function(n){var i=this,t=[],e=null,o=null,r=-1;if(i.callActions("beforeSortOperation",arguments),n.startOrder=i.targets,n.newSort.collection){for(t=[],r=0;o=n.newSort.collection[r];r++){if(i.dom.targets.indexOf(o)<0)throw new Error(f.messages.errorSortNonExistentElement());(e=new f.Target).init(o,i),e.isInDom=!0,t.push(e)}n.newOrder=t}else"random"===n.newSort.order?n.newOrder=h.arrayShuffle(n.startOrder):""===n.newSort.attribute?(n.newOrder=i.origOrder.slice(),"desc"===n.newSort.order&&n.newOrder.reverse()):(n.newOrder=n.startOrder.slice(),n.newOrder.sort(function(t,e){return i.compare(t,e,n.newSort)}));h.isEqualArray(n.newOrder,n.startOrder)&&(n.willSort=!1),i.callActions("afterSortOperation",arguments)},compare:function(t,e,n){var i=n.order,o=this.getAttributeValue(t,n.attribute),r=this.getAttributeValue(e,n.attribute);return r=isNaN(+o)||isNaN(+r)?(o=o.toLowerCase(),r.toLowerCase()):(o=+o,+r),o<r?"asc"===i?-1:1:r<o?"asc"===i?1:-1:o===r&&n.next?this.compare(t,e,n.next):0},getAttributeValue:function(t,e){var n;return null===(n=t.dom.el.getAttribute("data-"+e))&&this.config.debug.showWarnings&&console.warn(f.messages.warningInconsistentSortingAttributes({attribute:"data-"+e})),this.callFilters("valueGetAttributeValue",n||0,arguments)},printSort:function(t,e){var n,i=this,o=t?e.newOrder:e.startOrder,r=t?e.startOrder:e.newOrder,s=o.length?o[o.length-1].dom.el.nextElementSibling:null,a=p.document.createDocumentFragment(),l=null,c=null,u=-1;for(i.callActions("beforePrintSort",arguments),u=0;l=o[u];u++)"absolute"!==(c=l.dom.el).style.position&&(h.removeWhitespace(c.previousSibling),c.parentElement.removeChild(c));for((n=s?s.previousSibling:i.dom.parent.lastChild)&&"#text"===n.nodeName&&h.removeWhitespace(n),u=0;l=r[u];u++)c=l.dom.el,h.isElement(a.lastChild)&&a.appendChild(p.document.createTextNode(" ")),a.appendChild(c);i.dom.parent.firstChild&&i.dom.parent.firstChild!==s&&a.insertBefore(p.document.createTextNode(" "),a.childNodes[0]),s?(a.appendChild(p.document.createTextNode(" ")),i.dom.parent.insertBefore(a,s)):i.dom.parent.appendChild(a),i.callActions("afterPrintSort",arguments)},parseSortString:function(t,e){var n=t.split(" "),i=e,o=[],r=-1;for(r=0;r<n.length;r++){switch(o=n[r].split(":"),i.sortString=n[r],i.attribute=h.dashCase(o[0]),i.order=o[1]||"asc",i.attribute){case"default":i.attribute="";break;case"random":i.attribute="",i.order="random"}if(!i.attribute||"random"===i.order)break;r<n.length-1&&(i.next=new f.CommandSort,h.freeze(i),i=i.next)}return this.callFilters("commandsParseSort",e,arguments)},parseEffects:function(){var t=this,e="",n=t.config.animation.effectsIn||t.config.animation.effects,i=t.config.animation.effectsOut||t.config.animation.effects;for(e in t.callActions("beforeParseEffects",arguments),t.effectsIn=new f.StyleData,t.effectsOut=new f.StyleData,t.transformIn=[],t.transformOut=[],t.effectsIn.opacity=t.effectsOut.opacity=1,t.parseEffect("fade",n,t.effectsIn,t.transformIn),t.parseEffect("fade",i,t.effectsOut,t.transformOut,!0),f.transformDefaults)f.transformDefaults[e]instanceof f.TransformData&&(t.parseEffect(e,n,t.effectsIn,t.transformIn),t.parseEffect(e,i,t.effectsOut,t.transformOut,!0));t.parseEffect("stagger",n,t.effectsIn,t.transformIn),t.parseEffect("stagger",i,t.effectsOut,t.transformOut,!0),t.callActions("afterParseEffects",arguments)},parseEffect:function(t,e,n,i,o){var r,s=this,a="",l="",c=["%","px","em","rem","vh","vw","deg"],u="",d=-1;if(s.callActions("beforeParseEffect",arguments),"string"!=typeof e)throw new TypeError(f.messages.errorConfigInvalidAnimationEffects());if(e.indexOf(t)<0)"stagger"===t&&(s.staggerDuration=0);else{switch(-1<(r=e.indexOf(t+"("))&&(a=e.substring(r),l=/\(([^)]+)\)/.exec(a)[1]),t){case"fade":n.opacity=l?parseFloat(l):0;break;case"stagger":s.staggerDuration=l?parseFloat(l):100;break;default:if(o&&s.config.animation.reverseOut&&"scale"!==t?n[t].value=-1*(l?parseFloat(l):f.transformDefaults[t].value):n[t].value=l?parseFloat(l):f.transformDefaults[t].value,l){for(d=0;u=c[d];d++)if(-1<l.indexOf(u)){n[t].unit=u;break}}else n[t].unit=f.transformDefaults[t].unit;i.push(t+"("+n[t].value+n[t].unit+")")}s.callActions("afterParseEffect",arguments)}},buildState:function(t){var e=this,n=new f.State,i=null,o=-1;for(e.callActions("beforeBuildState",arguments),o=0;i=e.targets[o];o++)(!t.toRemove.length||t.toRemove.indexOf(i)<0)&&n.targets.push(i.dom.el);for(o=0;i=t.matching[o];o++)n.matching.push(i.dom.el);for(o=0;i=t.show[o];o++)n.show.push(i.dom.el);for(o=0;i=t.hide[o];o++)(!t.toRemove.length||t.toRemove.indexOf(i)<0)&&n.hide.push(i.dom.el);return n.id=e.id,n.container=e.dom.container,n.activeFilter=t.newFilter,n.activeSort=t.newSort,n.activeDataset=t.newDataset,n.activeContainerClassName=t.newContainerClassName,n.hasFailed=t.hasFailed,n.totalTargets=e.targets.length,n.totalShow=t.show.length,n.totalHide=t.hide.length,n.totalMatching=t.matching.length,n.triggerElement=t.triggerElement,e.callFilters("stateBuildState",n,arguments)},goMix:function(t,e){var n=this,i=null;return n.callActions("beforeGoMix",arguments),n.config.animation.duration&&n.config.animation.effects&&h.isVisible(n.dom.container)||(t=!1),e.toShow.length||e.toHide.length||e.willSort||e.willChangeLayout||(t=!1),e.startState.show.length||e.show.length||(t=!1),f.events.fire("mixStart",n.dom.container,{state:e.startState,futureState:e.newState,instance:n},n.dom.document),"function"==typeof n.config.callbacks.onMixStart&&n.config.callbacks.onMixStart.call(n.dom.container,e.startState,e.newState,n),h.removeClass(n.dom.container,h.getClassname(n.config.classNames,"container",n.config.classNames.modifierFailed)),i=n.userDeferred?n.userDeferred:n.userDeferred=h.defer(f.libraries),n.isBusy=!0,t&&f.features.has.transitions?(p.pageYOffset!==e.docState.scrollTop&&p.scrollTo(e.docState.scrollLeft,e.docState.scrollTop),n.config.animation.applyPerspective&&(n.dom.parent.style[f.features.perspectiveProp]=n.config.animation.perspectiveDistance,n.dom.parent.style[f.features.perspectiveOriginProp]=n.config.animation.perspectiveOrigin),n.config.animation.animateResizeContainer&&e.startHeight!==e.newHeight&&e.viewportDeltaY!==e.startHeight-e.newHeight&&(n.dom.parent.style.height=e.startHeight+"px"),n.config.animation.animateResizeContainer&&e.startWidth!==e.newWidth&&e.viewportDeltaX!==e.startWidth-e.newWidth&&(n.dom.parent.style.width=e.startWidth+"px"),e.startHeight===e.newHeight&&(n.dom.parent.style.height=e.startHeight+"px"),e.startWidth===e.newWidth&&(n.dom.parent.style.width=e.startWidth+"px"),e.startHeight===e.newHeight&&e.startWidth===e.newWidth&&(n.dom.parent.style.overflow="hidden"),requestAnimationFrame(function(){n.moveTargets(e)})):n.config.debug.fauxAsync?setTimeout(function(){n.cleanUp(e)},n.config.animation.duration):n.cleanUp(e),n.callFilters("promiseGoMix",i.promise,arguments)},getStartMixData:function(t){var e=this,n=p.getComputedStyle(e.dom.parent),i=e.dom.parent.getBoundingClientRect(),o=null,r={},s=-1,a=n[f.features.boxSizingProp];for(e.incPadding="border-box"===a,e.callActions("beforeGetStartMixData",arguments),s=0;o=t.show[s];s++)r=o.getPosData(),t.showPosData[s]={startPosData:r};for(s=0;o=t.toHide[s];s++)r=o.getPosData(),t.toHidePosData[s]={startPosData:r};t.startX=i.left,t.startY=i.top,t.startHeight=e.incPadding?i.height:i.height-parseFloat(n.paddingTop)-parseFloat(n.paddingBottom)-parseFloat(n.borderTop)-parseFloat(n.borderBottom),t.startWidth=e.incPadding?i.width:i.width-parseFloat(n.paddingLeft)-parseFloat(n.paddingRight)-parseFloat(n.borderLeft)-parseFloat(n.borderRight),e.callActions("afterGetStartMixData",arguments)},setInter:function(t){var e=this,n=null,i=-1;for(e.callActions("beforeSetInter",arguments),e.config.animation.clampHeight&&(e.dom.parent.style.height=t.startHeight+"px",e.dom.parent.style.overflow="hidden"),e.config.animation.clampWidth&&(e.dom.parent.style.width=t.startWidth+"px",e.dom.parent.style.overflow="hidden"),i=0;n=t.toShow[i];i++)n.show();t.willChangeLayout&&(h.removeClass(e.dom.container,t.startContainerClassName),h.addClass(e.dom.container,t.newContainerClassName)),e.callActions("afterSetInter",arguments)},getInterMixData:function(t){var e=null,n=-1;for(this.callActions("beforeGetInterMixData",arguments),n=0;e=t.show[n];n++)t.showPosData[n].interPosData=e.getPosData();for(n=0;e=t.toHide[n];n++)t.toHidePosData[n].interPosData=e.getPosData();this.callActions("afterGetInterMixData",arguments)},setFinal:function(t){var e=null,n=-1;for(this.callActions("beforeSetFinal",arguments),t.willSort&&this.printSort(!1,t),n=0;e=t.toHide[n];n++)e.hide();this.callActions("afterSetFinal",arguments)},getFinalMixData:function(t){var e,n=this,i=null,o=null,r=-1;for(n.callActions("beforeGetFinalMixData",arguments),r=0;o=t.show[r];r++)t.showPosData[r].finalPosData=o.getPosData();for(r=0;o=t.toHide[r];r++)t.toHidePosData[r].finalPosData=o.getPosData();for((n.config.animation.clampHeight||n.config.animation.clampWidth)&&(n.dom.parent.style.height=n.dom.parent.style.width=n.dom.parent.style.overflow=""),n.incPadding||(i=p.getComputedStyle(n.dom.parent)),e=n.dom.parent.getBoundingClientRect(),t.newX=e.left,t.newY=e.top,t.newHeight=n.incPadding?e.height:e.height-parseFloat(i.paddingTop)-parseFloat(i.paddingBottom)-parseFloat(i.borderTop)-parseFloat(i.borderBottom),t.newWidth=n.incPadding?e.width:e.width-parseFloat(i.paddingLeft)-parseFloat(i.paddingRight)-parseFloat(i.borderLeft)-parseFloat(i.borderRight),t.viewportDeltaX=t.docState.viewportWidth-this.dom.document.documentElement.clientWidth,t.viewportDeltaY=t.docState.viewportHeight-this.dom.document.documentElement.clientHeight,t.willSort&&n.printSort(!0,t),r=0;o=t.toShow[r];r++)o.hide();for(r=0;o=t.toHide[r];r++)o.show();t.willChangeLayout&&(h.removeClass(n.dom.container,t.newContainerClassName),h.addClass(n.dom.container,n.config.layout.containerClassName)),n.callActions("afterGetFinalMixData",arguments)},getTweenData:function(t){var e=this,n=null,i=null,o=Object.getOwnPropertyNames(e.effectsIn),r="",s=null,a=-1,l=-1,c=-1,u=-1;for(e.callActions("beforeGetTweenData",arguments),c=0;n=t.show[c];c++)for((i=t.showPosData[c]).posIn=new f.StyleData,i.posOut=new f.StyleData,i.tweenData=new f.StyleData,n.isShown?(i.posIn.x=i.startPosData.x-i.interPosData.x,i.posIn.y=i.startPosData.y-i.interPosData.y):i.posIn.x=i.posIn.y=0,i.posOut.x=i.finalPosData.x-i.interPosData.x,i.posOut.y=i.finalPosData.y-i.interPosData.y,i.posIn.opacity=n.isShown?1:e.effectsIn.opacity,i.posOut.opacity=1,i.tweenData.opacity=i.posOut.opacity-i.posIn.opacity,n.isShown||e.config.animation.nudge||(i.posIn.x=i.posOut.x,i.posIn.y=i.posOut.y),i.tweenData.x=i.posOut.x-i.posIn.x,i.tweenData.y=i.posOut.y-i.posIn.y,e.config.animation.animateResizeTargets&&(i.posIn.width=i.startPosData.width,i.posIn.height=i.startPosData.height,a=(i.startPosData.width||i.finalPosData.width)-i.interPosData.width,i.posIn.marginRight=i.startPosData.marginRight-a,l=(i.startPosData.height||i.finalPosData.height)-i.interPosData.height,i.posIn.marginBottom=i.startPosData.marginBottom-l,i.posOut.width=i.finalPosData.width,i.posOut.height=i.finalPosData.height,a=(i.finalPosData.width||i.startPosData.width)-i.interPosData.width,i.posOut.marginRight=i.finalPosData.marginRight-a,l=(i.finalPosData.height||i.startPosData.height)-i.interPosData.height,i.posOut.marginBottom=i.finalPosData.marginBottom-l,i.tweenData.width=i.posOut.width-i.posIn.width,i.tweenData.height=i.posOut.height-i.posIn.height,i.tweenData.marginRight=i.posOut.marginRight-i.posIn.marginRight,i.tweenData.marginBottom=i.posOut.marginBottom-i.posIn.marginBottom),u=0;r=o[u];u++)(s=e.effectsIn[r])instanceof f.TransformData&&s.value&&(i.posIn[r].value=s.value,i.posOut[r].value=0,i.tweenData[r].value=i.posOut[r].value-i.posIn[r].value,i.posIn[r].unit=i.posOut[r].unit=i.tweenData[r].unit=s.unit);for(c=0;n=t.toHide[c];c++)for((i=t.toHidePosData[c]).posIn=new f.StyleData,i.posOut=new f.StyleData,i.tweenData=new f.StyleData,i.posIn.x=n.isShown?i.startPosData.x-i.interPosData.x:0,i.posIn.y=n.isShown?i.startPosData.y-i.interPosData.y:0,i.posOut.x=e.config.animation.nudge?0:i.posIn.x,i.posOut.y=e.config.animation.nudge?0:i.posIn.y,i.tweenData.x=i.posOut.x-i.posIn.x,i.tweenData.y=i.posOut.y-i.posIn.y,e.config.animation.animateResizeTargets&&(i.posIn.width=i.startPosData.width,i.posIn.height=i.startPosData.height,a=i.startPosData.width-i.interPosData.width,i.posIn.marginRight=i.startPosData.marginRight-a,l=i.startPosData.height-i.interPosData.height,i.posIn.marginBottom=i.startPosData.marginBottom-l),i.posIn.opacity=1,i.posOut.opacity=e.effectsOut.opacity,i.tweenData.opacity=i.posOut.opacity-i.posIn.opacity,u=0;r=o[u];u++)(s=e.effectsOut[r])instanceof f.TransformData&&s.value&&(i.posIn[r].value=0,i.posOut[r].value=s.value,i.tweenData[r].value=i.posOut[r].value-i.posIn[r].value,i.posIn[r].unit=i.posOut[r].unit=i.tweenData[r].unit=s.unit);e.callActions("afterGetTweenData",arguments)},moveTargets:function(t){var e=this,n=null,i=null,o=null,r="",s=!1,a=-1,l=-1,c=e.checkProgress.bind(e);for(e.callActions("beforeMoveTargets",arguments),l=0;n=t.show[l];l++)i=new f.IMoveData,o=t.showPosData[l],r=n.isShown?"none":"show",(s=e.willTransition(r,t.hasEffect,o.posIn,o.posOut))&&a++,n.show(),i.posIn=o.posIn,i.posOut=o.posOut,i.statusChange=r,i.staggerIndex=a,i.operation=t,i.callback=s?c:null,n.move(i);for(l=0;n=t.toHide[l];l++)o=t.toHidePosData[l],i=new f.IMoveData,r="hide",s=e.willTransition(r,o.posIn,o.posOut),i.posIn=o.posIn,i.posOut=o.posOut,i.statusChange=r,i.staggerIndex=l,i.operation=t,i.callback=s?c:null,n.move(i);e.config.animation.animateResizeContainer&&(e.dom.parent.style[f.features.transitionProp]="height "+e.config.animation.duration+"ms ease, width "+e.config.animation.duration+"ms ease ",requestAnimationFrame(function(){t.startHeight!==t.newHeight&&t.viewportDeltaY!==t.startHeight-t.newHeight&&(e.dom.parent.style.height=t.newHeight+"px"),t.startWidth!==t.newWidth&&t.viewportDeltaX!==t.startWidth-t.newWidth&&(e.dom.parent.style.width=t.newWidth+"px")})),t.willChangeLayout&&(h.removeClass(e.dom.container,e.config.layout.ContainerClassName),h.addClass(e.dom.container,t.newContainerClassName)),e.callActions("afterMoveTargets",arguments)},hasEffect:function(){var t=["scale","translateX","translateY","translateZ","rotateX","rotateY","rotateZ"],e="",n=null,i=!1,o=-1;if(1!==this.effectsIn.opacity)return this.callFilters("resultHasEffect",!0,arguments);for(o=0;e=t[o];o++)if(0!==("undefined"!==(n=this.effectsIn[e]).value?n.value:n)){i=!0;break}return this.callFilters("resultHasEffect",i,arguments)},willTransition:function(t,e,n,i){var o=!1;return o=!!h.isVisible(this.dom.container)&&(!!("none"!==t&&e||n.x!==i.x||n.y!==i.y)||!!this.config.animation.animateResizeTargets&&(n.width!==i.width||n.height!==i.height||n.marginRight!==i.marginRight||n.marginTop!==i.marginTop)),this.callFilters("resultWillTransition",o,arguments)},checkProgress:function(t){this.targetsDone++,this.targetsBound===this.targetsDone&&this.cleanUp(t)},cleanUp:function(t){var e=this,n=null,i=null,o=null,r=null,s=-1;for(e.callActions("beforeCleanUp",arguments),e.targetsMoved=e.targetsImmovable=e.targetsBound=e.targetsDone=0,s=0;n=t.show[s];s++)n.cleanUp(),n.show();for(s=0;n=t.toHide[s];s++)n.cleanUp(),n.hide();if(t.willSort&&e.printSort(!1,t),e.dom.parent.style[f.features.transitionProp]=e.dom.parent.style.height=e.dom.parent.style.width=e.dom.parent.style.overflow=e.dom.parent.style[f.features.perspectiveProp]=e.dom.parent.style[f.features.perspectiveOriginProp]="",t.willChangeLayout&&(h.removeClass(e.dom.container,t.startContainerClassName),h.addClass(e.dom.container,t.newContainerClassName)),t.toRemove.length){for(s=0;n=e.targets[s];s++)-1<t.toRemove.indexOf(n)&&((i=n.dom.el.previousSibling)&&"#text"===i.nodeName&&(o=n.dom.el.nextSibling)&&"#text"===o.nodeName&&h.removeWhitespace(i),t.willSort||e.dom.parent.removeChild(n.dom.el),e.targets.splice(s,1),n.isInDom=!1,s--);e.origOrder=e.targets}t.willSort&&(e.targets=t.newOrder),e.state=t.newState,e.lastOperation=t,e.dom.targets=e.state.targets,f.events.fire("mixEnd",e.dom.container,{state:e.state,instance:e},e.dom.document),"function"==typeof e.config.callbacks.onMixEnd&&e.config.callbacks.onMixEnd.call(e.dom.container,e.state,e),t.hasFailed&&(f.events.fire("mixFail",e.dom.container,{state:e.state,instance:e},e.dom.document),"function"==typeof e.config.callbacks.onMixFail&&e.config.callbacks.onMixFail.call(e.dom.container,e.state,e),h.addClass(e.dom.container,h.getClassname(e.config.classNames,"container",e.config.classNames.modifierFailed))),"function"==typeof e.userCallback&&e.userCallback.call(e.dom.container,e.state,e),"function"==typeof e.userDeferred.resolve&&e.userDeferred.resolve(e.state),e.userCallback=null,e.userDeferred=null,e.lastClicked=null,e.isToggling=!1,e.isBusy=!1,e.queue.length&&(e.callActions("beforeReadQueueCleanUp",arguments),r=e.queue.shift(),e.userDeferred=r.deferred,e.isToggling=r.isToggling,e.lastClicked=r.triggerElement,r.instruction.command instanceof f.CommandMultimix?e.multimix.apply(e,r.args):e.dataset.apply(e,r.args)),e.callActions("afterCleanUp",arguments)},parseMultimixArgs:function(t){var e=this,n=new f.UserInstruction,i=null,o=-1;for(n.animate=e.config.animation.enable,n.command=new f.CommandMultimix,o=0;o<t.length;o++)null!==(i=t[o])&&("object"==typeof i?h.extend(n.command,i):"boolean"==typeof i?n.animate=i:"function"==typeof i&&(n.callback=i));return!n.command.insert||n.command.insert instanceof f.CommandInsert||(n.command.insert=e.parseInsertArgs([n.command.insert]).command),!n.command.remove||n.command.remove instanceof f.CommandRemove||(n.command.remove=e.parseRemoveArgs([n.command.remove]).command),!n.command.filter||n.command.filter instanceof f.CommandFilter||(n.command.filter=e.parseFilterArgs([n.command.filter]).command),!n.command.sort||n.command.sort instanceof f.CommandSort||(n.command.sort=e.parseSortArgs([n.command.sort]).command),!n.command.changeLayout||n.command.changeLayout instanceof f.CommandChangeLayout||(n.command.changeLayout=e.parseChangeLayoutArgs([n.command.changeLayout]).command),n=e.callFilters("instructionParseMultimixArgs",n,arguments),h.freeze(n),n},parseFilterArgs:function(t){var e=new f.UserInstruction,n=null,i=-1;for(e.animate=this.config.animation.enable,e.command=new f.CommandFilter,i=0;i<t.length;i++)"string"==typeof(n=t[i])?e.command.selector=n:null===n?e.command.collection=[]:"object"==typeof n&&h.isElement(n,this.dom.document)?e.command.collection=[n]:"object"==typeof n&&void 0!==n.length?e.command.collection=h.arrayFromList(n):"object"==typeof n?h.extend(e.command,n):"boolean"==typeof n?e.animate=n:"function"==typeof n&&(e.callback=n);if(e.command.selector&&e.command.collection)throw new Error(f.messages.errorFilterInvalidArguments());return e=this.callFilters("instructionParseFilterArgs",e,arguments),h.freeze(e),e},parseSortArgs:function(t){var e=new f.UserInstruction,n=null,i="",o=-1;for(e.animate=this.config.animation.enable,e.command=new f.CommandSort,o=0;o<t.length;o++)if(null!==(n=t[o]))switch(typeof n){case"string":i=n;break;case"object":n.length&&(e.command.collection=h.arrayFromList(n));break;case"boolean":e.animate=n;break;case"function":e.callback=n}return i&&(e.command=this.parseSortString(i,e.command)),e=this.callFilters("instructionParseSortArgs",e,arguments),h.freeze(e),e},parseInsertArgs:function(t){var e=new f.UserInstruction,n=null,i=-1;for(e.animate=this.config.animation.enable,e.command=new f.CommandInsert,i=0;i<t.length;i++)null!==(n=t[i])&&("number"==typeof n?e.command.index=n:"string"==typeof n&&-1<["before","after"].indexOf(n)?e.command.position=n:"string"==typeof n?e.command.collection=h.arrayFromList(h.createElement(n).childNodes):"object"==typeof n&&h.isElement(n,this.dom.document)?e.command.collection.length?e.command.sibling=n:e.command.collection=[n]:"object"==typeof n&&n.length?e.command.collection.length?e.command.sibling=n[0]:e.command.collection=n:"object"==typeof n&&n.childNodes&&n.childNodes.length?e.command.collection.length?e.command.sibling=n.childNodes[0]:e.command.collection=h.arrayFromList(n.childNodes):"object"==typeof n?h.extend(e.command,n):"boolean"==typeof n?e.animate=n:"function"==typeof n&&(e.callback=n));if(e.command.index&&e.command.sibling)throw new Error(f.messages.errorInsertInvalidArguments());return!e.command.collection.length&&this.config.debug.showWarnings&&console.warn(f.messages.warningInsertNoElements()),e=this.callFilters("instructionParseInsertArgs",e,arguments),h.freeze(e),e},parseRemoveArgs:function(t){var e=this,n=new f.UserInstruction,i=null,o=null,r=-1;for(n.animate=e.config.animation.enable,n.command=new f.CommandRemove,r=0;r<t.length;r++)if(null!==(o=t[r]))switch(typeof o){case"number":e.targets[o]&&(n.command.targets[0]=e.targets[o]);break;case"string":n.command.collection=h.arrayFromList(e.dom.parent.querySelectorAll(o));break;case"object":o&&o.length?n.command.collection=o:h.isElement(o,e.dom.document)?n.command.collection=[o]:h.extend(n.command,o);break;case"boolean":n.animate=o;break;case"function":n.callback=o}if(n.command.collection.length)for(r=0;i=e.targets[r];r++)-1<n.command.collection.indexOf(i.dom.el)&&n.command.targets.push(i);return!n.command.targets.length&&e.config.debug.showWarnings&&console.warn(f.messages.warningRemoveNoElements()),h.freeze(n),n},parseDatasetArgs:function(t){var e=new f.UserInstruction,n=null,i=-1;for(e.animate=this.config.animation.enable,e.command=new f.CommandDataset,i=0;i<t.length;i++)if(null!==(n=t[i]))switch(typeof n){case"object":Array.isArray(n)||"number"==typeof n.length?e.command.dataset=n:h.extend(e.command,n);break;case"boolean":e.animate=n;break;case"function":e.callback=n}return h.freeze(e),e},parseChangeLayoutArgs:function(t){var e=new f.UserInstruction,n=null,i=-1;for(e.animate=this.config.animation.enable,e.command=new f.CommandChangeLayout,i=0;i<t.length;i++)if(null!==(n=t[i]))switch(typeof n){case"string":e.command.containerClassName=n;break;case"object":h.extend(e.command,n);break;case"boolean":e.animate=n;break;case"function":e.callback=n}return h.freeze(e),e},queueMix:function(t){var e=this,n=null,i="";return e.callActions("beforeQueueMix",arguments),n=h.defer(f.libraries),e.config.animation.queue&&e.queue.length<e.config.animation.queueLimit?(t.deferred=n,e.queue.push(t),e.config.controls.enable&&(e.isToggling?(e.buildToggleArray(t.instruction.command),i=e.getToggleSelector(),e.updateControls({filter:{selector:i}})):e.updateControls(t.instruction.command))):(e.config.debug.showWarnings&&console.warn(f.messages.warningMultimixInstanceQueueFull()),n.resolve(e.state),f.events.fire("mixBusy",e.dom.container,{state:e.state,instance:e},e.dom.document),"function"==typeof e.config.callbacks.onMixBusy&&e.config.callbacks.onMixBusy.call(e.dom.container,e.state,e)),e.callFilters("promiseQueueMix",n.promise,arguments)},getDataOperation:function(t){var e=this,n=new f.Operation,i=[];if(n=e.callFilters("operationUnmappedGetDataOperation",n,arguments),e.dom.targets.length&&!(i=e.state.activeDataset||[]).length)throw new Error(f.messages.errorDatasetNotSet());return n.id=h.randomHex(),n.startState=e.state,n.startDataset=i,n.newDataset=t.slice(),e.diffDatasets(n),n.startOrder=e.targets,n.newOrder=n.show,e.config.animation.enable&&(e.getStartMixData(n),e.setInter(n),n.docState=h.getDocumentState(e.dom.document),e.getInterMixData(n),e.setFinal(n),e.getFinalMixData(n),e.parseEffects(),n.hasEffect=e.hasEffect(),e.getTweenData(n)),e.targets=n.show.slice(),n.newState=e.buildState(n),Array.prototype.push.apply(e.targets,n.toRemove),n=e.callFilters("operationMappedGetDataOperation",n,arguments)},diffDatasets:function(t){var e=this,n=[],i=[],o=[],r=null,s=null,a=null,l=null,c=null,u={},d="",p=-1;for(e.callActions("beforeDiffDatasets",arguments),p=0;r=t.newDataset[p];p++){if(void 0===(d=r[e.config.data.uidKey])||d.toString().length<1)throw new TypeError(f.messages.errorDatasetInvalidUidKey({uidKey:e.config.data.uidKey}));if(u[d])throw new Error(f.messages.errorDatasetDuplicateUid({uid:d}));u[d]=!0,(s=e.cache[d])instanceof f.Target?(e.config.data.dirtyCheck&&!h.deepEquals(r,s.data)&&(a=s.render(r),s.data=r,a!==s.dom.el&&(s.isInDom&&(s.unbindEvents(),e.dom.parent.replaceChild(a,s.dom.el)),s.isShown||(a.style.display="none"),s.dom.el=a,s.isInDom&&s.bindEvents())),a=s.dom.el):((s=new f.Target).init(null,e,r),s.hide()),s.isInDom?(c=s.dom.el.nextElementSibling,i.push(d),l&&(l.lastElementChild&&l.appendChild(e.dom.document.createTextNode(" ")),e.insertDatasetFrag(l,s.dom.el,o),l=null)):((l=l||e.dom.document.createDocumentFragment()).lastElementChild&&l.appendChild(e.dom.document.createTextNode(" ")),l.appendChild(s.dom.el),s.isInDom=!0,s.unbindEvents(),s.bindEvents(),s.hide(),t.toShow.push(s),o.push(s)),t.show.push(s)}for(l&&((c=c||e.config.layout.siblingAfter)&&l.appendChild(e.dom.document.createTextNode(" ")),e.insertDatasetFrag(l,c,o)),p=0;r=t.startDataset[p];p++)d=r[e.config.data.uidKey],s=e.cache[d],t.show.indexOf(s)<0?(t.hide.push(s),t.toHide.push(s),t.toRemove.push(s)):n.push(d);h.isEqualArray(n,i)||(t.willSort=!0),e.callActions("afterDiffDatasets",arguments)},insertDatasetFrag:function(t,e,n){var i=e?h.arrayFromList(this.dom.parent.children).indexOf(e):this.targets.length;for(this.dom.parent.insertBefore(t,e);n.length;)this.targets.splice(i,0,n.shift()),i++},willSort:function(t,e){var n=!1;return n=!!(this.config.behavior.liveSort||"random"===t.order||t.attribute!==e.attribute||t.order!==e.order||t.collection!==e.collection||null===t.next&&e.next||t.next&&null===e.next)||!(!t.next||!e.next)&&this.willSort(t.next,e.next),this.callFilters("resultWillSort",n,arguments)},show:function(){return this.filter("all")},hide:function(){return this.filter("none")},isMixing:function(){return this.isBusy},filter:function(){var t=this.parseFilterArgs(arguments);return this.multimix({filter:t.command},t.animate,t.callback)},toggleOn:function(){var t,e=this,n=e.parseFilterArgs(arguments),i=n.command.selector;return e.isToggling=!0,e.toggleArray.indexOf(i)<0&&e.toggleArray.push(i),t=e.getToggleSelector(),e.multimix({filter:t},n.animate,n.callback)},toggleOff:function(){var t,e=this,n=e.parseFilterArgs(arguments),i=n.command.selector,o=e.toggleArray.indexOf(i);return e.isToggling=!0,-1<o&&e.toggleArray.splice(o,1),t=e.getToggleSelector(),e.multimix({filter:t},n.animate,n.callback)},sort:function(){var t=this.parseSortArgs(arguments);return this.multimix({sort:t.command},t.animate,t.callback)},changeLayout:function(){var t=this.parseChangeLayoutArgs(arguments);return this.multimix({changeLayout:t.command},t.animate,t.callback)},dataset:function(){var t=this,e=t.parseDatasetArgs(arguments),n=null,i=null,o=!1;return t.callActions("beforeDataset",arguments),t.isBusy?((i=new f.QueueItem).args=arguments,i.instruction=e,t.queueMix(i)):(e.callback&&(t.userCallback=e.callback),o=e.animate^t.config.animation.enable?e.animate:t.config.animation.enable,n=t.getDataOperation(e.command.dataset),t.goMix(o,n))},multimix:function(){var t=this,e=null,n=!1,i=null,o=t.parseMultimixArgs(arguments);return t.callActions("beforeMultimix",arguments),t.isBusy?((i=new f.QueueItem).args=arguments,i.instruction=o,i.triggerElement=t.lastClicked,i.isToggling=t.isToggling,t.queueMix(i)):(e=t.getOperation(o.command),t.config.controls.enable&&(o.command.filter&&!t.isToggling&&(t.toggleArray.length=0,t.buildToggleArray(e.command)),t.queue.length<1&&t.updateControls(e.command)),o.callback&&(t.userCallback=o.callback),n=o.animate^t.config.animation.enable?o.animate:t.config.animation.enable,t.callFilters("operationMultimix",e,arguments),t.goMix(n,e))},getOperation:function(t){var e=this,n=t.sort,i=t.filter,o=t.changeLayout,r=t.remove,s=t.insert,a=new f.Operation;return(a=e.callFilters("operationUnmappedGetOperation",a,arguments)).id=h.randomHex(),a.command=t,a.startState=e.state,a.triggerElement=e.lastClicked,e.isBusy?(e.config.debug.showWarnings&&console.warn(f.messages.warningGetOperationInstanceBusy()),null):(s&&e.insertTargets(s,a),r&&(a.toRemove=r.targets),a.startSort=a.newSort=a.startState.activeSort,a.startOrder=a.newOrder=e.targets,n&&(a.startSort=a.startState.activeSort,a.newSort=n,a.willSort=e.willSort(n,a.startState.activeSort),a.willSort&&e.sortOperation(a)),a.startFilter=a.startState.activeFilter,a.newFilter=i||h.extend(new f.CommandFilter,a.startFilter),"all"===a.newFilter.selector?a.newFilter.selector=e.config.selectors.target:"none"===a.newFilter.selector&&(a.newFilter.selector=""),e.filterOperation(a),a.startContainerClassName=a.startState.activeContainerClassName,o?(a.newContainerClassName=o.containerClassName,a.newContainerClassName!==a.startContainerClassName&&(a.willChangeLayout=!0)):a.newContainerClassName=a.startContainerClassName,e.config.animation.enable&&(e.getStartMixData(a),e.setInter(a),a.docState=h.getDocumentState(e.dom.document),e.getInterMixData(a),e.setFinal(a),e.getFinalMixData(a),e.parseEffects(),a.hasEffect=e.hasEffect(),e.getTweenData(a)),a.willSort&&(e.targets=a.newOrder),a.newState=e.buildState(a),e.callFilters("operationMappedGetOperation",a,arguments))},tween:function(t,e){var n=null,i=null,o=-1,r=-1;for(e=Math.min(e,1),e=Math.max(e,0),r=0;n=t.show[r];r++)i=t.showPosData[r],n.applyTween(i,e);for(r=0;n=t.hide[r];r++)n.isShown&&n.hide(),-1<(o=t.toHide.indexOf(n))&&(i=t.toHidePosData[o],n.isShown||n.show(),n.applyTween(i,e))},insert:function(){var t=this.parseInsertArgs(arguments);return this.multimix({insert:t.command},t.animate,t.callback)},insertBefore:function(){var t=this.parseInsertArgs(arguments);return this.insert(t.command.collection,"before",t.command.sibling,t.animate,t.callback)},insertAfter:function(){var t=this.parseInsertArgs(arguments);return this.insert(t.command.collection,"after",t.command.sibling,t.animate,t.callback)},prepend:function(){var t=this.parseInsertArgs(arguments);return this.insert(0,t.command.collection,t.animate,t.callback)},append:function(){var t=this.parseInsertArgs(arguments);return this.insert(this.state.totalTargets,t.command.collection,t.animate,t.callback)},remove:function(){var t=this.parseRemoveArgs(arguments);return this.multimix({remove:t.command},t.animate,t.callback)},getConfig:function(t){var e=null;return e=t?h.getProperty(this.config,t):this.config,this.callFilters("valueGetConfig",e,arguments)},configure:function(t){this.callActions("beforeConfigure",arguments),h.extend(this.config,t,!0,!0),this.callActions("afterConfigure",arguments)},getState:function(){var t;return t=new f.State,h.extend(t,this.state),h.freeze(t),this.callFilters("stateGetState",t,arguments)},forceRefresh:function(){this.indexTargets()},forceRender:function(){var t=this,e=null,n=null,i="";for(i in t.cache)(n=(e=t.cache[i]).render(e.data))!==e.dom.el&&(e.isInDom&&(e.unbindEvents(),t.dom.parent.replaceChild(n,e.dom.el)),e.isShown||(n.style.display="none"),e.dom.el=n,e.isInDom&&e.bindEvents());t.state=t.buildState(t.lastOperation)},destroy:function(t){var e=this,n=null,i=null,o=0;for(e.callActions("beforeDestroy",arguments),o=0;n=e.controls[o];o++)n.removeBinding(e);for(o=0;i=e.targets[o];o++)t&&i.show(),i.unbindEvents();e.dom.container.id.match(/^MixItUp/)&&e.dom.container.removeAttribute("id"),delete f.instances[e.id],e.callActions("afterDestroy",arguments)}}),f.IMoveData=function(){f.Base.call(this),this.callActions("beforeConstruct"),this.posIn=null,this.posOut=null,this.operation=null,this.callback=null,this.statusChange="",this.duration=-1,this.staggerIndex=-1,this.callActions("afterConstruct"),h.seal(this)},f.BaseStatic.call(f.IMoveData),f.IMoveData.prototype=Object.create(f.Base.prototype),f.IMoveData.prototype.constructor=f.IMoveData,f.TargetDom=function(){f.Base.call(this),this.callActions("beforeConstruct"),this.el=null,this.callActions("afterConstruct"),h.seal(this)},f.BaseStatic.call(f.TargetDom),f.TargetDom.prototype=Object.create(f.Base.prototype),f.TargetDom.prototype.constructor=f.TargetDom,f.Target=function(){f.Base.call(this),this.callActions("beforeConstruct"),this.id="",this.sortString="",this.mixer=null,this.callback=null,this.isShown=!1,this.isBound=!1,this.isExcluded=!1,this.isInDom=!1,this.handler=null,this.operation=null,this.data=null,this.dom=new f.TargetDom,this.callActions("afterConstruct"),h.seal(this)},f.BaseStatic.call(f.Target),f.Target.prototype=Object.create(f.Base.prototype),h.extend(f.Target.prototype,{constructor:f.Target,init:function(t,e,n){var i=this,o="";if(i.callActions("beforeInit",arguments),i.mixer=e,t=t||i.render(n),i.cacheDom(t),i.bindEvents(),"none"!==i.dom.el.style.display&&(i.isShown=!0),n&&e.config.data.uidKey){if(void 0===(o=n[e.config.data.uidKey])||o.toString().length<1)throw new TypeError(f.messages.errorDatasetInvalidUidKey({uidKey:e.config.data.uidKey}));i.id=o,i.data=n,e.cache[o]=i}i.callActions("afterInit",arguments)},render:function(t){var e,n=null,i=null,o=null;if(this.callActions("beforeRender",arguments),"function"!=typeof(n=this.callFilters("renderRender",this.mixer.config.render.target,arguments)))throw new TypeError(f.messages.errorDatasetRendererNotSet());return(e=n(t))&&"object"==typeof e&&h.isElement(e)?i=e:"string"==typeof e&&((o=document.createElement("div")).innerHTML=e,i=o.firstElementChild),this.callFilters("elRender",i,arguments)},cacheDom:function(t){this.callActions("beforeCacheDom",arguments),this.dom.el=t,this.callActions("afterCacheDom",arguments)},getSortString:function(t){var e=this.dom.el.getAttribute("data-"+t)||"";this.callActions("beforeGetSortString",arguments),e=isNaN(+e)?e.toLowerCase():+e,this.sortString=e,this.callActions("afterGetSortString",arguments)},show:function(){var t=this;t.callActions("beforeShow",arguments),t.isShown||(t.dom.el.style.display="",t.isShown=!0),t.callActions("afterShow",arguments)},hide:function(){var t=this;t.callActions("beforeHide",arguments),t.isShown&&(t.dom.el.style.display="none",t.isShown=!1),t.callActions("afterHide",arguments)},move:function(t){var e=this;e.callActions("beforeMove",arguments),e.isExcluded||e.mixer.targetsMoved++,e.applyStylesIn(t),requestAnimationFrame(function(){e.applyStylesOut(t)}),e.callActions("afterMove",arguments)},applyTween:function(t,e){var n=this,i="",o=null,r=t.posIn,s=[],a=new f.StyleData,l=-1;for(n.callActions("beforeApplyTween",arguments),a.x=r.x,a.y=r.y,0===e?n.hide():n.isShown||n.show(),l=0;i=f.features.TWEENABLE[l];l++)if(o=t.tweenData[i],"x"===i){if(!o)continue;a.x=r.x+o*e}else if("y"===i){if(!o)continue;a.y=r.y+o*e}else if(o instanceof f.TransformData){if(!o.value)continue;a[i].value=r[i].value+o.value*e,a[i].unit=o.unit,s.push(i+"("+a[i].value+o.unit+")")}else{if(!o)continue;a[i]=r[i]+o*e,n.dom.el.style[i]=a[i]}(a.x||a.y)&&s.unshift("translate("+a.x+"px, "+a.y+"px)"),s.length&&(n.dom.el.style[f.features.transformProp]=s.join(" ")),n.callActions("afterApplyTween",arguments)},applyStylesIn:function(t){var e=this,n=t.posIn,i=1!==e.mixer.effectsIn.opacity,o=[];e.callActions("beforeApplyStylesIn",arguments),o.push("translate("+n.x+"px, "+n.y+"px)"),e.mixer.config.animation.animateResizeTargets&&("show"!==t.statusChange&&(e.dom.el.style.width=n.width+"px",e.dom.el.style.height=n.height+"px"),e.dom.el.style.marginRight=n.marginRight+"px",e.dom.el.style.marginBottom=n.marginBottom+"px"),i&&(e.dom.el.style.opacity=n.opacity),"show"===t.statusChange&&(o=o.concat(e.mixer.transformIn)),e.dom.el.style[f.features.transformProp]=o.join(" "),e.callActions("afterApplyStylesIn",arguments)},applyStylesOut:function(t){var e=this,n=[],i=[],o=e.mixer.config.animation.animateResizeTargets,r=void 0!==e.mixer.effectsIn.opacity;if(e.callActions("beforeApplyStylesOut",arguments),n.push(e.writeTransitionRule(f.features.transformRule,t.staggerIndex)),"none"!==t.statusChange&&n.push(e.writeTransitionRule("opacity",t.staggerIndex,t.duration)),o&&(n.push(e.writeTransitionRule("width",t.staggerIndex,t.duration)),n.push(e.writeTransitionRule("height",t.staggerIndex,t.duration)),n.push(e.writeTransitionRule("margin",t.staggerIndex,t.duration))),!t.callback)return e.mixer.targetsImmovable++,void(e.mixer.targetsMoved===e.mixer.targetsImmovable&&e.mixer.cleanUp(t.operation));switch(e.operation=t.operation,e.callback=t.callback,e.isExcluded||e.mixer.targetsBound++,e.isBound=!0,e.applyTransition(n),o&&0<t.posOut.width&&0<t.posOut.height&&(e.dom.el.style.width=t.posOut.width+"px",e.dom.el.style.height=t.posOut.height+"px",e.dom.el.style.marginRight=t.posOut.marginRight+"px",e.dom.el.style.marginBottom=t.posOut.marginBottom+"px"),e.mixer.config.animation.nudge||"hide"!==t.statusChange||i.push("translate("+t.posOut.x+"px, "+t.posOut.y+"px)"),t.statusChange){case"hide":r&&(e.dom.el.style.opacity=e.mixer.effectsOut.opacity),i=i.concat(e.mixer.transformOut);break;case"show":r&&(e.dom.el.style.opacity=1)}(e.mixer.config.animation.nudge||!e.mixer.config.animation.nudge&&"hide"!==t.statusChange)&&i.push("translate("+t.posOut.x+"px, "+t.posOut.y+"px)"),e.dom.el.style[f.features.transformProp]=i.join(" "),e.callActions("afterApplyStylesOut",arguments)},writeTransitionRule:function(t,e,n){var i,o=this.getDelay(e);return i=t+" "+(0<n?n:this.mixer.config.animation.duration)+"ms "+o+"ms "+("opacity"===t?"linear":this.mixer.config.animation.easing),this.callFilters("ruleWriteTransitionRule",i,arguments)},getDelay:function(t){var e,n=this;return"function"==typeof n.mixer.config.animation.staggerSequence&&(t=n.mixer.config.animation.staggerSequence.call(n,t,n.state)),e=n.mixer.staggerDuration?t*n.mixer.staggerDuration:0,n.callFilters("delayGetDelay",e,arguments)},applyTransition:function(t){var e=t.join(", ");this.callActions("beforeApplyTransition",arguments),this.dom.el.style[f.features.transitionProp]=e,this.callActions("afterApplyTransition",arguments)},handleTransitionEnd:function(t){var e=this,n=t.propertyName,i=e.mixer.config.animation.animateResizeTargets;e.callActions("beforeHandleTransitionEnd",arguments),e.isBound&&t.target.matches(e.mixer.config.selectors.target)&&(-1<n.indexOf("transform")||-1<n.indexOf("opacity")||i&&-1<n.indexOf("height")||i&&-1<n.indexOf("width")||i&&-1<n.indexOf("margin"))&&(e.callback.call(e,e.operation),e.isBound=!1,e.callback=null,e.operation=null),e.callActions("afterHandleTransitionEnd",arguments)},eventBus:function(t){switch(this.callActions("beforeEventBus",arguments),t.type){case"webkitTransitionEnd":case"transitionend":this.handleTransitionEnd(t)}this.callActions("afterEventBus",arguments)},unbindEvents:function(){var t=this;t.callActions("beforeUnbindEvents",arguments),h.off(t.dom.el,"webkitTransitionEnd",t.handler),h.off(t.dom.el,"transitionend",t.handler),t.callActions("afterUnbindEvents",arguments)},bindEvents:function(){var t,e=this;e.callActions("beforeBindEvents",arguments),t="webkit"===f.features.transitionPrefix?"webkitTransitionEnd":"transitionend",e.handler=function(t){return e.eventBus(t)},h.on(e.dom.el,t,e.handler),e.callActions("afterBindEvents",arguments)},getPosData:function(t){var e=this,n={},i=null,o=new f.StyleData;return e.callActions("beforeGetPosData",arguments),o.x=e.dom.el.offsetLeft,o.y=e.dom.el.offsetTop,(e.mixer.config.animation.animateResizeTargets||t)&&(i=e.dom.el.getBoundingClientRect(),o.top=i.top,o.right=i.right,o.bottom=i.bottom,o.left=i.left,o.width=i.width,o.height=i.height),e.mixer.config.animation.animateResizeTargets&&(n=p.getComputedStyle(e.dom.el),o.marginBottom=parseFloat(n.marginBottom),o.marginRight=parseFloat(n.marginRight)),e.callFilters("posDataGetPosData",o,arguments)},cleanUp:function(){var t=this;t.callActions("beforeCleanUp",arguments),t.dom.el.style[f.features.transformProp]="",t.dom.el.style[f.features.transitionProp]="",t.dom.el.style.opacity="",t.mixer.config.animation.animateResizeTargets&&(t.dom.el.style.width="",t.dom.el.style.height="",t.dom.el.style.marginRight="",t.dom.el.style.marginBottom=""),t.callActions("afterCleanUp",arguments)}}),f.Collection=function(t){var e=null,n=-1;for(this.callActions("beforeConstruct"),n=0;e=t[n];n++)this[n]=e;this.length=t.length,this.callActions("afterConstruct"),h.freeze(this)},f.BaseStatic.call(f.Collection),f.Collection.prototype=Object.create(f.Base.prototype),h.extend(f.Collection.prototype,{constructor:f.Collection,mixitup:function(t){var e=null,n=Array.prototype.slice.call(arguments),i=[],o=-1;for(this.callActions("beforeMixitup"),n.shift(),o=0;e=this[o];o++)i.push(e[t].apply(e,n));return this.callFilters("promiseMixitup",h.all(i,f.libraries),arguments)}}),f.Operation=function(){f.Base.call(this),this.callActions("beforeConstruct"),this.id="",this.args=[],this.command=null,this.showPosData=[],this.toHidePosData=[],this.startState=null,this.newState=null,this.docState=null,this.willSort=!1,this.willChangeLayout=!1,this.hasEffect=!1,this.hasFailed=!1,this.triggerElement=null,this.show=[],this.hide=[],this.matching=[],this.toShow=[],this.toHide=[],this.toMove=[],this.toRemove=[],this.startOrder=[],this.newOrder=[],this.startSort=null,this.newSort=null,this.startFilter=null,this.newFilter=null,this.startDataset=null,this.newDataset=null,this.viewportDeltaX=0,this.viewportDeltaY=0,this.startX=0,this.startY=0,this.startHeight=0,this.startWidth=0,this.newX=0,this.newY=0,this.newHeight=0,this.newWidth=0,this.startContainerClassName="",this.startDisplay="",this.newContainerClassName="",this.newDisplay="",this.callActions("afterConstruct"),h.seal(this)},f.BaseStatic.call(f.Operation),f.Operation.prototype=Object.create(f.Base.prototype),f.Operation.prototype.constructor=f.Operation,f.State=function(){f.Base.call(this),this.callActions("beforeConstruct"),this.id="",this.activeFilter=null,this.activeSort=null,this.activeContainerClassName="",this.container=null,this.targets=[],this.hide=[],this.show=[],this.matching=[],this.totalTargets=-1,this.totalShow=-1,this.totalHide=-1,this.totalMatching=-1,this.hasFailed=!1,this.triggerElement=null,this.activeDataset=null,this.callActions("afterConstruct"),h.seal(this)},f.BaseStatic.call(f.State),f.State.prototype=Object.create(f.Base.prototype),f.State.prototype.constructor=f.State,f.UserInstruction=function(){f.Base.call(this),this.callActions("beforeConstruct"),this.command={},this.animate=!1,this.callback=null,this.callActions("afterConstruct"),h.seal(this)},f.BaseStatic.call(f.UserInstruction),f.UserInstruction.prototype=Object.create(f.Base.prototype),f.UserInstruction.prototype.constructor=f.UserInstruction,f.Messages=function(){f.Base.call(this),this.callActions("beforeConstruct"),this.ERROR_FACTORY_INVALID_CONTAINER="[MixItUp] An invalid selector or element reference was passed to the mixitup factory function",this.ERROR_FACTORY_CONTAINER_NOT_FOUND="[MixItUp] The provided selector yielded no container element",this.ERROR_CONFIG_INVALID_ANIMATION_EFFECTS="[MixItUp] Invalid value for `animation.effects`",this.ERROR_CONFIG_INVALID_CONTROLS_SCOPE="[MixItUp] Invalid value for `controls.scope`",this.ERROR_CONFIG_INVALID_PROPERTY='[MixitUp] Invalid configuration object property "${erroneous}"${suggestion}',this.ERROR_CONFIG_INVALID_PROPERTY_SUGGESTION='. Did you mean "${probableMatch}"?',this.ERROR_CONFIG_DATA_UID_KEY_NOT_SET="[MixItUp] To use the dataset API, a UID key must be specified using `data.uidKey`",this.ERROR_DATASET_INVALID_UID_KEY='[MixItUp] The specified UID key "${uidKey}" is not present on one or more dataset items',this.ERROR_DATASET_DUPLICATE_UID='[MixItUp] The UID "${uid}" was found on two or more dataset items. UIDs must be unique.',this.ERROR_INSERT_INVALID_ARGUMENTS="[MixItUp] Please provider either an index or a sibling and position to insert, not both",this.ERROR_INSERT_PREEXISTING_ELEMENT="[MixItUp] An element to be inserted already exists in the container",this.ERROR_FILTER_INVALID_ARGUMENTS="[MixItUp] Please provide either a selector or collection `.filter()`, not both",this.ERROR_DATASET_NOT_SET="[MixItUp] To use the dataset API with pre-rendered targets, a starting dataset must be set using `load.dataset`",this.ERROR_DATASET_PRERENDERED_MISMATCH="[MixItUp] `load.dataset` does not match pre-rendered targets",this.ERROR_DATASET_RENDERER_NOT_SET="[MixItUp] To insert an element via the dataset API, a target renderer function must be provided to `render.target`",this.ERROR_SORT_NON_EXISTENT_ELEMENT="[MixItUp] An element to be sorted does not already exist in the container",this.WARNING_FACTORY_PREEXISTING_INSTANCE="[MixItUp] WARNING: This element already has an active MixItUp instance. The provided configuration object will be ignored. If you wish to perform additional methods on this instance, please create a reference.",this.WARNING_INSERT_NO_ELEMENTS="[MixItUp] WARNING: No valid elements were passed to `.insert()`",this.WARNING_REMOVE_NO_ELEMENTS="[MixItUp] WARNING: No valid elements were passed to `.remove()`",this.WARNING_MULTIMIX_INSTANCE_QUEUE_FULL="[MixItUp] WARNING: An operation was requested but the MixItUp instance was busy. The operation was rejected because the queue is full or queuing is disabled.",this.WARNING_GET_OPERATION_INSTANCE_BUSY="[MixItUp] WARNING: Operations can be be created while the MixItUp instance is busy.",this.WARNING_NO_PROMISE_IMPLEMENTATION="[MixItUp] WARNING: No Promise implementations could be found. If you wish to use promises with MixItUp please install an ES6 Promise polyfill.",this.WARNING_INCONSISTENT_SORTING_ATTRIBUTES='[MixItUp] WARNING: The requested sorting data attribute "${attribute}" was not present on one or more target elements which may product unexpected sort output',this.callActions("afterConstruct"),this.compileTemplates(),h.seal(this)},f.BaseStatic.call(f.Messages),f.Messages.prototype=Object.create(f.Base.prototype),f.Messages.prototype.constructor=f.Messages,f.Messages.prototype.compileTemplates=function(){var t="",e="";for(t in this)"string"==typeof(e=this[t])&&(this[h.camelCase(t)]=h.template(e))},f.messages=new f.Messages,f.Facade=function(t){f.Base.call(this),this.callActions("beforeConstruct",arguments),this.configure=t.configure.bind(t),this.show=t.show.bind(t),this.hide=t.hide.bind(t),this.filter=t.filter.bind(t),this.toggleOn=t.toggleOn.bind(t),this.toggleOff=t.toggleOff.bind(t),this.sort=t.sort.bind(t),this.changeLayout=t.changeLayout.bind(t),this.multimix=t.multimix.bind(t),this.dataset=t.dataset.bind(t),this.tween=t.tween.bind(t),this.insert=t.insert.bind(t),this.insertBefore=t.insertBefore.bind(t),this.insertAfter=t.insertAfter.bind(t),this.prepend=t.prepend.bind(t),this.append=t.append.bind(t),this.remove=t.remove.bind(t),this.destroy=t.destroy.bind(t),this.forceRefresh=t.forceRefresh.bind(t),this.forceRender=t.forceRender.bind(t),this.isMixing=t.isMixing.bind(t),this.getOperation=t.getOperation.bind(t),this.getConfig=t.getConfig.bind(t),this.getState=t.getState.bind(t),this.callActions("afterConstruct",arguments),h.freeze(this),h.seal(this)},f.BaseStatic.call(f.Facade),f.Facade.prototype=Object.create(f.Base.prototype),f.Facade.prototype.constructor=f.Facade,"object"==typeof exports&&"object"==typeof module?module.exports=f:"function"==typeof define&&define.amd?define(function(){return f}):void 0!==p.mixitup&&"function"==typeof p.mixitup||(p.mixitup=f),f.BaseStatic.call(f.constructor),f.NAME="mixitup",f.CORE_VERSION="3.3.1"}(window);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
